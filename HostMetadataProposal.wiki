This page describes additional metadata that describes the host. The metadata will live in two places, the hLS for current host information and in the MA test metadata for historical information. In the future, we may want to move more of this to the Lookup Service/Topology Service.

= Measurment Archive Metadata Parameters =
The table below describes the new set of parameters that will be added to the metadata of tests registered with the measurement archive.

|| Parameter Name || Description || Examples ||
|| srcTCPCongestionCtrlAlg || The congestion control algorithm used by the source host|| "cubic","reno", "htcp"||
|| dstTCPCongestionCtrlAlg  || The congestion control algorithm used by the destination host|| "cubic","reno", "htcp"||
|| srcInterfaceCapacity || The capacity of the source host interface. The units used for the capacity must be specified in the string. || "100Mbps", "1Gbps" ||
|| dstInterfaceCapacity || The capacity of the destination host interface. The units used for the capacity must be specified in the string.|| "100Mbps", "1Gbps"||
|| srcOperatingSystemType || The name of the operating system on the source host. || "CentOS", "FreeBSD" ||
|| dstOperatingSystemType || The name of the operating system on the destination host. || "CentOS", "FreeBSD" ||
|| srcOperatingSystemVersion || The version of the operating system on the source host. || "5.6", "7.3" ||
|| dstOperatingSystemVersion || The version of the operating system on the destination host. || "5.6", "7.3" ||
|| srcServiceSoftwareType || The name of the software package used to provide the service. More useful for services that have multiple implementations.|| "bwctl", "owamp" ||
|| destServiceSoftwareType || The name of the software package used to provide the service. More useful for services that have multiple implementations. || "bwctl", "owamp" ||
|| srcServiceSoftwareVersion || The version of the service software (i.e. bwctl, owamp) indicated by the type on the source host. || "1.3" ||
|| destServiceSoftwareVersion || The version of the service software (i.e. bwctl, owamp) indicated by the type on the destination host. || "1.3" ||
|| bwctlToolType|| Specific to bwctl. The name of the tool run by BWCTL. || "iperf", "nuttcp" ||
|| srcBwctlToolVersion || Specific to bwctl. The version of the tool run by BWCTL on the source.|| "2.0.5" ||
|| dstBwctlToolVersion || Specific to bwctl. The version of the tool run by BWCTL on the destination.|| "2.0.5" ||

== Default Behavior ==
This section defines how a MA should behave in the combination of scenarios where a client does or does not specify the parameter in a  query, and the MA metadata does or does not contain a particular parameter in the registered metadata. The table below summarizes each possible scenario: 
|| || Exists in MA Metadata || Does not exist in MA Metadata||
|| Specified in query || Return results if parameter in query matches parameter in metadata || Do not return result||
|| Not specified in query||Return result. Assume that since not in query then matches any value.  || Return result ||

The table above should be consistent with how we currently handle missing parameters in the MA. 

= Lookup Service Registrations =

==Service Registration==
===Example===
{{{
<nmwg:store type="LSStore" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
    <nmwg:metadata id="f93a6f5dd84fded2114d80b3210d8b3a" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
      <perfsonar:subject id="subject.15263842" xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/">
        <nmtb:service xmlns:nmtb="http://ogf.org/schema/network/base/20070828/">
          <nmtb:name>ESnet-anl OWAMP Server</nmtb:name>
          <nmtb:description>OWAMP Server at ESnet-anl at ANL</nmtb:description>
          <nmtb:address type="uri">tcp://anl-owamp.es.net:861</nmtb:address>
          <nmtb:type>owamp</nmtb:type>
          
          <!-- info used about software to implement the service -->
          <nmtb:softwareType>owamp</nmtb:softwareType>
          <nmtb:softwareVersion>3.2rc1</nmtb:softwareVersion>
          
          <!-- relation element that points to node -->
          <nmtb:relation type="runsOn">
            <nmtb:idRef type="node">urn:ogf:network:es.net:anl-owamp</nmtb:idRef>
          </nmtb:relation>
        </nmtb:service>
      </perfsonar:subject>
    </nmwg:metadata>
</nmwg:store>
}}}

===Differences===
The service registration should look the same as the current service registration except for the following differences:
 * There are two new elements called softwareType and softwareVersion that describe the software package used to implement the service. The type field will be most useful for services that have multiple implementations.
 * There is a relation element of type "runsOn" which points to the node object where the host runs. This is actually what OSCARS does currently, so its not entirely new. 


*Host Registration:*
===Example===
{{{
<nmwg:store type="LSStore" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
    <nmwg:metadata id="ABC123456789" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
        <nmtb:node xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070828/" 
            xmlns:nmtl3="http://ogf.org/schema/network/topology/l3/20070828/"
            xmlns:nmhost="http://ogf.org/schema/network/topology/host/20110509/"
            id="urn:ogf:network:es.net:anl-owamp">
      
            <!-- stuff already defined by node -->
            <nmtb:name type="string">anl-owamp</nmtb:name>
            <nmtb:hostName>anl-owamp.es.net</nmtb:name>
            <nmtb:description>ESnet latency host at ANL</nmtb:description>
        
            <nmtl3:port id="urn:ogf:network:es.net:anl-owamp:em0">
                <nmtl3:address type="ipv6">fe80::230:48ff:fe43:d4e4</nmtl3:ipAddress>
                <nmtl3:address type="ipv4">198.124.252.97</nmtl3:ipAddress>
                <nmtl3:netmask>255.255.255.252</nmtl3:netmask>
                <nmtl3:capacity>1Gbps</nmtl2:capacity>
            </nmtl3:port>
        
            <!-- new stuff for the host -->
            <nmhost:operatingSystemType>FreeBSD</nmhost:operatingSystemType>
            <nmhost:operatingSystemVersion>7.3</nmhost:operatingSystemVersion>
            <nmhost:tcpCongestionCtrlAlg>reno</nmhost:tcpCongestionCtrlAlg>
            
        </nmtb:node>
    </nmwg:metadata>
</nmwg:store>
}}}

===Differences===
There would also be a node object registered for each service. Through the use of existing elements like _capacity_ in the _port_ object, we can capture features like interface capacity. The remaining properties are not defined anywhere...at least consistently. The example above uses a "host" namespace describes information specific to an end system node. Since the node is generic and can represent things that are not end systems, puting it in the base is probably not appropriate. Based on the DICE document, we need operatingSystemType, operatingSystemVersion, and tcpCongestionCtrlAlg. We could presumably add more if they are needed.  There are plenty of open issues with this approach. 