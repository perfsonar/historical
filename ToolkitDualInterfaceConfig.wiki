#summary How to use a dual homed perfSONAR node to avoid overruns when testing against a slower NIC

= Description Of The Problem =

When perfSONAR node is used to test the throughput to a host with a slower network connection, such 10Ge vs 1Gb, a false result will be reported for throughput between the two nodes. The throughput graphs will show an asymmetric network path between these two nodes, such as 950Mb in one direction, but only 200Mb in the reverse direction.

= Cause Of The Problem =

When bwctl uses iperf to push data from a 10Ge NIC into a 1Gb NIC, an overrun condition occurs. This results in dropped packets on the 1Gb node. The more hops between the two nodes, the lower the "apparent" throughput will be reported. Depending on the type of switches and routers between the two nodes, the problem might be masked or appear worse due to buffering and other hardware/software configurations.

= Workaround For The Problem =

A work around to this problem is to create a direct "route" on a dual homed perfSONAR to either the 1Gb or 10Ge NIC depending on the network speed of the remote node. By using a 1Gb to 1Gb path, overruns will be avoided by the naturally occurring throttle enforced by the hardware.

= Installation Details =

  * Create a dual homed perfSONAR node with both 10Ge and 1Gb connections on the same subnet (but with different IPs)

  * Edit /opt/perfsonar_ps/toolkit/etc/discover_external_address.conf to specify the 10Ge NIC as the default
{{{
   external_interface    eth<n>
}}}

  * Edit /etc/hosts to make certain the FQDN and IPs are correct

  * Create /usr/local/perfsonar and download the following files in this area

      [http://perfsonar-ps.googlecode.com/svn/wiki/ToolkitDualInterfaceConfig/bwctl.sh bwctl.sh]

      [http://perfsonar-ps.googlecode.com/svn/wiki/ToolkitDualInterfaceConfig/iperf.sh iperf.sh]

      [http://perfsonar-ps.googlecode.com/svn/wiki/ToolkitDualInterfaceConfig/ten-g-hosts.txt ten-g-hosts.txt]

   *  Fix the permissions on these files to allow their execution
{{{
   chmod 755 /usr/local/perfsonar/bwctl.sh
   chmod 755 /usr/local/perfsonar/iperf.sh
   chmod 644 /usr/local/perfsonar/ten-g-hosts.txt
}}}

  * Edit bwctl.sh and iperf.sh for the 10Ge and 1Gb NICs and the gateway address appropriate for your site
{{{
   DEFAULT_GW
   TEN_G_FQDN
   ONE_G_FQDN
   TEN_G_DEV
   ONE_G_DEV
   TEN_G_IP
   ONE_G_IP

   LOGGING
}}}

  * Edit ten-g-hosts.txt to add/delete/change the FQDN of 10Ge hosts to test against.

   The FQDN must exactly match the name used in the "Scheduled Tests" and which show up in the "Throughput Tests" as either the "First Host" or "Second Host".


  * Change/add the following to /etc/sudoers
{{{
   #Defaults    requiretty
   perfsonar    ALL=(ALL) NOPASSWD: /sbin/route
   bwctl        ALL=(ALL) NOPASSWD: /sbin/route
}}}

  * Optionally edit /etc/syslog.conf
{{{
   local5.*        /var/log/perfsonar/bwctl.log
   local6.*        /var/log/perfsonar/iperf.log
}}}

  * Activate the new scripts
{{{
   mv /usr/bin/bwctl /usr/bin/bwctl.bin
   ln -s /usr/local/perfsonar/bwctl.sh /usr/bin/bwctl

   mv /usr/bin/iperf /usr/bin/iperf.bin
   ln -s /usr/local/perfsonar/iperf.sh /usr/bin/iperf
}}}

  * Reboot....or restart syslog and perfsonar_ma


= How It Works =

The following is a brief description of what these two scripts are doing.


Whenever perfsonar_ma is start/restart, bwctld invokes /usr/bin/bwctl (as user perfsonar) in one of two forms

{{{
   bwctl -T iperf -e local5 -p -B <device FQDN> -rvv -I 14400 -t <time> -d <log> -s <src FQDN> -c [<dst FQDN>]:4823
   bwctl -T iperf -e local5 -p -B <device FQDN> -rvv -I 14400 -t <time> -d <log> -s [ src FQDN ]:4823 -c <dst FQDN>
}}}

Since bwctl is now a softlink to a script, it is possible to extract the various test parameters. For bwctl, only the FQDN of the remote test host is needed.
The remote test host is always located between  `[ FQDN ]:4823`, so it is easy to find and extract.

This FQDN is then looked for in the ten-g-hosts.txt file


If a simple match is found (just a simple grep), the command is rewritten so that the test is bound to the 10Ge NIC. If no match is found, then the command is rewritten to bind to the 1Gb NIC.


If a route to this host already exists, it is first removed
{{{
   sudo route del -host $HOST_TARGET 2> /dev/null
}}}
Then a route is created to force all traffic to the remote test host to go via that appropriate NIC (1 or 10)
{{{
   sudo route add -host $HOST_TARGET gw $DEFAULT_GW dev <NIC>
}}}

The rewritten command is then executed as an `"exec"`. It is mandatory that the PID not change.
{{{
   exec /usr/bin/bwctl.bin $NEW_LINE
}}}

Note: perfsonar_ma executes bwctld and thus bwctl.sh twice per remote test host. One is for the outgoing test, the other for the loopback test. So if you have logging turned on, you will see two entries per remote test host.



The iperf.sh script is invoked every time a test is performed using iperf as user bwctl. There are three forms of the command used
{{{
   iperf -c <client IP> -B <device IP> -f b -m -p <port> -t <time>
   iperf -B <device IP> -s -f b -m -p <port> -t <time>
   iperf -v


"iperf -v" is used only once when perfsonar_ma starts up.
"iperf -c" is for outgoing tests to the remote test host, ie iperf client
"iperf -s" is for incomming tests from the remote test host, ie iperf server
}}}

Since iperf is a softlink to the script iperf.sh, it is now possible to extract the various command line parameters

The script first looks to see if this is an outgoing test by looking for " -c"
If it is not a client test (iperf -s, iperf -v), then the command is executed as is with an "exec" Again the PID must not change.
{{{
   exec /usr/bin/iperf.bin $CMD_LINE
}}}
If the command is for a client test, the client IP, device IP and run time are extracted

If a route for the client IP already exists (created by bwctl.sh), the command is executed as is via "exec"

If no route exists, then a route is created to this node using the NIC specified by -B.
A script is created to remove the route after the test is complete and forked into the background.
The original iperf command is then executed as is via an "exec"

A route to a remote host will only exist if the local perfsonar is configured to test against this remote host.
This route would be setup by the bwctl.sh script. Thus there is no need to setup a route as it is assumed the
"correct" NIC has already been selected.

If a route does not exist, then this test was initiated by an "anonymous" remote administrator against the local perfsonar.
Hopefully the remote admin has selected the correct local NIC to test against that matches what their machine can handle.
A route is created via this NIC, but removed after the test is complete. This way, if the remote administrator
selected an incorrect local NIC based on speed (or upgraded their node), the local admin will not have be contacted
to correct the route.