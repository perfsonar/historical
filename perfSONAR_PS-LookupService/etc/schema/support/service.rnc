# ##############################################################
# 
# File:         service.rnc - Elements specific to the perfsonar
#                             implementation.
# Version:         $Id: service.rnc 341 2008-04-24 21:52:11Z boote $
# Purpose:         Describes specific elements to be used in the
#               representation and handling of perfsonar.
# Reference:        http://books.xmlschemata.org/relaxng/page2.html
#                         
# ##############################################################


# ##############################################################
# Namespace definitions
# ##############################################################
namespace perfsonar = "http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/"
namespace psservice = "http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/"
namespace xpath = "http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xpath/1.0/"
namespace xquery = "http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0/"
namespace sql = "http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/sql/1.0/"
namespace nmwg = "http://ggf.org/ns/nmwg/base/2.0/"


# ##############################################################
# The service description describes something running at the
# application layer in most instances.  
#
# Example: 
#
#   <psservice:service id="REQUIRED_ID"
#                      xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/">
#
#     <psservice:serviceName> TEXT </psservice:serviceName>
#
#     <psservice:accessPoint> TEXT </psservice:accessPoint>       
#
#     <psservice:serviceType> TEXT </psservice:serviceType>
#
#     <psservice:serviceDescription> TEXT </psservice:serviceDescription>
#
#   </psservice:service>
#
# ##############################################################

LSMetadataBlock = 
        (
                perfSONARSubject? &
                (
                        perfSONARParameters |
                        ReDefParameters
                )?
        ) |
        (
                ServiceSubject? &
                (
                        ServiceParameters |
                        ReDefParameters
                )?
        ) |
        (
                XPathSubject? &
                (
                        XPathParameters |
                        ReDefParameters
                )?
        ) |
        (
                XQuerySubject? &
                (
                        XQueryParameters |
                        ReDefParameters
                )?
        ) |                
        (
                SQLSubject? &
                (
                        SQLParameters |
                        ReDefParameters
                )?
        )

Service = 
        element psservice:service {
                attribute id { xsd:string } &
                element psservice:serviceName { xsd:string }? &
                element psservice:accessPoint { xsd:string }? &
                element psservice:serviceType { xsd:string }? &
                element psservice:serviceDescription { xsd:string }?                        
        }

perfSONARSubject =
        element perfsonar:subject {
                attribute id { xsd:string } &
                (
                        Service |
                        text
                )?
        }
        
ServiceSubject =
        element psservice:subject {
                attribute id { xsd:string } &
                (
                        Service |
                        text
                )?
        }

ServiceParameters = 
        element psservice:parameters {
                ReDefParametersContent
        }

perfSONARParameters = 
        element perfsonar:parameters {
                ReDefParametersContent
        }

XPathSubject =
        element xpath:subject {
                attribute id { xsd:string } &
                text?
        }

XPathParameters = 
        element xpath:parameters {
                ReDefParametersContent
        }
                        
XQuerySubject =
        element xquery:subject {
                attribute id { xsd:string } &
                text?
        }

XQueryParameters = 
        element xquery:parameters {
                ReDefParametersContent
        }
              
SQLSubject =
        element sql:subject {
                attribute id { xsd:string } &
                text?
        }

SQLParameters = 
        element sql:parameters {
                ReDefParametersContent
        }               
                       

# ##############################################################
# Specific datum elements primarily used to guide the execution 
# process within perfsonar.
#
# Example: 
# 
# <xpath:datum type="OPTIONAL TYPE"
#              xmlns:nmwg="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xpath/1.0/">
# 
#   <!-- ANY ELEMENT IN ANY NAMESPACE OR ANY TEXT -->
#  
# </xpath:datum>
#
# The namespaces could of course be different
# 
# ##############################################################

LookupServiceDataContent = 
        perfSONARDatum |
        ServiceDatum |
        XPathDatum |
        XQueryDatum |
        SQLDatum |
        ResultDatum

perfSONARDatum =
        element perfsonar:datum {
                attribute type { xsd:string }? &
                anyElement
        }*

ServiceDatum =
        element psservice:datum {
                attribute type { xsd:string }? &
                anyElement
        }*

XPathDatum =
        element xpath:datum { 
                anyElement
        }*
        
XQueryDatum =
        element xquery:datum { 
                anyElement
        }*
        
SQLDatum =
        element sql:datum { 
                anyElement
        }*


# ##############################################################
# Parameters and Parameter elements can be used in a number of 
# ways: in the message to signify items such as time stamp or
# authorization, in metadata or data to specify filters or
# special cases for the information.  A 'parameters' block
# has an id, and encloses one to many 'parameter' elements. 
# These elements have a required 'name', and may contain
# an attribute, element, or text value (only one please, 
# software using this should consider complex elements, then 
# text, and finally the value attribute; exceptions should
# be thrown on duplicates).
#
# Example: 
# 
# <nmwg:parameters id="REQUIRED_ID" 
#                  xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
# 
#   <nmwg:parameter name="REQUIRED_NAME" value="OPTIONAL_VALUE"
#                   xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
# 
#     <!-- ANY TEXT, OR ANY ELEMENT ANY NAMESPACE (IF YOU DID NOT 
#          USE THE VALUE ATTRIBUTE) -->
# 
#   </nmwg:parameter>
#  
#   <!-- MORE PARAMETERS -->
#   
# </nmwg:parameters>
# 
# The namespaces can of course be different.
# 
# ##############################################################

ReDefParameters = 
        element nmwg:parameters { ReDefParametersContent }

ReDefParametersContent =    
        attribute id { xsd:string } &
        ReDefParameter+
   
ReDefParameter = 
        element nmwg:parameter { 
                attribute name { xsd:string } &
                (
                        attribute value { xsd:string } |
                        anyElement |
                        text
                )?
        }   
