= Introduction =

This page describes how to turn on the [http://acs.lbl.gov/NetLoggerWiki NetLogger] Instrumentation in perfSONAR.

= Details =

Several of the core perfSONAR components have had NetLogger instrumentation added to them. The overhead of turning on NetLogger is slightly less than running the programs in DEBUG mode.

To active this instrumentation, add something like this to your logger.conf file:

{{{
#uncomment to enable NetLogger instrumentation
log4perl.category.NetLogger=DEBUG, A2
log4perl.appender.A2=Log::Dispatch::FileRotate
# roll over log files when they reach 16MB, and only keep 5 of them
log4perl.appender.A2.size=16777216
log4perl.appender.A2.max=5
log4perl.appender.A2.filename=/var/log/perfSONAR/hLS.netlogger.log
log4perl.appender.A2.mode=append
log4perl.appender.A2.layout=Log::Log4perl::Layout::PatternLayout
log4perl.appender.A2.layout.ConversionPattern=%m%n
}}}

== Useful NetLogger Tools ==

This simplest way to extract NetLogger timing info is to use the tool nl_interval. For example:

{{{
 nl_interval logfile > timing.out
 sort -n -k 2 -r timing.out | more
}}}

== Adding Additional Instrumentation ==

When doing performance analysis with NetLogger, often you'll want to add additional NetLogger calls to zero in on the performance bottleneck. NetLogger adds very little overhead, so there is no harm adding additional calls.

Some good examples for how to add NetLogger calls can be found in Shared/lib/perfSONAR_PS/Transport.pm.
Just look for all instances of "NETLOGGER" and "NetLogger" in that file.

== NetLogger Tools install quickstart ==

To install nl_interval and other useful tools:
   
{{{
 wget http://acs.lbl.gov/NetLogger-releases/src/4.1.2/netlogger-python-4.1.2.tar.gz
 tar xvzf netlogger-python-4.1.2.tar.gz
 cd netlogger-4.1.2/
 python setup.py install
}}}
