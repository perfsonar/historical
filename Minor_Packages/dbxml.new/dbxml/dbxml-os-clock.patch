--- src/common/Timer.cpp	2006-10-30 18:45:50.000000000 +0100
+++ src/common/Timer.cpp	2007-10-29 18:11:54.000000000 +0100
@@ -10,10 +10,7 @@
 #include <db_cxx.h>
 #include <iostream>
 #include <sstream>
-
-// use __os_clock from Berkeley DB internals
-
-extern "C" int __os_clock(DB_ENV *, u_int32_t *, u_int32_t *);
+#include <sys/time.h>
 
 using namespace DbXml;
 
@@ -33,13 +30,20 @@
 
 void Timer::start()
 {
-	(void)__os_clock(NULL, &start_secs, &start_usecs);
+	struct timeval v;
+	gettimeofday(&v, NULL);
+	start_secs = v.tv_sec;
+	start_usecs = v.tv_usec;
 }
 
 void Timer::stop()
 {
 	u_int32_t stop_secs, stop_usecs;
-	(void)__os_clock(NULL, &stop_secs, &stop_usecs);
+	struct timeval v;
+
+	gettimeofday(&v, NULL);
+	stop_secs = v.tv_sec;
+	stop_usecs = v.tv_usec;
 	duration_secs += (stop_secs - start_secs);
 	duration_usecs += (stop_usecs - start_usecs);
 	// fixup for usec under/overflow
--- src/dbxml/HighResTimer.cpp	2006-10-30 18:45:52.000000000 +0100
+++ src/dbxml/HighResTimer.cpp	2007-10-29 18:15:33.000000000 +0100
@@ -13,8 +13,7 @@
 
 #include <iostream>
 #include <sstream>
-
-extern "C" int __os_clock(DB_ENV *, u_int32_t *, u_int32_t *);
+#include <sys/time.h>
 
 using namespace DbXml;
 
@@ -109,13 +108,21 @@
 
 void HighResTimer::start()
 {
-	(void)__os_clock(NULL, &start_secs, &start_usecs);
+	struct timeval v;
+
+	gettimeofday(&v, NULL);
+	start_secs = v.tv_sec;
+	start_usecs = v.tv_usec;
 }
 
 void HighResTimer::stop()
 {
 	u_int32_t stop_secs, stop_usecs;
-	(void)__os_clock(NULL, &stop_secs, &stop_usecs);
+	struct timeval v;
+
+	gettimeofday(&v, NULL);
+	stop_secs = v.tv_sec;
+	stop_usecs = v.tv_usec;
 	duration_secs += (stop_secs - start_secs);
 	duration_usecs += (stop_usecs - start_usecs);
 	// fixup for usec under/overflow
--- src/dbxml/QueryContext.cpp	2007-01-12 19:05:49.000000000 +0100
+++ src/dbxml/QueryContext.cpp	2007-10-29 18:19:01.000000000 +0100
@@ -45,12 +45,11 @@
 #include <xqilla/exceptions/QueryTimeoutException.hpp>
 #include <xqilla/exceptions/QueryInterruptedException.hpp>
 
+#include <sys/time.h>
+
 using namespace DbXml;
 using namespace std;
 
-// From DB, used by QueryInterrupt code
-extern "C" int __os_clock(DB_ENV *, u_int32_t *, u_int32_t *);
-
 namespace DbXml {
 /**
    QueryInterrupt is private to QueryContext, used to
@@ -425,7 +424,10 @@
 	qInt_->stop = false;
 	if(qInt_->timeoutValue) {
 		qInt_->timeCount = 0;
-		(void)__os_clock(NULL, &qInt_->timeoutStart, NULL);
+		struct timeval v;
+
+		gettimeofday(&v, NULL);
+		qInt_->timeoutStart = v.tv_sec;
 	}
 }
 
@@ -438,12 +440,13 @@
 			throw QueryInterruptedException(0, 0, 0, 0, 0);
 		}
 		if(qInt_->timeoutValue) {
-			// only call __os_clock() every 100 calls; not
-			// precise, but more efficient
 			if(++(qInt_->timeCount) == 100) {
 				qInt_->timeCount = 0;
 				u_int32_t now;
-				(void)__os_clock(NULL, &now, NULL);
+				struct timeval v;
+
+				gettimeofday(&v, NULL);
+				now = v.tv_sec;
 				if ((now - qInt_->timeoutStart) >
 					qInt_->timeoutValue) {
 					qInt_->timeoutStart = 0;
