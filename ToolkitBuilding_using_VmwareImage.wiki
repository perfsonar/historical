#summary Instructions to build Toolkit iso using VMWare image

= Introduction =
We have put together a vmware image which can be used to build iso images of LiveCD and NetInstall version of the perfSONAR-PS Toolkit. The environment contains all the required software tools and scripts for building the latest release of the Toolkit. It will also enable you to install other tools that you might want to have on the Toolkit or if you are a developer, you can integrate your code into the Toolkit without having to wait for a release. You may submit the iso images to us along with a note on the customizations that you made and we will include it in the repository for others to use.


=Build environment details =
    * *Virtual Machine created with VMWare Fusion Version 3.1.3*
    * *Architecture* - i386
    * *Platform* - CentOS 5
    * *Disk space* - 30GB
    * *Installed software packages* 
    * epel - Extra Packages for Enterprise Linux - Volunteers for Fedora Linux create additional packages that are available through epel.
    * kernel-devel - kernel sources for current kernel.
    * mock - Mock creates chroot build environments. Its used for Fedora and downstream builds.
    * ImageMagick - We use this for converting the splash screen.
    * mkisofs - Used for creating ISO9660 filesystems.
    * squashfs-tools - This is a compressed read only filesystem for Linux. Used to reduce memory/space requirements.
    * livecd-tools - Used for creating live CDs.
    * syslinux - Creates bootloaders.
    * anaconda-runtime - Used to help in creating custom distributions.
    * rpm-build - Used to create binary and source distribution packages.
    * redhat-rpm-config - Creates custom macros used when building rpms. 
    * make - Used to control compiling of source files.
    * m4 - Macro processor for C/C++ source files. Autoconf also uses it.
    * unifdef - Used to manipulate/clean up C/C++ source files.
    * autoconf - Tool to aid compilation on different architectures. It creates a configure script that helps set up the build environment.
    * automake - Automake builds makefiles using the configuration set up by autoconf.
    * gcc-c++ - GNU compiler distribution C/C++.
    * binutils - Contains a linker, assembler and object file utilities and other tools useful for a developer.

    * *Disabled services* - Some unnecessary services that are started by default have been disabled to free resources for building the toolkit.
    *  anacron - Provides cron functionality on machines that may get shut down, so that cron jobs that were skipped will get run.
    *  apmd - Advanced Power Management Subsystem.
    * bluetooth and hdd - For Bluetooth devices.
    * firstboot - This is an installation helper that is not needed after the system has been installed.
    * gpm - Console mouse service, some users my want to re-enable this with the chkconfig command, but having it disabled makes working with a VM a bit easier.
    * mdmonitor - Software RAID monitor.
    * pcsd - Smart card support.
    * rhnsd - This service polls the Red Hat Network for scheduled updates, some users may want to enable this with chkconfig.
    * SELinux - Provides stronger system security. This has also been disabled to ensure build processes have full access to the resources they may need. You can re-enable this by changing the line SELINUX=DISABLED to ENFORCING in /etc/selinux/config.
 

=Instructions to use the VM=
    # Download the VM [http://packrat.internet2.edu/~njacobson/perfsonar/psBuild.vmwarevm.bz2 here]. Make sure you have at least 30GB of disk space in your physical host.
    # After starting the VM, you can login to the console as user psbuild with no password.  This is the only way to access the Virtual Machine.  To enable SSH access, assign the psbuild user a password with the _passwd_ command. The psbuild user can execute superuser commands with the _sudo_ or _su_ commands. The root user is disabled by default. We highly recommend changing all the passwords once you login. (Use _passwd_ command)
    # A copy of the software packages and the scripts is available in the home directory. You can also choose to download them from the svn directly by checking out from svn:_svn_ _co_ _http://anonsvn.internet2.edu/svn/nptoolkit/trunk/_ _nptoolkit_. This will install all the required software scripts and packages under nptoolkit directory.
    # Do an svn update to download the latest version of the software tools and scripts.


==Building the Toolkit==
    # To build the toolkit, just CD to nptoolkit/scripts and run 'build_livecd.sh as root to build the LiveCD and 'build_netinstall.sh to build the netinstall iso. More details on what the scripts do can be found [http://code.google.com/p/perfsonar-ps/wiki/ToolkitBuildingFAQs#Building_The_Toolkit here].


==Customizing the Toolkit==
This section gives you guidelines on how to customize the toolkit. We have covered two main customizations.
    # Adding your software
    # Customizing the toolkit environment 

===Adding your software===
In order to include your software packages or tools, you will have to generate RPMs and have them available in a software repository. You can then include this software repository in the kickstart file which is used by the build scripts to create the iso.
    # Building packages
      This [http://code.google.com/p/perfsonar-ps/wiki/ToolkitBuildingFAQs#Building_Toolkit_Packages_With_mock page] has details on how to build RPMs for the various tools used by the Toolkit. In sum, you have to do the following:
        # A copy of i2_mock wrapper script should be available in the vmware image. Download the  script if it is not available in the vmware from [http://code.google.com/p/perfsonar-ps/wiki/ToolkitBuildingFAQs#i2_mock_utility here].
        # The default holding repository can be found in /srv/holding/centos-5/i386. Each time you add an rpm to it, run _createrepo_ _-d_ _--update_ _/srv/holding/centos-5/i386_ to update the repository. 
          * You can change the holding repository. Instructions to customize it can be found [http://code.google.com/p/perfsonar-ps/wiki/ToolkitDevelopment_MockOverview#create_local_holding_repos_and_add_to_build_environment_configs. here].
        # Create source rpm of the software package you want to include. Details on building source RPMs for the Toolkit can be found [http://code.google.com/p/perfsonar-ps/wiki/ToolkitDevelopment_SourceRPMs here]
        # Use i2_mock to create the rpm
        # You will also have to build other packages that your tool may require. Use the same procedure mentioned above to build the RPMs.

    # Adding yum repo
        # Create a yum repository locally and place all the RPMs that you built in it. Instructions to create local yum repository can be found [http://wiki.centos.org/HowTos/CreateLocalRepos here].
        # Add the yum repo to the kickstart file. Guidelines on how to modify the kickstart file can be found [http://code.google.com/p/perfsonar-ps/wiki/ToolkitBuildingFAQs#Customizing_The_Software_Yum_Repositories here].
    
    # Specify software package to install    
       # Include the software in %packages section of the kickstart file. Some guidelines on how to do it can be found [http://code.google.com/p/perfsonar-ps/wiki/ToolkitBuildingFAQs#Customizing_The_Software_To_Install here].


===Customizing the Toolkit environment===
You can also customize the toolkit system. For example, you can set up tasks like creating certain users, setting permissions for users, groups, etc on the system. Guidelines for this and other customizations can be found [http://code.google.com/p/perfsonar-ps/wiki/ToolkitBuildingFAQs#Customizing_The_Toolkit_System_Environment here].

After making the required changes, build the toolkit using the build scripts using the [http://code.google.com/p/perfsonar-ps/wiki/ToolkitBuilding_using_VmwareImage#Building_the_Toolkit above] mentioned procedure.