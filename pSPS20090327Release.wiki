#summary perfSONAR-PS 3.1 Release

<wiki:toc max_depth="6" />

== Introduction ==

This page outlines details regarding the perfSONAR-PS release that began the week of February 23, 2008 and ended on April 3 2009 in the release of v3.1 of perfSONAR-PS.

== Release Team ==

 * Jason - Lead
 * Aaron
 * Maxim
 * Jeff
 * Brian
 * Joe
 * Guilherme
 * Marcos

== Release Schedule ==

Release Start: Feb 23, 2009

Code Slush: March 6, 2009

Code Freeze: March 23, 2009

RC Phase, Beta Tests: March 27, 2009

Release: April 3, 2009

http://perfsonar-ps.googlecode.com/svn/wiki/pSPS20090327Release/schedule.png

== Services Released and Parties Involved ==

|| *Service* || *Developer* || *Code Reviewer* || *Documentation Reviewer* ||
|| Lookup Service || Jason || Jeff, Macros || Joe,Guilherme ||
|| SNMP Measurement Archive || Jason || Brian || Aaron ||
|| Status Measurement Archive || Aaron || Jason || Maxim ||
|| perfSONAR-BUOY || Jason || Maxim,Guilherme || Brian,Marcos ||
|| PingER || Maxim || Aaron || Jason ||
|| LS Registration Daemon || Aaron || Joe || Jason ||
|| Topology Service || Aaron || Jason || Jeff ||

== Specifics ==

The following outline some exceptions to the overall release process.  Also see [pSPSReleaseManagement] for overall recomendations on this process for the perfSONAR-PS group.

=== Open Bugs Related to This Release ===

 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=19 19] - _*Aaron/Maxim*_ - ~~PingER GUI gLS pingable hosts~~
   * Resolved (original issue addressed)
   * Opened [http://code.google.com/p/perfsonar-ps/issues/detail?id=107 107] to address other concerns (next release)
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=73 73] - _*Jason*_ - ~~Client::LS Registration Logic Re-arrange~~
   * Original issue addressed, but held over for re-design before next release.
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=79 79] - _*Jason*_ - ~~Empty gLS/hLS Messages~~
   * Resloved
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=84 84] - _*Jason*_ - ~~Exit MA service if no data is present ~~   
   * Resolved
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=85 85] - _*Jason*_ - ~~add verbose logging on errors for ma/ls~~
   * Resolved to original spec
   * Opened [http://code.google.com/p/perfsonar-ps/issues/detail?id=108 108] to address other concerns (next release)
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=105 105] - _*Jason*_ - ~~hLS Summarization of DCN Data~~
   * Held over for next release
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=109 109] - _*Jason*_ - ~~gLS Discovery of IP Addresses~~
   * Resolved
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=110 110] - _*Jason*_ - ~~perfSONAR-BUOY Data Query Error~~
   * Resolved 
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=112 112] - _*Jason*_ - ~~supportedEventType Examples for SNMP/pSB~~ 
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=116 116] - _*Jason*_ - ~~Migrate getRRDData to SNMP.pm~~
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=62 62] - _*Maxim*_ - ~~pingER-MA requires 'hostname" type attribute in endPointPair~~
   * Resolved
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=66 66] - _*Maxim*_ - ~~PingER Collection Errors~~
   * Resolved
 * [http://code.google.com/p/perfsonar-ps/issues/detail?id=81 81] - _*Maxim*_ - ~~PingER Resolution of IPaddress/Hostnames~~
   * Resolved 

=== Code Reviews ===

The code _review_ can be a lot more in depth than just reading in suggesting.  Most corrections can be done directly to the code base to save time in the process.  Reviewers are encouraged to run [Perltidy] and [Perlcritic] at the end of the review.  

Things to think about as you review:

 * Perldoc:
   * Is there a footer on each script/module?
     * License info
     * Contact Info
     * Related libraries
     * API use (where applicable)
   * Is there a header on each script/module?
     * Are the names and information correct?
   * Does each method have a function header
     * Does it describe inputs and outputs as well as expected behaviour
 * Library Use - Examine each external library dependency
   * Is it necessary to use the library (e.g. does the use justify including the dependency)
   * Could the library be ommited (provide suggestions how)
 * Code Structure
   * See the [CodeRules rules of the code]
 * Design decisions
   * Question why things are organized/designed they way they are in a constructive fashion.  Developers will be happy to hear the commentary
 * Function/Module Size
   * Make constructive comments regarding excessively large or small modules and functions.  Note that ware trying to make a sound object oriented piece of software.
 * Test Cases
   * Ensure test cases for unit testing are appropriate in both structure and quantity
   * Ensure test cases for test harness are appropriate in both structure and quantity

See the [pSPSReleaseManagement#Code_Review Code Review] section from the other document for more information.  The reviews should be shared with the entire group (use the mailing list).  

=== Documentation Reviews ===

Documentation review is a review of included and posted documentation for errors and omissions.  It may help to physically install the software when following installation instructions, etc.

Thinks to think about as you review:

 * Is the documentation complete:
   * Same in the package as on the web
   * Contains references to legitimate sources. 
   * Does not contain blank sections
   * Addresses all functionality
 * Is it Understandable
 * Free of spelling/grammar errors
 * Up to date versus previous releases
 * Appropriate to the audience that will be the primary reader

=== Testing ===

Developers are responsible for testing their code:

 * Designing and running unit tests
   * Address all modules
   * Address all methods
   * Test methods for multiple inputs (good and bad)
   * Generate supporting materials (databases, etc.)
   * Frequently run these tests after bugfixes and development
 * Designing and running the test harness to simulate black box activity
   * Design and provide numerous messages and expected responses
   * Frequently run these tests after bugfixes and development

== Open Tasks ==

 * Jason
   * Release Tasks
     * Prepare [YumRepository YUM] repo - <font color=yellow>_*IN PROGRESS - 2/17*_</font>
     * Update Release Documentation - <font color=green>_*DONE - 3/9*_</font>
     * Update Issue Tracker - <font color=green>_*DONE - 3/3*_</font>
     * Review Code Reviews - <font color=green>_*DONE - 3/20*_</font>
     * Review Doc Reviews - <font color=red>_*PENDING*_ - </font>
   * Development
     * LS - <font color=green>_*DONE - 3/23*_</font>
     * SNMP - <font color=green>_*DONE - 3/23*_</font>
     * pSB - <font color=purple>_*PUSHED OFF - 3/9*_</font>
   * Documentation
     * LS - <font color=yellow>_*IN PROGRESS - 3/16*_</font>
     * SNMP - <font color=yellow>_*IN PROGRESS - 3/16*_</font>
     * PSB - <font color=purple>_*PUSHED OFF - 3/9*_</font>
   * Code Review
     * Status  - <font color=green>_*DONE - 3/19*_</font>
     * Topology - <font color=green>_*DONE - 3/19*_</font>
     * Shared/lib - <font color=green>_*DONE - 3/19*_</font>
   * Documentation Review
     * PingER - <font color=red>_*PENDING*_- </font>
     * LS Registartion Daemon - <font color=red>_*PENDING*_- </font>
 * Aaron
   * Release Tasks
     * Branch SVN - <font color=green>_*Done - 3/2*_</font>
     * Re-organize and SVN (see [SubversionStructure]) - <font color=green>_*Done - 3/10*_</font>
   * Development
     * Status - <font color=green>_*DONE*_ - 3/23</font>
     * Topology - <font color=green>_*DONE*_ - 3/23</font>
     * LS Registration Daemon - <font color=green>_*DONE*_ - 3/23</font>
   * Documentation
     * Status - <font color=yellow>_*IN PROGRESS*_ - 3/23</font>
     * Topology - <font color=yellow>_*IN PROGRESS*_ - 3/23</font>
     * LS Registration Daemon -<font color=yellow> _*IN PROGRESS*_ - 3/23</font>
   * Code Review
     * PingER - <font color=green>_*DONE - 3/19*_</font>
   * Documentation Review
     * SNMP - <font color=red>_*PENDING*_ - </font>
 * Jeff
   * Release Tasks
     * Contract a new CD image for NPToolkit, dated image [http://perfsonar-ps.googlecode.com/svn/wiki/NPToolkit/perfnodelabel.png here] - <font color=red>_*PENDING*_ - </font>
     * Alert Techwriter/Publication Crew of pending release - <font color=red>_*PENDING*_ - </font>
   * Development
     * pSB - <font color=yellow>_*IN PROGRESS*_ - </font>
   * Documentation
     * pSB - <font color=yellow>_*IN PROGRESS*_ - </font>
   * Code Review
     * LS - <font color=purple>_*PUSHED OFF - 3/19*_</font>
   * Documentation Review
     * Topology -<font color=red> _*PENDING*_ - </font>
 * Maxim
   * Development
     * PingER - <font color=green>_*DONE - 3/13*_</font>
   * Documentation
     * PingER - <font color=green>_*DONE*_ - 3/23</font>
   * Code Review
     * pSB - <font color=purple>_*PUSHED OFF*_ - </font>
   * Documentation Review
     * Status -<font color=red> _*PENDING*_ - </font>
 * Joe
   * Code Review
     * LS Registration Daemon - <font color=green>_*DONE - 3/16*_</font>
   * Documentation Review
     * LS - <font color=red>_*PENDING*_ - </font>
 * Brian
   * Code Review
     * SNMP - <font color=green>_*DONE - 3/16*_</font>
   * Documentation Review
     * pSB - <font color=red>_*PENDING*_ - </font>
 * Guilherme
   * Code Review
     * perfSONAR-BUOY - <font color=green>_*DONE - 3/16*_</font>
   * Documentation Review
     * LS - <font color=red>_*PENDING*_ - </font>
 * Marcos
   * Code Review
     * LS - <font color=green>_*DONE - 3/16*_</font>
   * Documentation Review
     * perfSONAR-BUOY - <font color=red>_*PENDING*_ - </font>
   
== Lessons Learned ==

Lessons learned during the release and review process.  

 * Start and end code reviews earlier
 * Same for doc reviews
 * Testing (unit tests - tests harness) should be ready pre-release
 * Keep your documentation up to date 
      
=== Code Review Reviews ===

This is a _*review of the reviews*_ so we can start to identify weak points in our development process and try to make things easier in the future.  

==== Packaging ====

Developers need to take care when preparing their packages, specifically:

 * _*doc/*_ - Should contain:
   * Changes - Changes (update each time)
   * INSTALL - Installation Instructions
   * LICENSE - should be uniform and up to date
   * README - Other goodies not in INSTALL
 * _*lib/*_ - If you are the only one using an item in Shared/lib, move it to your package. Otherwise symlink
 * _*bin/*_ - Same as lib
 * Keep your spec up to date, including the version and description.
 * Use scripts to automate the process where required (this is what _*scripts/*_ is for)
 * Uniform locations (and names) for:
   * init scripts
   * logging locations
   * persistent file locations (e.g. xmldb, hints file, store file)
 * _*Client/Request Messages*_ - Should be in every package.  Make messages to test the service as well as serve as examples.  Verbosity is encouraged.
 
==== Code Rules ====

We have [CodeRules rules] in place, we need to enforce and add to this list when applicable.  

 * _*Use of perltidy*_ - Should use this *FREQUENTLY*, as in any time code is added.  It takes a moment to do before check-in.
 * _*Use of perlcritic*_ - Should use this *FREQUENTLY* as well, especially before a release (which was not the case everywhere).
 * _*Code Documentation*_ - We are not spending enough time entering and caring about this as a group.  I spent a lot of time re-arranging old documentation to fit the rules of the code, and even more time entering templates so the developers in question could fill the information in.  
   * A change for next time - document inputs and outputs of each function
 * _*Parameters*_ - Right after the prior release of pS-PS we decided to start converting to the method of passing parameters in the rules of the code (validation - named parameters).  So far new code for the most part is following these rules, and some legacy code has been completed but we are far from complete in trying to remove all old methods.  This needs to be a top priority after this release and before the next.  I will be assigning some folks to handle the transition via the issue tracker. 
 * _*It/Unless Structure*_ - Need to be consistent about one liners.  Should use Unless instead of If/not (easier to read and understand)
 * _*Spelling*_ - It does count, and Jason is normally the worst offender
 
==== Design ====

 * _*Architecture (daemon design)*_ - The ability to re-source files (stores, configs) should be done live instead of at start.  This is an outstanding issue for next dev cycle.  
 * _*Architecture (daemon design)*_ - explicit exit of programs with proper codes - needs to be uniform
 * _*Utilities*_ - Need some good framework utilities for:
   * IP verification (structure and liveness)
   * IPV6 (same)
   * Hostnames
   * other common tasks (errors, logging: we need something more formal than current offerings)
 * _*Architecture (functions)*_ - Function length is an issue - should make an effort to subdivide at the functional level very soon.
 * _*Complexity*_ - Some functions do a lot of things (no matter if they are long or short).  We should also make an effort to split functions into single task entities.  
 * _*Config Styles*_ - We use several (e.g. homemade like OWP, standard like Config General, and sometimes homemade and ill-defined).  We need to settle on one, and use common methods of access.
  
==== Functionality ====

 * _*Use of Time*_ - Should standardize when applicable.  For instance specify all in minutes instead of sometimes in seconds, minutes, hours, days, etc.  Failing this *label* very well. 
 * _*Logging*_ - We need to define some rules of when to use each level of logging and where it is appropriate in the code (e.g. avoid double logging and under logging)
 * _*Error Logging*_ - Use of Netlogger when applicable.  Also want to start including more context when available (e.g. SNMP MA should throw errors locally about specific RRD files it has a problem with, but not over the WS message. bwctl should mention the peer address when errors with that connection happen. etc...) 
 * _*Unit Tests*_ - Time was short so not a lot was done on this front, a major portion of the next release should be devoted to testing and profiling.
 * _*Error Status*_ - How do we want to return error status? return codes, exception handling? We should harmonize as much as possible.

=== Documentation Review Reviews ===
   
_*PENDING*_   
      
== Last Updated ==

$Id$
