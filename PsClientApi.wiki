#summary perfSONAR client API

= Introduction =

== Coordination ==

Telecons occur roughly every two weeks on Monday at 5:00pm EDT.

 * Dial-in numbers:
   * +1-734-615-7474 (Please use if you do not pay for Long Distance)
   * +1-866-411-0013 (toll free US/Canada Only)
 * Access code:	0125784

*Next call*: [http://code.google.com/p/perfsonar-ps/wiki/20100802APICall 02 August 2010]

Notes from previous calls:
 * [http://code.google.com/p/perfsonar-ps/wiki/20100607APICall 07 June 2010]
 * [http://code.google.com/p/perfsonar-ps/wiki/20100614APICall 14 June 2010]

== Goals ==

A standard, straightforward client API specification would be useful to users of perfSONAR. It could be implemented in a variety of languages.

See also the [PsClientApiUseCases detailed use-cases].

== Languages ==

It is assumed that the language in question has a standard way of representing, and iterating over, lists of items. 

Initial target languages are:
 * Python
 * PERL
 * Java
 * UNIX command-line tool

== Formatting conventions ==

  * Input parameters use this format: (`Type`) _param-name_ {default-value}: Description.
  * Attributes drop the default value: (`Type`) _attribute-name_: Description

= Specification = 

== Operations ==

create_client
  * Description: Construct and initialize a new client.
  * In:
    * (string) gls_hints_file {""}: Use gLS root hints file, if given; default is 'http://www.perfsonar.net/gls.root.hints'
    * (list of URL) gls_urls {empty list}:  list of gLS servers 
    * (list of URL) hls_urls {empty list}: list of hLS servers
    * (list of URL) service_urls {empty list}: list of services to query without consulting LS infrastructure
  * Out: 
    * `Client`

get_data
  * Description: Specify data to be fetched
  * In: 
    * (`Client`) client {required}: Client instance from create_client()
    * (URL) datatype {required}: Name of characteristic or tool. The API should enumerate some commonly used types.
    * (`Subject`) subject {required}:  Subject, in the perfsonar sense, of the data
    * (`Parameters`) parameters {null}: Additional metadata parameters
    * (`TimeRange`) timerange {null}: If non-empty, a time range filter
  * Out: 
    * list of `DataSet` 

== Data types ==

The data types are listed alphabetically.

Client
  * Description: Opaque handle for client operations
  * Attributes: None
 
Data
  * Description: Summarized or "raw" measurement or other result values.
  * Attributes:
    * (`TimeRange`) time_range:  Time range of the data. 
    * (URL) summtype: If non-empty, the type of summarization as a URL in a namespace. The API should define an enumeration of common types.
    * (list of string) header: If non-empty, the name associated with each value in the tuples of `values`. If empty, each tuple in values should be of length one (1).
    * (list of tuples) values: One or more tuples, each the same length as the `header`, containing associated (data) values.
    * (`Parameters`) parameters: Parameters such as units, bucket_width, or sampling_frequency, that apply to the values

!DataSet
  * Description: One or more Data items, and associated metadata (subject and parameters), if different from the containing `DataSet` metadata.
  * Attributes:
    * (URL) service_url: The URL from which the data is being retrieved
    * (URL) datatype: Name of characteristic or tool assoc. with data
    * (`Subject`) subject: Subject for this set of data
    * (`Parameters`) parameters: Parameters that apply to all data in this set.
    * (list of `Data`) data: Data for this set

!EndpointPair
  * Description: Subclass of !NetworkElements for 2 endpoint pairs
  * Attributes:
    * (string) source
    * (string) destination

Interface
  * Description: subclass of !NetworkElements for host interfaces
  * Attributes:
    * (string) host
    * (string) host_address
    * (string) interface_name
    * (string) interface_address

!NetworkElements
  * Description: Abstract Topology schema element.
  * Subclasses: !EndpointPair, Interface

Parameters
  * Description: Generic name=value hash or array

Subject
  * Description: Abstract perfSONAR Subject
  * Subclasses: !NetworkElements

!TimeRange
  * Description: Start and/or end time
  * Attributes:
    * (time) start_time: Time value, if empty then "beginning of time"
    * (time) end_time: Time value, if empty then "end of time"

= Examples =

These examples show how the API might look in various target languages.

== Fetch one throughput measurement between hostA and hostB ==

*Python*
{{{
import psapi

# connect
client = psapi.create_client() # use default roots

# create endpoint obj.
endpoints = psapi.EndpointPair(source='hostA', dest='hostB')

# get data for endpoints
result = client.get_data(subject=endpoints, datatype=psapi.THROUGHPUT)

# print the data values from each measurement set as
# comma-separated values, without further interpretation
for data_set in result:
  print("Service: " + data_set.service_url)
  print("Subject: " + data_set.subject)
  print("Params : " + data_set.parameters)
  for d in data_set.data:
     print(','.join(d.header)) # print header items separated by a comma
     for value in d.values:
         print(','.join(value)) # print value tuple items sep. by a comma
}}} 

*Command-line interface*
{{{
# connection and fetching data are merged
$ ps-get-data \
  --source=hostA \
  --dest=hostB \
  --datatype=throughput \
  --start='-1 day' \
  --end=now
# output; completely fabricated:
Service: http://nersc-pt1.es.net:8085/perfSONAR_PS/services/pSB
Subject: endpoint_pair: (source=hostA, destination=hostB)
Parameters: ()
Results: (units = 'Mb/s')
Start time           End time              Value
2010-06-10T00:00:00  2010-06-10T07:09:32   843.7
}}}
