A Measurement Point (MP) is a service defined in perfSONAR that allows for user to request a particular test and have it executed on-demand. An MP is different from other perfSONAR services in that a test can take much longer to execute than a data query (such as those supported by a Measurement Archive). For example, you may have a bwctl session run for serveral minutes, and during that time you do not necessarily want the client to block while waiting for results. Instead this document describes a "polling" model. In this model a client submits a request for a test, immediately gets a response containing a key, and then retrieves the results by polling the MP using that key.

= Requesting a Measurement =
== Overview ==
A sequence diagram and detailed description are provided below:

http://esnet-perfsonar.googlecode.com/svn/wiki/MP_Protocol/mp-polling-seq.png

 # The client sends a _SetupDataRequest_ message to the Measurement Point (MP) with the parameters of the test to execute.
 # The MP generates a key and schedules the test. The MP returns the key to the requester in the _SetupDataResponse_.
 # The client will poll to see if any results are available using a SetupDataRequest with the key as the subject.
 # If the MP has not yet completed the test it should indicate that no results are available. When the result becomes available then it should return it to the client. Likewise if an error occurs that prevents the test from running, then that should be returned to the user all well.
 # Repeat steps 3 and 4 until the test results or an error are returned to the client. 

== Messages ==

=== 1. Client Initial SetupDataRequest ===
{{{
<?xml version="1.0" encoding="UTF-8"?>

<nmwg:message type="SetupDataRequest"
                   id="datarq2-1"
                   xmlns="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/"
                   xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/"
                   xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                   xmlns:nmtm="http://ggf.org/ns/nmwg/time/2.0/"
                   xmlns:select="http://ggf.org/ns/nmwg/ops/select/2.0/"
                   xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">

  <nmwg:metadata id="meta1">
    <perfsonar:subject id="subj1">
      <nmwgt:endPointPair>
        <nmwgt:src type="hostname" value="fnal-pt1.es.net"/>
        <nmwgt:dst type="hostname" value="clev-pt1.es.net"/>
      </nmwgt:endPointPair>
    </perfsonar:subject>

    <nmwg:eventType>http://ggf.org/ns/nmwg/tools/bwctl/2.0</nmwg:eventType>
    <nmwg:parameters id="param1">
      <nmwg:parameter name="duration" value="10"/>
      <nmwg:parameter name="interval" value="1"/>
    </nmwg:parameters>
  </nmwg:metadata>

  <!-- triggers to indicate head of chains -->
  <nmwg:data id="1" metadataIdRef="meta1"/>


</nmwg:message>
}}}
=== 2.  MP SetupDataResponse with Key ===
{{{
<?xml version="1.0" encoding="UTF-8"?>
<nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" messageIdRef="setupDataResponse1" id="message.3784156" type="SetupDataResponse">

  <nmwg:metadata id="meta1">
    <perfsonar:subject id="subj1">
      <nmwgt:endPointPair>
        <nmwgt:src type="hostname" value="fnal-pt1.es.net"/>
        <nmwgt:dst type="hostname" value="clev-pt1.es.net"/>
      </nmwgt:endPointPair>
    </perfsonar:subject>

    <nmwg:eventType>http://ggf.org/ns/nmwg/tools/bwctl/2.0</nmwg:eventType>
    <nmwg:parameters id="param1">
      <nmwg:parameter name="duration" value="10"/>
      <nmwg:parameter name="interval" value="1"/>
    </nmwg:parameters>
  </nmwg:metadata>
  <nmwg:data metadataIdRef="meta1" id="data1">
    <nmwg:key>
      <nmwg:parameters id="params.0">
        <nmwg:parameter name="mpKey">6ed3620ea64060bc8be5ded244b97fa9</nmwg:parameter>
      </nmwg:parameters>
    </nmwg:key>
  </nmwg:data>
  
</nmwg:message>
}}}

=== 3. Client SetupDataRequest Polling for Results ===
{{{
<?xml version="1.0" encoding="UTF-8"?>
<nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" messageIdRef="setupDataRequest1" id="message.3784156" type="SetupDataRequest">

  <nmwg:metadata id="meta1">
    <perfsonar:subject id="subj1">
       <nmwg:key>
          <nmwg:parameters id="params.0">
            <nmwg:parameter name="mpKey">6ed3620ea64060bc8be5ded244b97fa9</nmwg:parameter>
          </nmwg:parameters>
      </nmwg:key>
    </perfsonar:subject>

    <nmwg:eventType>http://ggf.org/ns/nmwg/tools/bwctl/2.0</nmwg:eventType>
    
    <nmwg:parameters id="param1" />
    
  </nmwg:metadata>

  <nmwg:data metadataIdRef="meta1" id="data1" />
  
</nmwg:message>
}}}

=== 4a. MP SetupDataResponse - Test not yet completed ===
{{{
<?xml version="1.0" encoding="UTF-8"?>
<nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" messageIdRef="setupDataResponse1" id="message.3784156" type="SetupDataResponse">
    
    <nmwg:metadata id="meta1">
        <perfsonar:subject id="subj1">
           <nmwg:key>
              <nmwg:parameters id="params.0">
                <nmwg:parameter name="mpKey">6ed3620ea64060bc8be5ded244b97fa9</nmwg:parameter>
              </nmwg:parameters>
          </nmwg:key>
        </perfsonar:subject>
        
        <nmwg:eventType>http://ggf.org/ns/nmwg/tools/bwctl/2.0</nmwg:eventType>
    
        <nmwg:parameters id="param1" />
    </nmwg:metadata>
    
    <nmwg:metadata id="meta2" metadataIdRef="meta1" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
        <nmwg:eventType>mp.no_data</nmwg:eventType>
    </nmwg:metadata>
    
    <nmwg:data id="data1" metadataIdRef="meta2" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
        <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/">
            Test has not yet run
        </nmwgr:datum>
    </nmwg:data>
    
</nmwg:message>
}}}

=== 4b. MP SetupDataResponse - Test results ===
{{{
<nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" messageIdRef="datarq2-1" id="message.16285726" type="SetupDataResponse">
    
    <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="meta1">
        <bwctl:subject xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/">
            <nmwg:key>
                <nmwg:parameters id="params.0">
                    <nmwg:parameter name="maKey">6ed3620ea64060bc8be5ded244b97fa9</nmwg:parameter>
                </nmwg:parameters>
            </nmwg:key>
        </bwctl:subject>
    </nmwg:metadata>
    
    <nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" metadataIdRef="meta1">
        <bwctl:datum xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/" timeType="unix" timeValue="1302105294" interval="0.0- 1.0" numBytes="0.00" numBytesUnits="Bytes" value="0.00" valueUnits="bits/sec"/>
        <bwctl:datum xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/" timeType="unix" timeValue="1302105294" interval="1.0- 2.0" numBytes="0.00" numBytesUnits="Bytes" value="0.00" valueUnits="bits/sec"/>
        <bwctl:datum xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/" timeType="unix" timeValue="1302105294" interval="2.0- 3.0" numBytes="0.00" numBytesUnits="Bytes" value="0.00" valueUnits="bits/sec"/>
        <bwctl:datum xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/" timeType="unix" timeValue="1302105294" interval="3.0- 4.0" numBytes="0.00" numBytesUnits="Bytes" value="0.00" valueUnits="bits/sec"/>
        <bwctl:datum xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/" timeType="unix" timeValue="1302105294" interval="4.0- 5.0" numBytes="0.00" numBytesUnits="Bytes" value="0.00" valueUnits="bits/sec"/>
        <bwctl:datum xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/" timeType="unix" timeValue="1302105294" interval="5.0- 6.0" numBytes="0.00" numBytesUnits="Bytes" value="0.00" valueUnits="bits/sec"/>
        <bwctl:datum xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/" timeType="unix" timeValue="1302105294" interval="6.0- 7.0" numBytes="0.00" numBytesUnits="Bytes" value="0.00" valueUnits="bits/sec"/>
        <bwctl:datum xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/" timeType="unix" timeValue="1302105294" interval="7.0- 8.0" numBytes="0.00" numBytesUnits="Bytes" value="0.00" valueUnits="bits/sec"/>
        <bwctl:datum xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/" timeType="unix" timeValue="1302105294" interval="8.0- 9.0" numBytes="0.00" numBytesUnits="Bytes" value="0.00" valueUnits="bits/sec"/>
        <bwctl:datum xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/" timeType="unix" timeValue="1302105294" interval="9.0-10.0" numBytes="0.00" numBytesUnits="Bytes" value="0.00" valueUnits="bits/sec"/>
        <bwctl:datum xmlns:bwctl="http://ggf.org/ns/nmwg/tools/bwctl/2.0/" timeType="unix" timeValue="1302105294" interval="0.0-10.0" numBytes="3017613312" numBytesUnits="Bytes" value="2413955709" valueUnits="bits/sec"/>
    </nmwg:data>
</nmwg:message> 
}}}

=== 4c. MP SetupDataResponse - Error ===
{{{
<?xml version="1.0" encoding="UTF-8"?>
<nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" messageIdRef="setupDataResponse1" id="message.3784156" type="SetupDataResponse">
    
    <nmwg:metadata id="meta1">
        <perfsonar:subject id="subj1">
           <nmwg:key>
              <nmwg:parameters id="params.0">
                <nmwg:parameter name="mpKey">6ed3620ea64060bc8be5ded244b97fa9</nmwg:parameter>
              </nmwg:parameters>
          </nmwg:key>
        </perfsonar:subject>
        
        <nmwg:eventType>http://ggf.org/ns/nmwg/tools/bwctl/2.0</nmwg:eventType>
    
        <nmwg:parameters id="param1" />
    </nmwg:metadata>
    
    <nmwg:metadata id="meta2" metadataIdRef="meta1" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
        <nmwg:eventType>error.mp.test_failed</nmwg:eventType>
    </nmwg:metadata>
    
    <nmwg:data id="data1" metadataIdRef="meta2" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
        <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/">
            Unable to run test because could not connect to clev-pt1 control port XXXX
        </nmwgr:datum>
    </nmwg:data>
    
</nmwg:message>
}}}

= Archiving the Result =
The Measurement Point (MP) can only be expected to save the result for a finite amount of time. For maintaining historical data the result of a measurement should be registered with a Measurement Archive (MA). Two possibilities for registering data with an MA are provided below: one where the client registers the result and one where the MP registers the result. It is also possible that both could be supported simultaneously, but they are discussed separately below for the sake of clarity.  

== Client Registration ==
This model is described in the diagram below:

http://esnet-perfsonar.googlecode.com/svn/wiki/MP_Protocol/archive-client-register.png

The diagram shows the client requesting the test result. When it receives a result it will register it with the measurement archive. It is assumed that the MP will only register a result when it gets data and it will not register an error if the test failed to run. This could be added to the model in the future if it were decided that this was desirable, but this document assumes the current practice of only registering when data is returned. This model has a few advantages:
 # Authentication and Authorization should be easier because the client is directly interacting with the measurement archive and thus not reliant on "transitive trust". 
 # The client has control over where the result is archived.
 # The MP is slightly simpler in that it doesn't have to communicate with an MA and is solely focused on scheduling and executing tests. 

The main disadvantage of this method is that the MP does not have a way to ensure all its results are archived. It also adds an extra step for the client to execute in order to register with the MA, though this step could be integrated into existing client libraries in such a manner that this is of minimal obtrusiveness to the client. 


== MP Registration ==
In this model the MP is responsible for registering the result with the Measurement Archive. A diagram describing this is shown below:

http://esnet-perfsonar.googlecode.com/svn/wiki/MP_Protocol/archive-mp-register.png

The MP may decide which MA(s) to register with in one or both of the following manners:
 # Register with a default MA specified by the MP administrator in a config file
 # Register with a client provided MA specified in the parameters section of the initial request. 

If default MP is specified, then an MP can ensure its results are archived. It also may take some of the burden off the client by registering data with the MA (though this may not be a very large burden for either side). The main disadvantage is that trust issues become more complicated. The MA must trust the MP to register data that was initiated by a third-party which the MA may not have had any direct interaction. Likewise, if the client can specify one or more MAs with which to register, then the MP will need to be trusted by whatever MA the user specifies in order to succeed. 