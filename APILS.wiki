= Lookup Service (LS) API ==

 * [APILS#Introduction Introduction]
 * [APILS#Availability Availability]
 * [APILS#Functions Functions]
   * [APILS#new new]
   * [APILS#setInstance setInstance]
   * [APILS#registerRequestLS registerRequestLS]
   * [APILS#registerUpdateRequestLS registerUpdateRequestLS]
   * [APILS#registerClobberRequestLS registerClobberRequestLS]
   * [APILS#deregisterRequestLS deregisterRequestLS]
   * [APILS#keepaliveRequestLS keepaliveRequestLS]
   * [APILS#keyRequestLS keyRequestLS]
   * [APILS#queryRequestLS queryRequestLS]
 * [APILS#Example_Use Example Use]
 
== Introduction ==

The LS API was designed to do the heavy lifting with regards to interacting with the Lookup Service (specifically the _hLS_, or _*Home*_ Lookup Service.  There are several messages that this service, and in turn the API, supports:

 * _*LSRegisterRequest*_ - Allows a service to register itself, and internal content, with an LS.
 * _*LSDeregisterRequest*_ - Allows a service to delete itself or selected content from an LS.
 * _*LSKeyRequest*_ - Allows a service to request the _*key*_ that is used internally for registration.
 * _*LSKeepaliveRequest*_ - Allows a service to _*refresh*_ registration information.
 * _*LSQueryRequest*_ - Allows for queries, written in XQuery, to be performed.   

== Availability ==

This API is available in perfSONAR-PS releases, and can be included as such:

{{{
use perfSONAR_PS::Client::LS;
}}}

== Functions ==

The following may be used from this library.  Please see the perldoc internal to the library for a complete listing of functionality.

=== new ===

This function will invoke a new object.  It has only one optional parameter:

 * _*LS Instance*_ - URI of LS instance to interact with.  

The object itself is returned on exit.  Example of use:

{{{
my $ls = new perfSONAR_PS::Client::LS( { instance => "http://localhost:8080/perfSONAR_PS/services/LS"} );
}}}

=== setInstance ===

Sets (or re-sets) the URI of an LS for an already created object.  This can be used instead of setting in [APILS#new new].  One variable is required:

 * _*LS Instance*_ - URI of LS instance to interact with.

Example use:

{{{
my $ls = new perfSONAR_PS::Client::LS();
$ls->setInstance( { instance => "http://localhost:8080/perfSONAR_PS/services/LS"} );
}}}

=== registerRequestLS ===

The use case for this particular function is registering the existence of a service, for the first time, as well as associated data.  This function has several potential inputs:

 * _*service*_ - A hash object containing service information. This may be used instead of raw XML.
    {{{
    my %service = (
        serviceName => "Internet2 SNMP MA",
        serviceType => "MA",
        serviceDescription => "Testing SNMP MA",
        accessPoint => "http://localhost:8080/perfSONAR_PS/services/snmpMA"
    );
    }}}
    
 * _*serviceXML*_ - Raw XML containing service information, this may be used instead of a hash object.
    {{{
    my $service = "<perfsonar:subject id=\"commonParameters4\" xmlns:perfsonar=\"http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/\">\n";
    $service .="  <psservice:service id=\"serviceParameters4\" xmlns:psservice=\"http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/\">\n";
    $service .="    <psservice:serviceName>My_test_MA3</psservice:serviceName>\n";
    $service .="    <psservice:accessPoint>http://localhost:8082/axis/services/snmpMA</psservice:accessPoint>\n";
    $service .="    <psservice:serviceType>MA</psservice:serviceType>\n";
    $service .="    <psservice:serviceDescription>This is my testing MA3</psservice:serviceDescription>\n";
    $service .="  </psservice:service>\n";
    $service .="</perfsonar:subject>\n";
    }}}
    
 * _*eventType*_ - An eventType for registration.  This element is optional, and if so the first choice is assumed (e.g. _*standard*_ registration).  The options are:
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/registration/service/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/registration/summary/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/registration/synchronization/2.0

 * _*data*_ - An array object containing XML data:
    {{{
    my @rdata = ();
    $rdata[0] .= "    <nmwg:metadata id=\"meta\">\n";
    $rdata[0] .= "      <netutil:subject id=\"subj\" xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\">\n";
    $rdata[0] .= "        <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $rdata[0] .= "          <nmwgt:hostName>localhost</nmwgt:hostName>\n";
    $rdata[0] .= "          <nmwgt:ifName>eth0</nmwgt:ifName>\n";
    $rdata[0] .= "          <nmwgt:ifAddress type=\"ipv4\">127.0.0.1</nmwgt:ifAddress>\n";
    $rdata[0] .= "          <nmwgt:direction>in</nmwgt:direction>\n";
    $rdata[0] .= "        </nmwgt:interface>\n";
    $rdata[0] .= "      </netutil:subject>\n";
    $rdata[0] .= "      <nmwg:eventType>http://ggf.org/ns/nmwg/characteristic/utilization/2.0</nmwg:eventType>\n";
    $rdata[0] .= "    </nmwg:metadata>\n";
    }}}

The returned value from this function is a structured result that contains:

 * _*eventType*_ - The returned _*status*_ of the operation, see the LS service documentation for exact values, but in practice using a regex to search for _*success*_ or _*failure*_ works well. 
 * _*response*_ - The readable response from the service, normally gives more insight than the eventType code.  
 * _*key*_ - The returned _*key*_ that can be used to identify the service, this should be remembered.   
 
Some examples on how to call this function:

{{{
my $ls = new perfSONAR_PS::Client::LS( { instance => "http://localhost:8080/perfSONAR_PS/services/LS"} );

my %service = (
    serviceName => "Internet2 SNMP MA",
    serviceType => "MA",
    serviceDescription => "Testing SNMP MA",
    accessPoint => "http://localhost:8080/perfSONAR_PS/services/snmpMA"
);

my @rdata = ();
$rdata[0] .= "    <nmwg:metadata id=\"meta\">\n";
$rdata[0] .= "      <netutil:subject id=\"subj\" xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\">\n";
$rdata[0] .= "        <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
$rdata[0] .= "          <nmwgt:hostName>localhost</nmwgt:hostName>\n";
$rdata[0] .= "          <nmwgt:ifName>eth0</nmwgt:ifName>\n";
$rdata[0] .= "          <nmwgt:ifAddress type=\"ipv4\">127.0.0.1</nmwgt:ifAddress>\n";
$rdata[0] .= "          <nmwgt:direction>in</nmwgt:direction>\n";
$rdata[0] .= "        </nmwgt:interface>\n";
$rdata[0] .= "      </netutil:subject>\n";
$rdata[0] .= "      <nmwg:eventType>http://ggf.org/ns/nmwg/characteristic/utilization/2.0</nmwg:eventType>\n";
$rdata[0] .= "    </nmwg:metadata>\n";

my $result = $ls->registerRequestLS( { service => \%service, data => \@rdata } );
if ( $result->{eventType} eq "success.ls.register" ) {
    print "Registration success.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} . "\nKey:\t" . $result->{key} , "\n";
}
else {
    print "Failed to register.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} , "\n";
}
}}}

=== registerUpdateRequestLS ===

This function is similar in spirit to [APILS#registerRequestLS registerRequestLS], but should be used to add additional information to an existing registration.  This nuance is controlled by the LS issued _*key*_ that identifies existing services.  .  This function has several potential inputs

 * _*key*_ - A required string used to identify the registered service with an LS.  The LS will pass back a value similar to this upon registration, this method only requires the actual value (no surrounding XML):
   {{{
    <nmwg:key>
      <nmwg:parameters id="keys3">
        <nmwg:parameter name="lsKey">5cfb07ea7a5b840ce4f8f48b842ac9c0</nmwg:parameter>
      </nmwg:parameters>
    </nmwg:key>
   }}}
    
 * _*eventType*_ - An eventType for registration.  This element is optional, and if so the first choice is assumed (e.g. _*standard*_ registration).  The options are:
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/registration/service/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/registration/summary/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/registration/synchronization/2.0

 * _*data*_ - A required array object containing XML data:
    {{{
    my @rdata = ();
    $rdata[0] .= "    <nmwg:metadata id=\"meta\">\n";
    $rdata[0] .= "      <netutil:subject id=\"subj\" xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\">\n";
    $rdata[0] .= "        <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $rdata[0] .= "          <nmwgt:hostName>localhost</nmwgt:hostName>\n";
    $rdata[0] .= "          <nmwgt:ifName>eth0</nmwgt:ifName>\n";
    $rdata[0] .= "          <nmwgt:ifAddress type=\"ipv4\">127.0.0.1</nmwgt:ifAddress>\n";
    $rdata[0] .= "          <nmwgt:direction>in</nmwgt:direction>\n";
    $rdata[0] .= "        </nmwgt:interface>\n";
    $rdata[0] .= "      </netutil:subject>\n";
    $rdata[0] .= "      <nmwg:eventType>http://ggf.org/ns/nmwg/characteristic/utilization/2.0</nmwg:eventType>\n";
    $rdata[0] .= "    </nmwg:metadata>\n";
    }}}

The returned value from this function is a structured result that contains:

 * _*eventType*_ - The returned _*status*_ of the operation, see the LS service documentation for exact values, but in practice using a regex to search for _*success*_ or _*failure*_ works well. 
 * _*response*_ - The readable response from the service, normally gives more insight than the eventType code.  
 * _*key*_ - The returned _*key*_ that can be used to identify the service, this should be remembered.   
  
Some examples on how to call this function:

{{{
my $ls = new perfSONAR_PS::Client::LS( { instance => "http://localhost:8080/perfSONAR_PS/services/LS"} );

my @rdata = ();
$rdata[0] .= "    <nmwg:metadata id=\"meta\">\n";
$rdata[0] .= "      <netutil:subject id=\"subj\" xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\">\n";
$rdata[0] .= "        <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
$rdata[0] .= "          <nmwgt:hostName>localhost</nmwgt:hostName>\n";
$rdata[0] .= "          <nmwgt:ifName>eth0</nmwgt:ifName>\n";
$rdata[0] .= "          <nmwgt:ifAddress type=\"ipv4\">127.0.0.1</nmwgt:ifAddress>\n";
$rdata[0] .= "          <nmwgt:direction>in</nmwgt:direction>\n";
$rdata[0] .= "        </nmwgt:interface>\n";
$rdata[0] .= "      </netutil:subject>\n";
$rdata[0] .= "      <nmwg:eventType>http://ggf.org/ns/nmwg/characteristic/utilization/2.0</nmwg:eventType>\n";
$rdata[0] .= "    </nmwg:metadata>\n";

my $result = $ls->registerUpdateRequestLS( { key => $key, data => \@rdata } );
if ( $result->{eventType} eq "success.ls.register" ) {
    print "Registration Update success.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} . "\nKey:\t" . $result->{key} , "\n";
}
else {
    print "Failed to register update.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} , "\n";
}
}}}

=== registerClobberRequestLS ===

Like the previous two calls this function performs a registration task.  The specific purpose of this function is to _*clobber*_, or delete all knowledge of some service including data, and then start over again.  This function requires some specific inputs to work properly:

 * _*key*_ - A required string used to identify the registered service with an LS.  The LS will pass back a value similar to this upon registration, this method only requires the actual value (no surrounding XML):
   {{{
    <nmwg:key>
      <nmwg:parameters id="keys3">
        <nmwg:parameter name="lsKey">5cfb07ea7a5b840ce4f8f48b842ac9c0</nmwg:parameter>
      </nmwg:parameters>
    </nmwg:key>
   }}}
   
 * _*service*_ - A hash object containing service information. This may be used instead of raw XML.
    {{{
    my %service = (
        serviceName => "Internet2 SNMP MA",
        serviceType => "MA",
        serviceDescription => "Testing SNMP MA",
        accessPoint => "http://localhost:8080/perfSONAR_PS/services/snmpMA"
    );
    }}}
    
 * _*serviceXML*_ - Raw XML containing service information, this may be used instead of a hash object.
    {{{
    my $service = "<perfsonar:subject id=\"commonParameters4\" xmlns:perfsonar=\"http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/\">\n";
    $service .="  <psservice:service id=\"serviceParameters4\" xmlns:psservice=\"http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/\">\n";
    $service .="    <psservice:serviceName>My_test_MA3</psservice:serviceName>\n";
    $service .="    <psservice:accessPoint>http://localhost:8082/axis/services/snmpMA</psservice:accessPoint>\n";
    $service .="    <psservice:serviceType>MA</psservice:serviceType>\n";
    $service .="    <psservice:serviceDescription>This is my testing MA3</psservice:serviceDescription>\n";
    $service .="  </psservice:service>\n";
    $service .="</perfsonar:subject>\n";
    }}}
    
 * _*eventType*_ - An eventType for registration.  This element is optional, and if so the first choice is assumed (e.g. _*standard*_ registration).  The options are:
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/registration/service/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/registration/summary/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/registration/synchronization/2.0

 * _*data*_ - An array object containing XML data:
    {{{
    my @rdata = ();
    $rdata[0] .= "    <nmwg:metadata id=\"meta\">\n";
    $rdata[0] .= "      <netutil:subject id=\"subj\" xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\">\n";
    $rdata[0] .= "        <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $rdata[0] .= "          <nmwgt:hostName>localhost</nmwgt:hostName>\n";
    $rdata[0] .= "          <nmwgt:ifName>eth0</nmwgt:ifName>\n";
    $rdata[0] .= "          <nmwgt:ifAddress type=\"ipv4\">127.0.0.1</nmwgt:ifAddress>\n";
    $rdata[0] .= "          <nmwgt:direction>in</nmwgt:direction>\n";
    $rdata[0] .= "        </nmwgt:interface>\n";
    $rdata[0] .= "      </netutil:subject>\n";
    $rdata[0] .= "      <nmwg:eventType>http://ggf.org/ns/nmwg/characteristic/utilization/2.0</nmwg:eventType>\n";
    $rdata[0] .= "    </nmwg:metadata>\n";
    }}}

The returned value from this function is a structured result that contains:

 * _*eventType*_ - The returned _*status*_ of the operation, see the LS service documentation for exact values, but in practice using a regex to search for _*success*_ or _*failure*_ works well. 
 * _*response*_ - The readable response from the service, normally gives more insight than the eventType code.  
 * _*key*_ - The returned _*key*_ that can be used to identify the service, this should be remembered.    
 
Some examples on how to call this function:

{{{
my $ls = new perfSONAR_PS::Client::LS( { instance => "http://localhost:8080/perfSONAR_PS/services/LS"} );

my %service = (
    serviceName => "Internet2 SNMP MA",
    serviceType => "MA",
    serviceDescription => "Testing SNMP MA",
    accessPoint => "http://localhost:8080/perfSONAR_PS/services/snmpMA"
);

my @rdata = ();
$rdata[0] .= "    <nmwg:metadata id=\"meta\">\n";
$rdata[0] .= "      <netutil:subject id=\"subj\" xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\">\n";
$rdata[0] .= "        <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
$rdata[0] .= "          <nmwgt:hostName>localhost</nmwgt:hostName>\n";
$rdata[0] .= "          <nmwgt:ifName>eth0</nmwgt:ifName>\n";
$rdata[0] .= "          <nmwgt:ifAddress type=\"ipv4\">127.0.0.1</nmwgt:ifAddress>\n";
$rdata[0] .= "          <nmwgt:direction>in</nmwgt:direction>\n";
$rdata[0] .= "        </nmwgt:interface>\n";
$rdata[0] .= "      </netutil:subject>\n";
$rdata[0] .= "      <nmwg:eventType>http://ggf.org/ns/nmwg/characteristic/utilization/2.0</nmwg:eventType>\n";
$rdata[0] .= "    </nmwg:metadata>\n";

my $result = $ls->registerRequestLS( { service => \%service, data => \@rdata } );
if ( $result->{eventType} eq "success.ls.register" ) {
    print "Registration success.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} . "\nKey:\t" . $result->{key} , "\n";
    my $key = $result->{key};
    %service = (
        serviceName => "Internet2 SNMP MA #2",
        serviceType => "MA",
        serviceDescription => "Testing SNMP MA #2",
        accessPoint => "http://localhost:8080/perfSONAR_PS/services/snmpMA2"
    );
    $result = $ls->registerClobberRequestLS( { service => \%service, key => $key, data => \@rdata } );
    if ( $result->{eventType} eq "success.ls.register" ) {
        my $key = $result->{key};
        print "Success, and here is the new key: \"" . $key . "\"\n";
        print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} . "\nKey:\t" . $result->{key} , "\n";
    }
    else {
        print "That may have not worked as planned...\n";
        print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} , "\n";
    }
}
else {
    print "Failed to register.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} , "\n";
}
}}}

=== deregisterRequestLS ===

This call should be used to remove portions of service registered data, or the entire service.    This function requires some specific inputs to work properly:

 * _*key*_ - A required string used to identify the registered service with an LS.  The LS will pass back a value similar to this upon registration, this method only requires the actual value (no surrounding XML):
   {{{
    <nmwg:key>
      <nmwg:parameters id="keys3">
        <nmwg:parameter name="lsKey">5cfb07ea7a5b840ce4f8f48b842ac9c0</nmwg:parameter>
      </nmwg:parameters>
    </nmwg:key>
   }}}
    
 * _*eventType*_ - An eventType for deregistration.  This element is optional, and if so the first choice is assumed (e.g. _*standard*_ deregistration).  The options are:
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/deregistration/service/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/deregistration/summary/2.0

 * _*data*_ - An optional array object containing XML data:
    {{{
    my @rdata = ();
    $rdata[0] .= "    <nmwg:metadata id=\"meta\">\n";
    $rdata[0] .= "      <netutil:subject id=\"subj\" xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\">\n";
    $rdata[0] .= "        <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $rdata[0] .= "          <nmwgt:hostName>localhost</nmwgt:hostName>\n";
    $rdata[0] .= "          <nmwgt:ifName>eth0</nmwgt:ifName>\n";
    $rdata[0] .= "          <nmwgt:ifAddress type=\"ipv4\">127.0.0.1</nmwgt:ifAddress>\n";
    $rdata[0] .= "          <nmwgt:direction>in</nmwgt:direction>\n";
    $rdata[0] .= "        </nmwgt:interface>\n";
    $rdata[0] .= "      </netutil:subject>\n";
    $rdata[0] .= "      <nmwg:eventType>http://ggf.org/ns/nmwg/characteristic/utilization/2.0</nmwg:eventType>\n";
    $rdata[0] .= "    </nmwg:metadata>\n";
    }}}

The returned value from this function is a structured result that contains:

 * _*eventType*_ - The returned _*status*_ of the operation, see the LS service documentation for exact values, but in practice using a regex to search for _*success*_ or _*failure*_ works well. 
 * _*response*_ - The readable response from the service, normally gives more insight than the eventType code.  

Some examples on how to call this function:

{{{
my $ls = new perfSONAR_PS::Client::LS( { instance => "http://localhost:8080/perfSONAR_PS/services/LS"} );

my $key = "some key";

my $result = $ls->deregisterRequestLS( { key => $key, data => \@rdata } );
if ( $result->{eventType} eq "success.ls.register" ) {
    print "De-registration of one element successful.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} . "\nKey:\t" . $result->{key} , "\n";
}
else {
    print "Failed to deregister one element.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} , "\n";
}

$result = $ls->deregisterRequestLS( { key => $key } );
if ( $result->{eventType} eq "success.ls.register" ) {
    print "De-registration of service successful.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} . "\nKey:\t" . $result->{key} , "\n";
}
else {
    print "Failed to deregister service.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} , "\n";
}

}}}

=== keepaliveRequestLS ===

This function is used to _*refresh*_ already registered data so that the LS does not remove it from memory.  The LS will periodically do this for services that do not announce themselves.  There are two inputs:

 * _*key*_ - A required string used to identify the registered service with an LS.  The LS will pass back a value similar to this upon registration, this method only requires the actual value (no surrounding XML):
   {{{
    <nmwg:key>
      <nmwg:parameters id="keys3">
        <nmwg:parameter name="lsKey">5cfb07ea7a5b840ce4f8f48b842ac9c0</nmwg:parameter>
      </nmwg:parameters>
    </nmwg:key>
   }}}
    
 * _*eventType*_ - An eventType for keepalive.  This element is optional, and if so the first choice is assumed (e.g. _*standard*_ operation).  The options are:
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/keepalive/service/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/keepalive/summary/2.0

The returned value from this function is a structured result that contains:

 * _*eventType*_ - The returned _*status*_ of the operation, see the LS service documentation for exact values, but in practice using a regex to search for _*success*_ or _*failure*_ works well. 
 * _*response*_ - The readable response from the service, normally gives more insight than the eventType code.  

Some examples on how to call this function:

{{{
my $ls = new perfSONAR_PS::Client::LS( { instance => "http://localhost:8080/perfSONAR_PS/services/LS"} );

my $key = "some key";
my $result = $ls->keepaliveRequestLS( { key => $key } );
if ( $result->{eventType} eq "success.ls.keepalive" ) {
    print "Success!\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} , "\n";
}
else {
    print "Failed to keepalive.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} , "\n";
}
}}}

=== keyRequestLS ===

This function returns the _*key*_ for a given service that is registered to the LS.  Inputs are:

 * _*service*_ - A hash object containing service information. This may be used instead of raw XML.
    {{{
    my %service = (
        serviceName => "Internet2 SNMP MA",
        serviceType => "MA",
        serviceDescription => "Testing SNMP MA",
        accessPoint => "http://localhost:8080/perfSONAR_PS/services/snmpMA"
    );
    }}}
    
 * _*serviceXML*_ - Raw XML containing service information, this may be used instead of a hash object.
    {{{
    my $service = "<perfsonar:subject id=\"commonParameters4\" xmlns:perfsonar=\"http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/\">\n";
    $service .="  <psservice:service id=\"serviceParameters4\" xmlns:psservice=\"http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/\">\n";
    $service .="    <psservice:serviceName>My_test_MA3</psservice:serviceName>\n";
    $service .="    <psservice:accessPoint>http://localhost:8082/axis/services/snmpMA</psservice:accessPoint>\n";
    $service .="    <psservice:serviceType>MA</psservice:serviceType>\n";
    $service .="    <psservice:serviceDescription>This is my testing MA3</psservice:serviceDescription>\n";
    $service .="  </psservice:service>\n";
    $service .="</perfsonar:subject>\n";
    }}}
    
 * _*eventType*_ - An eventType for key request.  This element is optional, and if so the first choice is assumed (e.g. _*standard*_ operation).  The options are:
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/key/service/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/key/summary/2.0

The returned value from this function is a structured result that contains:

 * _*eventType*_ - The returned _*status*_ of the operation, see the LS service documentation for exact values, but in practice using a regex to search for _*success*_ or _*failure*_ works well. 
 * _*response*_ - The readable response from the service, normally gives more insight than the eventType code.  
 * _*key*_ - The returned _*key*_ that can be used to identify the service, this should be remembered.   
  
Some examples on how to call this function:

{{{
my $ls = new perfSONAR_PS::Client::LS( { instance => "http://localhost:8080/perfSONAR_PS/services/LS"} );

my %service = (
    serviceName => "Internet2 SNMP MA",
    serviceType => "MA",
    serviceDescription => "Testing SNMP MA",
    accessPoint => "http://localhost:8080/perfSONAR_PS/services/snmpMA"
);
my $result = $ls->keyRequestLS( { service => \%service } );
if ( $result->{eventType} eq "success.ls.keepalive" ) {
    print "Success!\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} , "\n";
}
else {
    print "Failed to keepalive.\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} , "\n";
}
}}}

=== queryRequestLS ===

This function passes an XQuery or XPath statement directly to the LS, and returns the results of the query back in a message.  There are several inputs available:

 * _*query*_ - An XQuery or XPath string.  Do remember to escape necessary characters when enclosed in a string (_*"*_, _*\*_, _*@*_, _*$*_, etc.).  An example:
   {{{
   declare namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/";
   /nmwg:store[@type="LSStore"]/nmwg:data
   }}}
 * _*subject*_ - Instead of an XQuery or XPath string a fully formed XML subject can be sent, normally in the form of a _summary_, see also the [http://anonsvn.internet2.edu/svn/nmwg/trunk/nmwg/doc/dLS/gLS/phase_1_color.html gLS design document].  Be sure the appropriate _*eventType*_ is used. An example:
   {{{
      <summary:subject xmlns:summary="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/summarization/2.0/" id="subject.1">

<!-- can have multiples of each, note that this creates an 'or' relationship -->
        <nmtb:address xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070828/" type="ipv4">128.4.133.167</nmtb:address>
        <nmtb:address xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070828/"type="ipv4">128.4.100.45</nmtb:address>

        <nmtb:domain xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070828/">
          <nmtb:name type="dns">edu</nmtb:name>          
        </nmtb:domain>      

        <nmtb:domain xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070828/">
          <nmtb:name type="dns">udel.edu</nmtb:name>          
        </nmtb:domain>    

        <nmwg:eventType>http://ggf.org/ns/nmwg/characteristic/utilization/2.0</nmwg:eventType>
        <nmwg:eventType>http://ggf.org/ns/nmwg/characteristic/errors/2.0</nmwg:eventType>

        <summary:parameters>
          <nmwg:parameter name="keyword">project:Geant2</nmwg:parameter>
        </summary:parameters>

<!-- the combination of all things is an 'and' relationship, this entire subject is therefore:

('128.4.133.167' or '128.4.100.45')  and 
('udel.edu' or 'edu') and 
('http://ggf.org/ns/nmwg/characteristic/utilization/2.0' or 'http://ggf.org/ns/nmwg/characteristic/errors/2.0') and
('project:Geant2')

-->
      </summary:subject>
   }}}
 * _*foramt*_ - Will _*format*_ (e.g. perform escaping to normalize the XML output) on the resulting data.   
 * _*eventType*_ - An eventType for registration.  This element is optional, and if so the first choice is assumed (e.g. _*standard*_ query).  Note that not all may be supported by an LS, the first is the safest option.  The options are:
   * http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/discovery/xquery/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/discovery/control/xquery/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/query/xquery/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/query/control/xquery/2.0
   * http://ogf.org/ns/nmwg/tools/org/perfsonar/service/lookup/discovery/summary/2.0

The returned value from this function is a structured result that contains:

 * _*eventType*_ - The returned _*status*_ of the operation, see the LS service documentation for exact values, but in practice using a regex to search for _*success*_ or _*failure*_ works well. 
 * _*response*_ - The actual XML response form the service.  Be prepared to parse this with [http://search.cpan.org/dist/XML-LibXML/ XML::LibXML] or a similar parsing library.

Some examples on how to call this function:

{{{
my $ls = new perfSONAR_PS::Client::LS( { instance => "http://localhost:8080/perfSONAR_PS/services/LS"} );

my $key = "some key";
my $query = "declare namespace nmwg=\"http://ggf.org/ns/nmwg/base/2.0/\";\n";
$query .= "/nmwg:store[\@type=\"LSStore\"]/nmwg:data[\@metadataIdRef=\"".$key."\"]\n";
my $result = $ls->queryRequestLS( { query => $query, format => 1 } );
if( $result->{eventType} =~ m/^error/mx ) {
    print "Something went wrong...\n";
    print "eventType:\t" . $result->{eventType} . "\nResponse:\t" . $result->{response} , "\n";
} 
else {
    print "Here it is:\n" . $result->{response} . "\n";
}
}}}

== Example Use ==

TBD

== Last Updated ==

$Id$
