[%- DEFAULT
  REFRESHINTERVAL = 30
-%]
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <title>perfSONAR Google Maps Asynchronous XML Example</title>
    <style type="text/css">
      html, body {
        margin: 0px;
        padding: 0px;
        width: 100%;
        height: 100%;
      }
      html {
        overflow: hidden;
      }
      body {
        margin: 0px;
        padding: 0px;
        background-color: #CCCCCC;
      }
      #map {
        width: 100%;
        height: 100%;
      }
      #side_bar {
        text-align: right;
        background-color: #FFFFFF;
        margin: 5px;
        padding: 5px;
        padding-left: 8px;
        top: 28px;
        right: 2px;
        height: 72%;
        position: absolute;
        z-index: 99999; 
        overflow: auto;
        filter: alpha(opacity=80);
        -moz-opacity: .80;
        opacity: .80;
      }
      #slac_logo {
        position: absolute;
        left: 12px;
        bottom: 110px;
        z-index: 99998;
      }
      #internet2_logo {
        position: absolute;
        left: 38px;
        bottom: 60px;
        z-index: 99997;
      }
      #perfsonar_logo {
        position: absolute;
        left: 25px;
        bottom: 27px;
        z-index: 99996;
      }
      #invert_markers, #select_all_markers, #select_none_markers {
        font-size: 6pt;
      }
    </style>
    <script src="http://maps.google.com/maps?file=api&amp;key=[% googlemapKey %]&amp;v=2.x"
      type="text/javascript"></script>
    <script type="text/javascript">

    //<![CDATA[

    var gmarkers = new Array();
    var glines = new Array();
    var garrows = new Array();
    
    var side_bar_html = '';
    
    var map;
    var activeIf;
    var activeLabel;

    function createAMarker( lat, lng, label, iface ) {
      if ( label == '' ) { label = iface; }
 
      if ( ! parseFloat(lat) && ! parseFloat(lng) ) {
        side_bar_html += label + '<input type="checkbox" disabled>' + '<br>';
      } else {

        var point = new GLatLng( lat,lng );
        var tooltip = label + ' (' + iface + ')';
        var marker = new GMarker(point, {title:tooltip});

        // make double clicks center on the marker
        GEvent.addListener( marker, "dblclick", function() {
          map.setCenter( point );
        });
        // make single clicks the info box
        GEvent.addListener( marker, "click", function() {
            refreshInfoWindowTab( label, iface );
        });

        side_bar_html +=  
                "<a href=\"javascript:focus('" + label + "','" + iface + "');\">" + label + '</a>'
                + "  <input id=\"toggle_marker_" + iface + '"'
                + '         type="checkbox" '
                + "         onclick=\"javascript:toggleMarker('" + iface + "');\" checked>"
                + '<br>';
        
        return marker;
      
      }
    }
    
    function getTabs( label, iface ) {
      var req = GXmlHttp.create();
      req.open( "GET", "[% cgi %]?mode=[% infoMode %]&if=" + iface, false );
      req.send( null );
      var serializer = new XMLSerializer();
      table = serializer.serializeToString( req.responseXML );
      
      var d = new Date();
      var header =  "<h3>" + label + " (" + iface + ")</h3>";
      var graph = "[% cgi %]?mode=[% graphMode %]&bogus=" + d.getTime() + "&if=" + iface;
      [%- IF graphArgs %]
      graph += "[% graphArgs %]";
      [%- END %]

      var tabs = [
        new GInfoWindowTab( "Utilization", header + "<p align=\"center\"><img id='utilGraph_'" + iface + " height='168px' width='481px' src='" + graph + "'/></p>" ),
        new GInfoWindowTab( "Info", header + table )
      ];
     
      return tabs;
    }

    function refreshInfoWindow() {
      if( ! map.getInfoWindow().isHidden() )
        refreshInfoWindowTab( activeLabel, activeIf );
    }
    
    function refreshInfoWindowTab( label, iface ) {
      activeIf = iface;
      activeLabel = label;
      var tabs = getTabs( label, iface );
      gmarkers[iface].openInfoWindowTabsHtml( tabs );   
    }
    
    function toggleMarker( iface ) {
      var marker = gmarkers[iface];
      if ( marker.isHidden() ) {
        gmarkers[iface].show();
      } else {
        gmarkers[iface].hide();
      }
    }
    
    function invertMarkers() {
      for( var iface in gmarkers ) {
        var checkbox = document.getElementById("toggle_marker_" + iface);
        if( gmarkers[iface].isHidden() ) {
          gmarkers[iface].show();
          checkbox.checked = true;
        } else {
          gmarkers[iface].hide();
          checkbox.checked = false;
        }
      }
    }
    
    function selectAllMarkers() {
      for( var iface in gmarkers ) {
        gmarkers[iface].show();
        document.getElementById("toggle_marker_" + iface).checked = true;
      }
    }

    function selectNoneMarkers() {
      for( var iface in gmarkers ) {
        gmarkers[iface].hide();
        document.getElementById("toggle_marker_" + iface).checked = false;
      }
    }

    function toggleLines( off ) {
      var toggle = document.getElementById("toggle_lines");
      if ( toggle && off ) {
        toggle.checked = false;
      }
      var show = toggle.checked;
      if ( ! show ) {
        for( var descr in glines ) {
          map.removeOverlay( glines[descr] );
          map.removeOverlay( garrows[descr] );
        }
      } else {
        for( var descr in glines ) {
          map.addOverlay( glines[descr] );
          map.addOverlay( garrows[descr] );
        }
      } 
    }
    
    
    function focus( label, iface ) {
      refreshInfoWindowTab( label, iface );
      map.getInfoWindow().hide();
      map.getInfoWindow().show();
    }
    
    function bearing( from, to ) {
      var lat1 = from.latRadians();
      var lon1 = from.lngRadians();
      var lat2 = to.latRadians();
      var lon2 = to.lngRadians();

      var angle = - Math.atan2( Math.sin( lon1 - lon2 ) * Math.cos( lat2 ), Math.cos( lat1 ) * Math.sin( lat2 ) - Math.sin( lat1 ) * Math.cos( lat2 ) * Math.cos( lon1 - lon2 ) );
      if ( angle < 0.0 )
	    angle  += Math.PI * 2.0;

      angle = angle * (180.0 / Math.PI);
      angle = angle.toFixed(1);

      return angle;
    }  
    
    function arrowHead(points) {
      var p1 = points[points.length-1];
      var p2 = points[points.length-2];
      var dir = bearing( p2, p1 );
      // == round it to a multiple of 3 and cast out 120s
      var dir = Math.round(dir/3) * 3;
      while (dir >= 120) {dir -= 120;}
      // == use the corresponding triangle marker 
      var arrowIcon = new GIcon();
      arrowIcon.iconSize = new GSize( 16,16 );
      arrowIcon.shadowSize = new GSize( 1,1 );
      arrowIcon.iconAnchor = new GPoint( 10,10 );
      arrowIcon.infoWindowAnchor = new GPoint( 0,0 );
      arrowIcon.image = "http://www.google.com/intl/en_ALL/mapfiles/dir_"+dir+".png";
      var arrow = new GMarker( p1, arrowIcon );
      return arrow;
    }
 
    function clearOverlay() {
    
    }
 
    function getXml( uri ) {
      
      GDownloadUrl( uri, function (doc) {
        var xmlDoc = GXml.parse(doc);
        var markers = xmlDoc.documentElement.getElementsByTagName("marker");
                    
        for (var i = 0; i < markers.length; i++) {
	        // obtain the attribues of each marker
	        var lat = markers[i].getAttribute("lat");
	        var lng = markers[i].getAttribute("long");
	          
	        var label = markers[i].getAttribute("label");
	        var iface = markers[i].getAttribute("if");
	            
	        // create the marker
	        gmarkers[iface] = createAMarker( lat, lng, label, iface);
	         
	        map.addOverlay( gmarkers[iface] );
	      }
	      document.getElementById("side_bar").innerHTML = side_bar_html;
	
	      var lines = xmlDoc.documentElement.getElementsByTagName("line");
	      for ( var i = 0; i < lines.length; i++ ) {
	
	        var descr = lines[i].getAttribute("descr");
	        var srclat = parseFloat( lines[i].getAttribute("srclat") );
	        var srclng = parseFloat( lines[i].getAttribute("srclng") );
	        var src = new GLatLng( srclat, srclng );
	        var dstlat = parseFloat( lines[i].getAttribute("dstlat") );
	        var dstlng = parseFloat( lines[i].getAttribute("dstlng") );
	        var dst = new GLatLng( dstlat, dstlng );
	            
	        var line = [ src, dst ];
	        glines[descr] = new GPolyline( line )
	        map.addOverlay( glines[descr] );
	        garrows[descr] = arrowHead( line );
	        map.addOverlay( garrows[descr] );
	         
        }

        var lineToggle = "show links "
           + '<input id=\"toggle_lines" '
           + '       type="checkbox" ' 
           + '       onclick="javascript:toggleLines();" checked><br>';
 
        var markerToggle = 'markers: ' 
           + '<input id="invert_markers" '
           + '       type="button" ' 
           + '       onclick="javascript:invertMarkers();" ' 
           + '       value="Invert">'
           + '<input id="select_all_markers" '
           + '       type="button" '
           + '       onclick="javascript:selectAllMarkers();" '
           + '       value="All">'
           + '<input id="select_none_markers" ' 
           + '       type="button" '
           + '       onclick="javascript:selectNoneMarkers();" '
           + '       value="None">';
                  
        document.getElementById("side_bar").innerHTML = lineToggle + markerToggle + '<hr>' + side_bar_html;   

        toggleLines( true );     

      });
        
    }
 
 
    function load() {
    
      if (GBrowserIsCompatible()) {

        document.getElementById("side_bar").innerHTML 
          = '<p align="center">Please wait.<br>Fetching perfSONAR information: <br>This could take some time...<br><img src="[% cgi %]?mode=spinner"/></p>';

        map = new GMap2(document.getElementById("map"));
        var mapDiv = document.getElementById("map"); 
       	map.addControl(new GLargeMapControl());
        map.addControl(new GMapTypeControl());
        map.addControl(new GOverviewMapControl());        
        map.setCenter(new GLatLng(40,0), 2);
        map.enableScrollWheelZoom();
        
        // populate map 
        getXml( "[% cgi %]?mode=[% xmlMode %]&[% args %]" );

        // Monitor the window resize event and let the map know when it occurs
        if (window.attachEvent) { 
          window.attachEvent("onresize", function() { map.onResize()} );
        } else {
          window.addEventListener("resize", function() { map.onResize()} , false);
        }

        setInterval( "refreshInfoWindow();", [% REFRESHINTERVAL %] * 1000 );
        
      }
      else {
        alert( "Sorry, your browser is not compatible with GoogleMaps." );
      } 
   
    }

    //]]>
    </script>
  </head>
  <body onload="load()" onunload="GUnload()">
    <div id="map"></div>
    <div id="side_bar"></div>
    <div id="slac_logo"><img src="[% cgi %]?mode=slac_logo"/></div>
    <div id="internet2_logo"><img src="[% cgi %]?mode=internet2_logo"/></div>
    <div id="perfsonar_logo"><img src="[% cgi %]?mode=perfsonar_logo"/></div>
  </body>
</html>
