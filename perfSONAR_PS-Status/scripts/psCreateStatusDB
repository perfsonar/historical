#!/usr/bin/perl -w

use strict;
use warnings;

our $VERSION = 3.1;

=head1 NAME

psCreateStatusDB

=head1 DESCRIPTION

Creates the database for the status service.

=cut

use Getopt::Long;
use DBI;
use Carp;

=head2 usage()

A function to print out the command-line options understood by this script.

=cut

sub usage {
    print "$0: Initialize a Status database\n";
    print "  --type: The database type: 'sqlite' or 'mysql'\n";
    print "  --prefix: The prefix of the tables to create. defaults to 'ps_'\n";
    print "  If SQLite is chosen, you can use these arguments\n";
    print "  --file: The database file to use\n";
    print "  If MySQL is chosen, you can use these arguments\n";
    print "  --name: The database to use\n";
    print "  --host: The database host to use\n";
    print "  --port: The database port to use\n";
    print "  --username: The database username to use\n";
    print "  --password: The database password to use\n";
    return;
}

my $sqlite_create_status_table = <<EOQ
CREATE TABLE IF NOT EXISTS TABLEPREFIXstatus (
  id varchar(255) NOT NULL,
  start_time integer not null,
  end_time integer not null,
  oper_status varchar(32) not null,
  admin_status varchar(32) not null,
 unique (id, start_time, end_time));
EOQ
    ;

my $mysql_create_status_table = <<EOQ
CREATE TABLE IF NOT EXISTS TABLEPREFIXstatus (
  id varchar(255) NOT NULL,
  start_time bigint not null,
  end_time bigint not null,
  oper_status varchar(32) not null,
  admin_status varchar(32) not null,
  unique(id, start_time, end_time)
);
EOQ
    ;

my $CONFIG_FILE;
my $DEBUGFLAG;
my $HELP;
my $LOGGER_CONF;
my $NEW_TOPOLOGY;
my $DB_TYPE;
my $DB_PREFIX;
my $DB_HOST;
my $DB_PORT;
my $DB_NAME;
my $DB_FILE;
my $DB_USERNAME;
my $DB_PASSWORD;

my ( $status, $res, $res2 );

$status = GetOptions(
    'type=s'     => \$DB_TYPE,
    'prefix=s'   => \$DB_PREFIX,
    'file=s'     => \$DB_FILE,
    'name=s'     => \$DB_NAME,
    'host=s'     => \$DB_HOST,
    'port=s'     => \$DB_PORT,
    'username=s' => \$DB_USERNAME,
    'password=s' => \$DB_PASSWORD,
);

unless ( $DB_TYPE ) {
    print "No database type specified\n";
    usage();
    exit( -1 );
}

$DB_TYPE = lc( $DB_TYPE );

if ( $DB_TYPE ne "sqlite" and $DB_TYPE ne "mysql" ) {
    print "Invalid database type specified. Must be either 'mysql' or 'sqlite'\n";
    usage();
    exit( -1 );
}

$DB_PREFIX = 'ps_' unless $DB_PREFIX;

if ( $DB_TYPE eq "sqlite" ) {
    unless ( $DB_FILE ) {
        print "Need to specify a database file\n";
        usage();
        exit( -1 );
    }

    my $dbi_string = "DBI:SQLite:dbname=" . $DB_FILE;

    $sqlite_create_status_table =~ s/TABLEPREFIX/$DB_PREFIX/gm;

    my ( $sth );

    my $dbh = DBI->connect( $dbi_string );
    $sth = $dbh->prepare( $sqlite_create_status_table ) or croak "Couldn't prepare statement: " . $dbh->errstr;
    $sth->execute();
}
elsif ( $DB_TYPE eq "mysql" ) {
    my $dbi_string = "dbi:mysql";

    unless ( $DB_NAME ) {
        print "Need to specify a database name\n";
        usage();
        exit( -1 );
    }

    $mysql_create_status_table =~ s/TABLEPREFIX/$DB_PREFIX/gm;

    $dbi_string .= ":database=" . $DB_NAME;

    unless ( $DB_HOST ) {
        print "Need to specify the database host\n";
        usage();
        exit( -1 );
    }

    $dbi_string .= ":host=" . $DB_HOST;
    $dbi_string .= ":port=" . $DB_PORT if $DB_PORT;

    my $dbh = DBI->connect( $dbi_string );
    my $sth2 = $dbh->prepare( $mysql_create_status_table, $DB_USERNAME, $DB_PASSWORD ) or croak "Couldn't prepare statement: " . $dbh->errstr;
    $sth2->execute();
}

__END__

=head1 SEE ALSO

L<Getopt::Long>, L<DBI>, L<Carp>

To join the 'perfSONAR Users' mailing list, please visit:

  https://mail.internet2.edu/wws/info/perfsonar-user

The perfSONAR-PS subversion repository is located at:

  http://anonsvn.internet2.edu/svn/perfSONAR-PS/trunk

Questions and comments can be directed to the author, or the mailing list.
Bugs, feature requests, and improvements can be directed here:

  http://code.google.com/p/perfsonar-ps/issues/list

=head1 VERSION

$Id$

=head1 AUTHOR

Aarobn Brown, aaron@internet2.edu
Jason Zurawski, zurawski@internet2.edu

=head1 LICENSE

You should have received a copy of the Internet2 Intellectual Property Framework
along with this software.  If not, see
<http://www.internet2.edu/membership/ip.html>

=head1 COPYRIGHT

Copyright (c) 2008-2009, Internet2

All rights reserved.

=cut
