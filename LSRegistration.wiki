= Lookup Service Registration =

Different types of services may be able to take advantage of the _perfSONAR Lookup Service_ whether it be publishing the existence of resources or the discovery of remote information.  This page is a high level view of what the *LS* expects in terms of registered information as well as potential queries that motivate what a service should (or should not) share. 

== Lookup Service Overview ==

The Lookup Service is really nothing more than an XML database (e.g. in the case of perfSONAR-PS the Oracle Berkeley [http://www.oracle.com/database/berkeley-db/xml/index.html DB XML], Java incarnations use the [http://exist.sourceforge.net/ eXist] database) exposed through the perfSONAR Web Services interface.  This design decision allows the *LS* to deal with the native format of metadata in the perfSONAR framework [http://nmwg.internet2.edu/ NM-WG] formatted XML.  Because there is rarely a need to inspect or beset the XML submitted by the various services, the query interface is also left in a native form, namely by use of the [http://www.w3.org/TR/xquery/ XQuery] and [http://www.w3.org/TR/xpath XPath] languages.

The *LS* was originally designed with only the registration of perfSONAR services in mind.  Recent advances have allowed this service to be utilized in new ways and has changed the original design paradigm.  In general all services must respect the separation between the _Metadata_ (pseudo static information that is normally used to describe the service itself) and the _Data_ (specific information about the type of services offered such as the spoken protocol or data offered).  Adherence to this rule enables the various APIs (legacy as well as new) the ability to find data seamlessly both locally as well as in the new _Global Lookup Service_ (*gLS*) abstraction.

== Data Format ==

We start out with an example of the perfSONAR LS expected registration format for a perfSONAR service (specifically the PingER Measurement Archive):

{{{
  <nmwg:metadata id="meta1">
    <perfsonar:subject xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/">
      <psservice:service xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/">
        <psservice:serviceName>PingER MA</psservice:serviceName>
        <psservice:accessPoint>http://lab244.internet2.edu:8075/perfSONAR_PS/services/pinger/ma</psservice:accessPoint>
        <psservice:serviceType>MA</psservice:serviceType>
        <psservice:serviceDescription>PingER MA</psservice:serviceDescription>
      </psservice:service>
    </perfsonar:subject>
  </nmwg:metadata>
  
  <nmwg:data id="data1" 
             metadataIdRef="meta1"
             xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" >
    <nmwg:metadata id="pinger1"
                   xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/" 
                   xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/" 
                   xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
      <pinger:subject id="subj1">
        <nmwgt:endPointPair>
          <nmwgt:src value="lab244.internet2.edu" type="hostname"/>
          <nmwgt:dst value="cmssrm.hep.wisc.edu" type="hostname"/>
        </nmwgt:endPointPair>
      </pinger:subject>
      <pinger:parameters id="params1">
        <nmwg:parameter value="10" name="count"/>
        <nmwg:parameter value="1000" name="packetSize"/>
        <nmwg:parameter value="255" name="ttl"/>
        <nmwg:parameter value="ICMP" name="transport"/>
        <nmwg:parameter value="1" name="packetInterval"/>
      </pinger:parameters>
      <nmwg:eventType>http://ggf.org/ns/nmwg/tools/pinger/2.0/</nmwg:eventType>
    </nmwg:metadata>
    
    <nmwg:metadata id="pinger2"
                   xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/" 
                   xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/" 
                   xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
      <pinger:subject id="subj2">
        <nmwgt:endPointPair>
          <nmwgt:src value="lab244.internet2.edu" type="hostname"/>
          <nmwgt:dst value="www.cern.ch" type="hostname"/>
        </nmwgt:endPointPair>
      </pinger:subject>
      <pinger:parameters id="params2">
        <nmwg:parameter value="10" name="count"/>
        <nmwg:parameter value="1000" name="packetSize"/>
        <nmwg:parameter value="255" name="ttl"/>
        <nmwg:parameter value="ICMP" name="transport"/>
        <nmwg:parameter value="1" name="packetInterval"/>
      </pinger:parameters>
      <nmwg:eventType>http://ggf.org/ns/nmwg/tools/pinger/2.0/</nmwg:eventType>
    </nmwg:metadata>    
    
  </nmwg:data>
}}}

Some notes on the _metadata_:

 * The format is in the style of the *NM-WG*
 * _subject_ is expected
   * The subject namespace is perfSONAR because this is a perfSONAR service
   * The subject contains a perfSONAR service element because this is a perfSONAR service
   * The service element contains name, type, description, and contact information _*for the service only*_
 * _parameters_ are optional
 * _eventType_ is not expected (if it is present, it is normally used to trigger LS actions such as registration or a refresh)
 * _key_ is not expected (also used in conjunction with LS operations such as a removal or a refresh).  
 
Some notes on the _data_:

 * The format is in the style of the *NM-WG*
 * The data is linked to the metadata via id reference
 * There many be many data elements that point to the service element
 * The data must contain at least one (possibly many) metadata elements
 * Each enclosed metadata element are also in the style of the *NM-WG*
   * _subject_, _key_, _eventType_, and _parameters_ are possible.
   * _subject_ is used to describe the topological features of a measurement (normally using a topology element such as the endPoint pair)
   * _key_ can be an opaque identifier used in place of subject
   * _eventType_ should describe the data type
   * _parameters_ may contain any other optional information about the measurement data (e.g. command line defaults, etc.)

New development has led to the inclusion of non-perfSONAR services into the LS, and the format is similar (although not exact):

{{{
  <nmwg:metadata id="meta1"
                 xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
    <perfsonar:subject xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/">
      <nmtb:service xmlns:nmtb="http://ogf.org/schema/network/base/20070828/">
        <nmtb:name>Internet2 BWCTL Server</nmtb:name>
        <nmtb:type>bwctl</nmtb:type>
        <nmtb:description>BWCTL Server for LHC at Internet2 in Ann Arbor, MI USA</nmtb:description>
        <nmtb:address type="uri">tcp://207.75.164.244:4823</nmtb:address>
        <nmtb:address type="uri">tcp://[2001:468:1420:3:214:22ff:fe72:8ae6]:4823</nmtb:address>
      </nmtb:service>
    </perfsonar:subject>
  </nmwg:metadata>
  
  <nmwg:data id="data1" 
             metadataIdRef="meta1"
             xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
    <nmwg:metadata id="bwctl1">
      <nmwg:subject>
        <nmtb:node xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070828/" 
                   xmlns:nmtl3="http://ogf.org/schema/network/topology/l3/20070828/">
          <nmtb:name type="dns">lab244.internet2.edu</nmtb:name>
          <nmtl3:port>
            <nmtl3:address type="ipv4">207.75.164.244</nmtl3:address>
          </nmtl3:port>
          <nmtl3:port>
            <nmtl3:address type="ipv6">2001:468:1420:3:214:22ff:fe72:8ae6</nmtl3:address>
          </nmtl3:port>
        </nmtb:node>
      </nmwg:subject>
      <nmwg:eventType>http://ggf.org/ns/nmwg/tools/bwctl/1.0</nmwg:eventType>
    </nmwg:metadata>
  </nmwg:data>
}}}

Some notes on the _metadata_:

 * The format is in the style _similar_ to the *NM-WG*, but uses *NML-WG* elements as well
 * _subject_ is expected
   * The subject namespace is still perfSONAR (it is used in a perfSONAR context) but it is not a perfSONAR service
   * The subject contains a topology service element to be generic (*not* a perfSONAR service element)
   * The service element contains name, type, description, and contact information _*for the service only*_
 * _parameters_ are optional
 * _eventType_ is not expected (if it is present, it is normally used to trigger LS actions such as registration or a refresh)
 * _key_ is not expected (also used in conjunction with LS operations such as a removal or a refresh).  
 
Some notes on the _data_:

 * The format is in the style of the *NM-WG*, but uses *NML-WG* elements as well
 * The data is linked to the metadata via id reference
 * There many be many data elements that point to the service element
 * The data must contain at least one (possibly many) metadata elements
 * Each enclosed metadata element are also in the style of the *NM-WG*, but use *NML-WG* elements as well
   * _subject_, _key_, _eventType_, and _parameters_ are possible.
   * _subject_ in this case is merely a definition of the machine that is running the daemon (e.g. a node describing the access addresses/host names)
   * _key_ can be an opaque identifier used in place of subject
   * _eventType_ should describe the data type or perhaps protocol spoken (e.g. BWCTL 1.3 protocol)
   * _parameters_ may contain any other optional information about the measurement data (e.g. command line defaults, etc.)

== New Data Formats ==

When creating new data formats for services it is important to identify several things:

 * Service Information - What makes the service unique?  The service info should be limited to just that: information that describes the service and not necessarily the data that it contains
 * Service Data - What does this service do?  Is it measurement related, does it provide other services?  Each atomic task/function can be described in a separate data/metdata description and linked to the service itself

=== Case Study - DCN Integration ===

The Internet2 Dynamic Circuit Network (*DCN*) features several autonomous units that work together to perform the tasks necessary to dynamically allocate network resources across domains.  These units are interested in both registering themselves to the LS as well as querying the LS for information on resources they may require to function (instead of relying on static configuration).  There are two services that we will explore for LS integration:

 * Interdomain Controller Service (*IDC*)
 * Notification Broker Service

Each of these services will be required to register their _presence_ (e.g. that they exist and can be contacted at a certain address) along with any capabilities (e.g. services, data) they may offer.  The following sections will chronicle these formats.

==== Interdomain Controller Service ====

The IDC will have the following information available that it may want to share:

 # Service URL (form: http://HOSTNAME:PORT/END/POINT)
 # Protocol versions supported (will be a namespace URL)
 # Protocol Messages supported or WSDL location
 # List of domains under its control (will always be one domain for now)
 # Where can users/services subscribe to my notifications (see 1)
 # Who I send notifications of stat to
 
This is the proposed way forward:

 * *Metadata*
   * One _Metadata_ / _Service_ block is required (single armed endpoint)
   * _Service_ info similar to perfSONAR/topology use case, information may vary
   * eventTypes/parameters not necessary
 * Data
   * Linked to a service block, may be many, contains at least one (possibly more) metadata blocks
   * Each metadata block describes a capability/service of the aforementioned service block
   * Follows the perfSONAR/NM-WG format (using NML-WG topology)
   * Use Subject/eventTypes/parameters as needed
   * Example:
     # IDC host:port/endPoint for IDC/DC communication
       * Domains under control 
       * Relations to NotificationBroker service(s) where it publishes notifications
       * eventType(s) for protocol(s)
       * Messages Supported
       * Peers/Neighbors - TBD

 
A _very_ basic mockup of the _metadata_ / _data_ relationship where the IDC relies on an external NotificationBroker service is shown here:

{{{
  <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                 id="meta1">
    <dcn:subject xmlns:dcn="http://ggf.org/ns/nmwg/tools/org/dcn/1.0/">
      <nmtb:service xmlns:nmtb="http://ogf.org/schema/network/base/20070828/">
        <nmtb:name>Internet2 IDC</nmtb:name>
        <nmtb:type>IDC</nmtb:type>
        <nmtb:description>DCN IDC, Ann Arbor, MI USA</nmtb:description>
        <nmtb:address type="url">https://test-idc.internet2.edu:8443/axis2/services/OSCARS</nmtb:address>
        <nmtb:address type="url">http://[2001:468:1420:3:214:22ff:fe72:8ae6]:8443/axis2/services/OSCARS</nmtb:address>
      </nmtb:service>
    </dcn:subject>
  </nmwg:metadata>
  
  <nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
             id="data1" 
             metadataIdRef="meta1">

    <nmwg:metadata id="m1">
      <nmwg:subject id="s1">

        <nmtb:node xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070828/" 
                   xmlns:nmtl3="http://ogf.org/schema/network/topology/l3/20070828/">
          <nmtb:address type="url">https://test-idc.internet2.edu:8443/axis2/services/OSCARS</nmtb:address>

          <!-- NotificationBroker to which this IDC publishes  N.B. Since this
               is something that is a property of the node ('I' am publishing
               to 'You') it should go in here -->
     
          <nmtb:relation type="publisher">
            <nmtb:address type="url">https://test-idc.internet2.edu:8443/axis2/services/OSCARSNotify</nmtb:address>
          </nmtb:relation>

          <!-- future: list of neighbors -->

        </nmtb:node>
        
        <!-- domains controlled (could be many of these) -->
        <nmtb:domain xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070828/">
          <nmtb:name type="dns">dcn.internet2.edu</nmtb:name>

          <!-- could also be: -->
          <nmtb:name type="urn">urn:ogf:network:domain=dcn.internet2.edu</nmtb:name>

        </nmtb:domain>  
        
      </nmwg:subject>
      
      <!-- I am outsourcing the subscription service to my NB, so I am *JUST* an
           IDC -->
      <nmwg:eventType>http://oscars.es.net/OSCARS</nmwg:eventType>

      <nmwg:parameters id="p1">
        <!-- may include list of supported messages. For example this will be 
             useful for domains that don't want to implement user signaling
             right away but still want to support resource scheduling functions.
             In general it should be a best common practice to publish
             these...maybe we should even make it required? -->
             
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#createReservation</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#modifyReservation</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#cancelReservation</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#createPath</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#refreshPath</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#teardownPath</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#queryReservation</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#listReservations</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#getNetworkTopology</nmwg:parameter>
        
        <!-- It accepts Notify messages from other services to which it's 
             subscribed, but doesnt accept other subscriptions -->
        <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/b-2#Notify</nmwg:parameter>
        
      </nmwg:parameters>
    </nmwg:metadata>

  </nmwg:data>

}}}

Below is a case where the IDC implements all the Subscription messages locally and does not use an external NotificationBroker service:

{{{
  <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                 id="meta1">
    <dcn:subject xmlns:dcn="http://ggf.org/ns/nmwg/tools/org/dcn/1.0/">
      <nmtb:service xmlns:nmtb="http://ogf.org/schema/network/base/20070828/">
        <nmtb:name>Internet2 IDC</nmtb:name>
        <nmtb:type>IDC</nmtb:type>
        <nmtb:description>DCN IDC, Ann Arbor, MI USA</nmtb:description>
        <nmtb:address type="url">https://test-idc.internet2.edu:8443/axis2/services/OSCARS</nmtb:address>
        <nmtb:address type="url">http://[2001:468:1420:3:214:22ff:fe72:8ae6]:8443/axis2/services/OSCARS</nmtb:address>
      </nmtb:service>
    </dcn:subject>
  </nmwg:metadata>
  
  <nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
             id="data1" 
             metadataIdRef="meta1">

    <nmwg:metadata id="m1">
      <nmwg:subject id="s1">

        <nmtb:node xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070828/" 
                   xmlns:nmtl3="http://ogf.org/schema/network/topology/l3/20070828/">
          <nmtb:address type="url">https://test-idc.internet2.edu:8443/axis2/services/OSCARS</nmtb:address>
        
          <!-- future: list of neighbors -->
        
        </nmtb:node>
        
        <!-- domains controlled (could be many of these) -->
        <nmtb:domain xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070828/">
          <nmtb:name type="dns">dcn.internet2.edu</nmtb:name>

          <!-- could also be: -->
          <nmtb:name type="urn">urn:ogf:network:domain=dcn.internet2.edu</nmtb:name>

        </nmtb:domain>  
             
      </nmwg:subject>
      
      <!-- I am alone in the world (no NB to speak of) therefore I will let
           others subscribe to me directly -->
      <nmwg:eventType>http://oscars.es.net/OSCARS</nmwg:eventType>
      <nmwg:eventType>http://docs.oasis-open.org/wsn/b-2</nmwg:eventType>

      <nmwg:parameters id="p1">
        <!-- may include list of supported messages. For example this will be 
             useful for domains that don't want to implement user signaling
             right away but still want to support resource scheduling functions.
             In general it should be a best common practice to publish
             these...maybe we should even make it required? -->
             
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#createReservation</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#modifyReservation</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#cancelReservation</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#createPath</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#refreshPath</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#teardownPath</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#queryReservation</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#listReservations</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://oscars.es.net/OSCARS#getNetworkTopology</nmwg:parameter>

        <!-- implements the messages that allow people to subscribe -->
        <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/b-2#Subscribe</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/b-2#Renew</nmwg:parameter>
        <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/b-2#Unsubscribe</nmwg:parameter>
      
        <!-- It accepts Notify messages from other services to which it's subscribed -->
        <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/b-2#Notify</nmwg:parameter>

        <!-- Topics I am willing to publish to my direct subscribers-->
        <nmwg:parameter name="keyword:topic">idc:INFO</nmwg:parameter>  
        <nmwg:parameter name="keyword:topic">idc:DEBUG</nmwg:parameter>
        <nmwg:parameter name="keyword:topic">idc:ERROR</nmwg:parameter> 

      </nmwg:parameters>
    </nmwg:metadata>    

  </nmwg:data>
}}}

==== Notification Broker Service ==== 

The Notification Broker will have the following information available that it may want to share:

 # Service URL (form: http://HOSTNAME:PORT/END/POINT)
 # Protocol versions supported (will be a namespace URL, ws-notify maybe)
 # Protocol Messages supported or WSDL location
 # Where can users/services subscribe to my notifications (see 1)
 # Who I send notifications of stat to
 # List of services that send it notifications
 
This is the proposed way forward:

 * *Metadata*
   * One _Metadata_ / _Service_ block.
   * _Service_ info similar to perfSONAR/topology use case, information may vary
   * eventTypes/parameters not necessary
 * Data
   * Linked to a service block, may be many, contains at least one (possibly more) metadata blocks
   * Each metadata block describes a capability/service of the aforementioned service block
   * Follows the perfSONAR/NM-WG format (using NML-WG topology)
   * Use Subject/eventTypes/parameters as needed
   * Examples:
     # NB host:port/endPoint for communication
       * eventType(s) for protocol(s)
       * list of subscribers
       * list of publishers

A _very_ basic mockup of the _metadata_ / _data_ relationship is here:

{{{
  <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                 id="meta1">
    <dcn:subject xmlns:dcn="http://ggf.org/ns/nmwg/tools/org/dcn/1.0/">
      <nmtb:service xmlns:nmtb="http://ogf.org/schema/network/base/20070828/">
        <nmtb:name>Internet2 Notification Broker</nmtb:name>
        <nmtb:type>NB</nmtb:type>
        <nmtb:description>DCN NB, Ann Arbor, MI USA</nmtb:description>
        <nmtb:address type="uri">https://test-idc.internet2.edu:8443/axis2/services/OSCARSNotify</nmtb:address>
        <nmtb:address type="uri">http://[2001:468:1420:3:214:22ff:fe72:8ae6]:8443/axis2/services/OSCARSNotify</nmtb:address>
      </nmtb:service>
    </dcn:subject>
  </nmwg:metadata>
  
  <nmwg:data id="data1" 
             metadataIdRef="meta1"
             xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

    <nmwg:metadata id="m1">
      <nmwg:subject id="s1">
        
        <nmtb:node xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070828/" 
                   xmlns:nmtl3="http://ogf.org/schema/network/topology/l3/20070828/">
          <nmtb:address type="uri">https://test-idc.internet2.edu:8443/axis2/services/OSCARSNotify</nmtb:address>

          <nmtb:relation type="subscriber">
            <nmtb:address type="uri">https://test-idc.internet2.edu:8443/axis2/services/OSCARS</nmtb:address>
          </nmtb:relation>

          <nmtb:relation type="publisher">
            <nmtb:address type="uri">https://test-idc.es.net:7564/axis2/services/OSCARS</nmtb:address>
          </nmtb:relation>

          <nmtb:relation type="publisher">
            <nmtb:address type="uri">http://packrat.internet2.edu:8090/perfSONAR_PS/services/IDCMA</nmtb:address>
          </nmtb:relation>
                
        </nmtb:node>
      </nmwg:subject>
      
      <nmwg:eventType>http://docs.oasis-open.org/wsn/b-2</nmwg:eventType>
      <nmwg:eventType>http://docs.oasis-open.org/wsn/br-2</nmwg:eventType>
      <!-- other eventTypes for backwards compat? -->
      
      <nmwg:parameters id="p1">
          <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/b-2#Notify</nmwg:parameter>
          <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/b-2#Subscribe</nmwg:parameter>
          <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/b-2#Renew</nmwg:parameter>
          <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/b-2#Unsubscribe</nmwg:parameter>
          <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/b-2#PauseSubscription</nmwg:parameter>
          <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/b-2#ResumeSubscription</nmwg:parameter>
          <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/br-2#RegisterPublisher</nmwg:parameter>
          <nmwg:parameter name="keyword:supportedMessage">http://docs.oasis-open.org/wsn/br-2#DestroyRegistration</nmwg:parameter>
       </nmwg:parameters>
    </nmwg:metadata>
    
  </nmwg:data>
}}}

=== Questions ===

Some questions to be answered:

 * What is the namespace of the _metadata_'s _subject_?  I have this as *DCN* tooling in the *NM-WG* namespace, do we want to use something else?
 * Is the topology _service_ element what we want to use here?
 * Should the domain _name_ element be a URN?

== Last Updated ==

$Id$