This page details observations made during some testing of the gLS and hLS by ESnet.

== Performance of Common Queries on Production Services ==
We defined three "common" queries we thought represented 
typical uses of the lookup service infrastructure and ran the test 
10 times against the gLS at ps1.es.net and ndb1.internet2.edu. The tests are
described below:
 # Find the topology server for ESnet 
 # Find all pSB MAs with throughput data for host albu-pt1.es.net
 # Find all pSB MAs for the community “LHC”
These tests had the following characteristics:
 * Each required a single request to a gLS
 * Each required at least one request to an hLS
 * Request to multiple hLSes were done in parallel using PERL threads
 Additionally NetLogger output was added to the gLS on ps1.net.es.net that recorded when important operations were started in hopes of narrowing down any performance bottlenecks.

=== Results ===
==== Test 1: Find the topology server for ESnet ==== 
*hLS Count: 2*
|| Request || Average || Min || Max ||
||*gLS*||14.9s||14s||19s||
||*hLS*||.6s||0s||1s||
||*Total*||15.7s||15s||20s||

==== Test 2: Find all pSB MAs with throughput data for host albu-pt1.es.net ==== 
*hLS Count: 14*
|| Request || Average || Min || Max ||
||*gLS*||20.4s||17s||27s||
||*hLS*||31.1s (2.3s*)||0s (0s*)||75s (16s*)||
||*Total*||95.8s||92s||102s||
* The numbers in parentheses remove the hLSes that timed out

==== Test 3: Find all pSB MAs for the community “LHC” ==== 
*hLS Count: 28*
|| Request || Average || Min || Max ||
||*gLS*||20.5s||19s||23s||
||*hLS*||22.95s (6.78s*) ||0s (0s*)||75s (32s*)||
||*Total*||96.3s||95s||99s||
* The numbers in parentheses remove the hLSes that timed out

=== Observations ===
Some obeservations listed below:
 * A significant amount of time is spent in the gLS in each case
 * Many of the hLS requests in tests 2 and 3 timeout. I believe its because the test client was blocked by a firewall on some of the machines. If you remove the timeouts the average hLS test is quicker. The maximum seems to be 16s.
 * Not shown in the results above is that NetLogger showed that nearly all the time in the gLS is being spent in dbxml as it processes the query.

== Performance of Common Queries on Private gLS ==
A gLS with the same database as ps1 was setup on an OpenDevNet machine. The intent was to see if an isolated gLS with no additional traffic load experiences the same performance issues. The test was performed by sending just the gLS queries from the three tests in the previous round of requests.

=== Results ===
|| Request || Average ||
||Test 1 gLS query ||~12s||
||Test 2 gLS query ||~15s||
||Test 3 gLS query||~15s||

=== Observations ===
The same queries perform slightly better but still take a significant amount of time. That means that traffic is at least not the only factor driving performance. 

== Examining gLS queries ==
All of the gLS queries in the previous section had a WHERE clause with 2-3 AND conditions. The first part of the AND condition just looks for an hLS service types. The remainder was request specific but looked at the eventType and/or the domain of the summarized data. These last queries require an XQuery that finds all data elements with a matching metaIdRef. I don't know the exact internal structure of dbxml but I imagine this is similar to a join operation.

=== List all hLSes ===
This removed any additional AND conditions that look at fields such as eventType or domain. These produced the following results:
|| Average || Min || Max ||
||.9s||0s||1s||

=== List all hLSes w/ eventType ===
This looked for all hLSes with a certain eventType.
|| Average || Min || Max ||
||20.5s||19s||25s||

=== List all hLSes w/ domain ===
This looked for all hLSes with a certain domain.
|| Average || Min || Max ||
||19.7s||19s||20s||

=== Observations ===
The request without the "join" operations seems much faster. The slowdown seems to occur when adding the additional conditions to the gLS queries. 

What's also strange is that the hLS queries in tests 2 and 3 have similar clauses. Perhaps the increase in the amount of data in a gLS is causing the additional slow-down on these types of statements?

== Appendix: XQueries used in tests ==
=== Find the topology server for ESnet ===
==== gLS ====
{{{
declare namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"; \
declare namespace perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/"; \
declare namespace psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/"; \
declare namespace summary="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/summarization/2.0/"; \
declare namespace nmtb="http://ogf.org/schema/network/topology/base/20070828/"; \
for $metadata in /nmwg:store[@type="LSStore"]/nmwg:metadata \
    let $metadata_id := $metadata/@id  \
    let $data := /nmwg:store[@type="LSStore"]/nmwg:data[@metadataIdRef=$metadata_id] \
    let $domainName := $data/nmwg:metadata/summary:subject/nmtb:domain/nmtb:name[@type="dns"] \
    let $eventType := $data/nmwg:metadata/nmwg:eventType \
    where ($metadata/perfsonar:subject/psservice:service/psservice:serviceType="ls" or \
    $metadata/perfsonar:subject/psservice:service/psservice:serviceType="hLS") and $domainName="es.net" \
    and $eventType="http://ggf.org/ns/nmwg/topology/query/xquery/20070809" \
    return $metadata/perfsonar:subject/psservice:service/psservice:accessPoint
}}}
==== hLS ====
{{{
declare namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"; \
declare namespace perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/"; \
declare namespace psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/"; \
declare namespace nmtb="http://ogf.org/schema/network/base/20070828/"; \
for $metadata in /nmwg:store[@type="LSStore"]/nmwg:metadata \
    let $metadata_id := $metadata/@id  \
    where $metadata/perfsonar:subject/psservice:service/psservice:serviceType="TS" \
    return $metadata/perfsonar:subject/psservice:service";
}}}
=== Find all pSB MAs with throughput data for host albu-pt1.es.net ===
==== gLS ====
{{{
declare namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/";  \
declare namespace perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/";  \
declare namespace psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/";  \
declare namespace summary="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/summarization/2.0/";  \
declare namespace nmtb="http://ogf.org/schema/network/topology/base/20070828/";  \
for $metadata in /nmwg:store[@type="LSStore"]/nmwg:metadata  \
    let $metadata_id := $metadata/@id    \
    let $data := /nmwg:store[@type="LSStore"]/nmwg:data[@metadataIdRef=$metadata_id]  \
    let $domainName := $data/nmwg:metadata/summary:subject/nmtb:domain/nmtb:name[@type="dns"] \
    let $eventType := $data/nmwg:metadata/nmwg:eventType \
    where ($metadata/perfsonar:subject/psservice:service/psservice:serviceType="ls" or \
    $metadata/perfsonar:subject/psservice:service/psservice:serviceType="hLS") and $domainName="es.net" \
    and $eventType="http://ggf.org/ns/nmwg/tools/iperf/2.0" \
    return $metadata/perfsonar:subject/psservice:service/psservice:accessPoint
}}}
==== hLS ====
{{{
declare namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/";  \
declare namespace perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/";  \
declare namespace psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/";  \
declare namespace nmwgt="http://ggf.org/ns/nmwg/topology/2.0/";  \
declare namespace iperf="http://ggf.org/ns/nmwg/tools/iperf/2.0";  \
for $metadata in /nmwg:store[@type="LSStore"]/nmwg:metadata  \
    let $metadata_id := $metadata/@id \
    let $data := /nmwg:store[@type="LSStore"]/nmwg:data[@metadataIdRef=$metadata_id]  \
    let $eventType := $data/nmwg:metadata/nmwg:eventType  \
    let $endpoint := $data/nmwg:metadata/iperf:subject/nmwgt:endpoint  \
    let $src := $endpoint/nmwgt:src \
    let $dst := $endpoint/nmwgt:dst \
    where $metadata/perfsonar:subject/psservice:service/psservice:serviceType="MA" \
    and ($src/@value="albu-pt1.es.net" or $src/@value="albu-pt1.es.net")   \
    and $eventType="http://ggf.org/ns/nmwg/tools/iperf/2.0" \
    return $metadata/perfsonar:subject/psservice:service
}}}

=== Find all pSB MAs for the community “LHC” ===
==== gLS ====
{{{
declare namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"; \
declare namespace perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/"; \
declare namespace psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/"; \
declare namespace summary="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/summarization/2.0/"; \
for $metadata in /nmwg:store[@type="LSStore"]/nmwg:metadata \
    let $metadata_id := $metadata/@id   \
    let $data := /nmwg:store[@type="LSStore"]/nmwg:data[@metadataIdRef=$metadata_id] \
    let $keyword := $data/nmwg:metadata/summary:parameters/nmwg:parameter[@name="keyword"]  \
    where ($metadata/perfsonar:subject/psservice:service/psservice:serviceType="ls" or  \
    $metadata/perfsonar:subject/psservice:service/psservice:serviceType="hLS") and $keyword/@value="project:LHC"  \
    return $metadata/perfsonar:subject/psservice:service/psservice:accessPoint
}}}
==== hLS ====
{{{
declare namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"; \
declare namespace perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/"; \
declare namespace psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/"; \
declare namespace nmtb="http://ogf.org/schema/network/base/20070828/"; \
for $metadata in /nmwg:store[@type="LSStore"]/nmwg:metadata \
    let $metadata_id := $metadata/@id   \
    let $data := /nmwg:store[@type="LSStore"]/nmwg:data[@metadataIdRef=$metadata_id] \
    let $keyword := $data/nmwg:metadata/nmwg:parameters/nmwg:parameter[@name="keyword"] \
    where $metadata/perfsonar:subject/psservice:service/psservice:serviceType="MA" and $keyword="project:LHC" \
    return $metadata/perfsonar:subject/psservice:service
}}}