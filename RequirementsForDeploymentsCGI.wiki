= Deployment CGI Requirements =

 * [RequirementsForDeploymentsCGI#Introduction Introduction]
 * [RequirementsForDeploymentsCGI#Current_Status Current Status]
 * [RequirementsForDeploymentsCGI#Open_Issues Open Issues] 
 * [RequirementsForDeploymentsCGI#Proposed_CGI_Types Proposed CGI Types]
   * [RequirementsForDeploymentsCGI#Developer_Centric Developer Centric]
   * [RequirementsForDeploymentsCGI#User_Centric User Centric]
 * [RequirementsForDeploymentsCGI#Technology_Considerations Technology Considerations]     
 
== Introduction ==

The purpose of the perfSONAR information services is to locate performance data
that is of interest to a specific user or group.  The data can be _interesting_
to these parties for any number of reasons:

 * The data is of a certain _*type*_: network latency between points or perhaps aggregate CPU load of a cluster
 * The data is at or near a certain location: this can be tracked via IP address or domain name
 * The data is categorized in some way: it was collected via a specific scientific experiment

GUIs can offer a visual representation of this data and are more pleasing to end
users than programmatic APIs that scientific tools may use.  It is the goal of the
perfSONAR-PS project to provide simple and effective GUIs that appeal to different
user types and accomplish specific goals.  This document discusses the current
state of GUI development and lays out some goals for future development.

== Current Status == 

Working under the name _perfAdmin_, the various CGI scripts are available in the
[http://anonsvn.internet2.edu/svn/perfSONAR-PS/trunk/client/cgi/perfAdmin/ perfSONAR-PS SVN repository]
and can be easily installed at any site.  All instances of the NPToolkit
contain a pre-configured copy of this package as well.  

The [http://www.perfsonar.net perfSONAR web site] will always maintain a link to
a current deployment, although the deployment location itself may change.  This
link can be found here: http://www.perfsonar.net/deploy.html.  

A current beta of perfAdmin is also available here in two views:

 * [https://dc211.internet2.edu/cgi-bin/perfAdmin/directory.cgi Directory] view
   * Useful for determining what services are available of a given type
   * Not all types are supported currently
 * [https://dc211.internet2.edu/cgi-bin/perfAdmin/directory.cgi Tree] view
   * Useful for seeing a breakdown of services by gLS and hLS they are registered with
   * Not all types are supported currently

The current GUIs are very _developer centric_, meaning that these were designed
to offer the developers of the various servies a _no-nonsense_ view of the
Information services at any given time and to validate that a given service
has registered itself, and any information it contains, correctly.  While useful
for developers, this does not offer much for the experienced or new user.  

== Open Issues == 

Discussion has identified some of the weak areas with the current approach:

 * Not targeted at a specific user community/group
   * This causes _information overload_ in some respects since everything is on a single view
   * This also causes _information blackout_ when other types of information are not represented properly
 * Technology Limited
   * Using CGI we don't get a very _sexy_ appearance, changing to more web friendly tools may rectify this
 * Often appear _*broken*_ due to some data being old (e.g. NDT tests that don't work, data sets that do not produce graphs since they haven't been updated in a long time)
 * Often only feature US services (not EU based).  This can be attributed to the US services being more widely deployed and capable of interacting with the Information Services.   

It is proposed that we offer different _views_ depending on level of experience or
interest:

 * High Level _availability_ - The 'type' of display can vary of course, but the general idea is to show the general deployment at a very high (e.g. CEO, PR person) view.  May not want to include data views or live tests at this level.
   * Maps - Display _where_ things are located.  Could be categroized by types (or just that it is a perfSONAR capable location) or communities of users.  
   * Lists - Similar to maps, but _spreadsheet-like_ listings of deployments.  
 * Direct users - Can be similar layout to above, but more focused on the data (since they are probably intereseted in that)  
 * Developer View - More focused on the content of a service; easy to verify that the service itself is working correctly.

The current GUIs also do not offer many features beyond the data that is registered
into the Information Services.  Using other components of the perfSONAR framework we
can locate and augment this simple info.  An often talked about list of enhancements
to the existing GUIs contains:

 * *Service Registration Times* - these are normally understood to be when the service last registered with the hLS
 * *Data Availability Times* - Knowledge of when the last time a specific data set (e.g. SNMP data for a router interface or the last time an iperf test was available) was updated.  Can be used to filter out 'historic' data from something more recent
 * *Service or Data Stitching* - Link together data types of interest for _close_ deployments; correlate different types of data, etc.
 * *Reachability* - Due to network partitions or other AA issues a service that registers it's availability may not be reachable from certain parts of the network.  Being able to display this would be helpful, although difficult
 * *Sortability* - Re-arrange the given listing by deployment/service domain or other criteria (e.g. data type, data longevity or availability, etc.)
 * *Documentation* - Provide _help_esq links that take users to API links, or other GUIs.   
 
While not all of these are possible in the short term (or even possible _at all_)
the following sections will organize the plan for GUI enahancement.  

== Proposed CGI Types == 

The short term plan is to offer two categories of GUIs to fit different user needs:

 * [RequirementsForDeploymentsCGI#Developer_Centric Developer Centric] - Will be included on NPToolkit deployments and linked to developer focused wiki and web pages
 * [RequirementsForDeploymentsCGI#User_Centric User Centric] - Will be aimed at the higher _PR_ view and can be linked off of major perfSONAR and partner pages

Over time these will devolve into sub groups by GUI type and evolve into other user classes that focus on other needs.  

=== Developer Centric ===

 * Will remain similar to current offerings - focused on delivering service specific information that benefits developers when verifying a service deployement (e.g. it has registered, it has active data, etc.)
 * Should be able to categorize/sort (live?) on different fields:
   * Group by Country/Network Location
   * Group by _keyword_
   * Group by Data Type
 * Should have the ability to test/view live data
   * This can be similar to current graphs
   * This can also be links to download perfSONAR-UI or similar tools that are more focused on data display than simple web graphs
 * Will require updates to basic information
   * Include registration/data freshness times (where applicable)
   * Display *all* useful info from service metadata block
 * Add more eventTypes according to [http://wiki.perfsonar.net/jra1-wiki/index.php/EventType_Use_By_Service this] list.
   
=== User Centric ===

 * Focus less on the _data availability_ and more on the _what_ and _where_ of the services:
   * Who is running it (location + contact info)
   * Where it is located (either geographically or written in text)
   * What services are available on a site by site basis (e.g. don't have 4 entries for School X, just note that School X is capable in a single entry and perhaps a drop down of what is available)
   * Avoid test pages or graphs
 * Use Map views where appliable instead of lists
 * Filter out the content _bad_ services may register
 * Use more up to date web tools beyond simple text (e.g. this is a _PR_ view, it should showcase things nicely)
 * Is useful to users trying to troubleshoot their link, as described here: http://fasterdata.es.net/ts_overview.html

== Technology Considerations ==   

Currently we use:

 * Perl
 * HTML Templates
 * Google API for Graphs
 
It would be nice to consider:

 * AJAXy things beyond what we have now
 * Flash (or the Open Source equiv.)
 * Java (as long as it doesn't get bloated)
 * Expanded Map API (GMaps, yahoo?) use
 
== Last Updated ==

$Id$