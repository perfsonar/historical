= Universal Data Client  API, Perl =

This package was created for all interested in the universal API for the data requests.
It supports any available MA - *owamp, pinger, bwctl, snmp, traceroute*.
This API eliminates need for any use of the XML in the data requests. The metadata requests are implemented as well for each service but are not exposed.
The API consists of the single class called - Client which instatinates the Client object and passes all service specific parameteres to the particular implementation.
Each service's client is implemented as standalone class and coulde be used separately.
The package exists under the Ecenter namespace since this is the by-product of the Ecenter project.
This distribution is located under the *branches/ecenter_client_api/Shared/client/ecenter*
on the ps-ps SVN repository.

== Usage ==

{{{
 my $client =  Ecenter::Client->new({type=> 'bwctl', 
                                     args => {src_ip => '131.222.232.222',  
                                              dst_ip =>'134.564.232.226'});
  $client->start(time()-1800);
  $client->end(time());
  $client->url('http://psps/services/psb');
  my $data = $client->get_data;
  #
  # or in one command !
  #
  my $data =  Ecenter::Client->new({  type   => 'bwctl',
                                      start  => time() -1800, end => time(), 
                                      url    => 'http://psps/services/pinger_ma'
			              args => { src_ip => '131.222.232.222',
			                        dst_ip =>'134.564.232.226' }
			            })->get_data;
  #
  #  if resolution is set then data points will be refactored to the requested number - 
  #  resolution means number of datapoints to return
  #  Must be set before calling get_data, any other call will refactor results 
  #  only to the smaller number of data points.
  # 
  $client->resolution(20);
  #
  #  data array ref is stored in the data field
  #  
  my $data = $client->data;
}}}

== Parameteres ==

  * _start_ - the starting time, UNIX epoch time for the requested time period
  * _end_ - the ending time, UNIX epoch time for the requested time period
  * _url_ - URL of the remote pS-PS service
  * _type_ - type of the service from the list - _bwctl, pinger, traceroute, owamp, snmp_
  * _resolution_ - how many data points return for the requested time period
  * _args_ - reference to the hash ot passed-through parameters to the specific service

Where all End-2-end services(all except snmp) support: 
 
  * _src_ip_ - source IP address
  * _dst_ip_ - destination IP address
  * _src_name_ - source hostname
  * _dst_name_ - destination hostname
  * _subject_ - subject part of the request as xml snippet 

== Service specific parameters ==

=== PingER MA ===

  * _src_regexp_ - source hostname matching keyword
  * _dst_regexp_ - destination hostname matching keyword
  * _packetsize_ - packet size  - 1000 or 100 ( usually )

=== SNMP MA ===
  * _direction_ - in or out
  * _ifName_ - interface name
  * _ifIndex_ - interface index value
  * _ifAddress_ - interface IP address
  * _hostName_ - device hostname
  * _cf_ - aggregation function - AVERAGE is default 
  
== Data format ==

Any data is returned in the form of the Perl's reference to the array:
{{{
 [
    [ <timestamp>, {<service datum key> => <service datum value>,...,<service datum key> => <service datum value>} ],
 ...
    [ <timestamp>, {<service datum key> => <service datum value>,...,<service datum key> => <service datum value>} ],
 ]
}}}
Where:
  * _timestamp_ - UNIX epoch time
  * _service datum key_ - name of the returned datum - for example utililzation
  * _service datum value_ - actual value of the returned datum

There is no separation by the metadata keys. You have to know what you asking for. The implemented use case is the one where request is sent with the pair of source destination IP addresses or hostnames. For example, you can use src_regexp and dst_regexp in the case of PingER MA but it will return data array for all found metadata.

== API ==

Each service represented by the own class which implemetes remote call to the MA.

  * Ecenter::Data::Owamp 
  * Ecenter::Data::PingER
  * Ecenter::Data::Snmp
  * Ecenter::Data::Traceroute
  * Ecenter::Data::Bwctl

The centrilized class - Ecenter::Client is nothing else but a proxy to each of this implementations. One can create the object of any of those classes and use it directly
to get data from the remote MA. Each class implement the same methods for the dat and
metadata retrieval - get_data and get_metadata. The returned data structure is formatted the same way for every class. There is no need to call *get_metadata* before calling *get_data*, the *get_data* call will call it automatically if metadata is not provided.