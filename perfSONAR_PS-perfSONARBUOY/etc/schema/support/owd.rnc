# ##############################################################
# 
# File:     owd.rnc
#
# Version:  $Id: owd.rnc 359 2008-06-05 15:45:30Z boote $ 
#
# Purpose:  Describes building-blocks used by several of the
#           one-way latency schemas.
#                         
# ##############################################################


namespace nmwg = "http://ggf.org/ns/nmwg/base/2.0/"
namespace owd = "http://ggf.org/ns/nmwg/characteristic/delay/one-way/20070914/"
namespace nmwgr = "http://ggf.org/ns/nmwg/result/2.0/"

include "nmbase.rnc" {
        Metadata |= OWDMetadata
        Data |= OWDData        
} 
include "nmtopo.rnc"
include "nmtopo-l4.rnc"
include "result.rnc"

OWDMetadata = 
        element nmwg:metadata {
                Identifier &
                MetadataIdentifierRef? &
                OWDMetadataContent
        }
          
OWDMetadataBlock = 
        OWDSubject? &
        (
                OWDParameters |
                Parameters
        )?        
        
OWDMetadataContent = 
        (
                OWDMetadataBlock |
                FilterMetadataBlock                
        ) &        
        EventType? &
        Key?        


OWDSubject =
        element owd:subject {
                Identifier &
                MetadataIdentifierRef? &        
                (                   
                        EndpointPair |
                        L4EndpointPair
                )
        }


OWDParameters =
        element owd:parameters {
                Identifier &        
                OWDParameter+
        }
        
#
# appropriate parameters (most taken directly from RFC 4656) are:
# count (number of packets requested to be sent)
# DSCP (RFC 2474 style way to specify TOS bits)
# schedule (can be an array of delays - fixed/exponential the schedule
#       should be repeated until all packets are sent)
# timeout (time to wait before declaring a packet lost seconds, or units?)
# size (packet size - bytes or do we have to mess with units?
#   


OWDParameter = 
        element nmwg:parameter {
            (
                attribute name { "count" | "DSCP" | "timeout" | "size" } &
                (
                        attribute value { xsd:unsignedInt } |
                        xsd:unsignedInt
                )
            ) |
            (
                attribute name { "schedule" } &
                element owd:delayGap {
                    attribute type { "fixed" | "exponential" }
                } +            
            )          
        }

OWDData =
        element nmwg:data {
                Identifier &
                MetadataIdentifierRef? &
                (
                        (
                                Metadata* |
                                OWDMetadata*
                        ) |
                        (
                                OWDDatum* |
                                ResultDatum*
                        ) |
                        Key*
                )
        }


#
# OWDDatum reuses components from nmtime. It specifically uses nmtm:start
# to mean 'sending time' and nmtm:end to mean 'receiving time'.
# packetTTL is the TTL of the packet when it is recieved. This assumes
# that the TTL is initialized to 255 when sent, so the number of hops
# can be determined. (RFC 4645) If the TTL is unavailable, it can
# either be reported as 255, or simply not specified since this has
# been indicated as an optional parameter.
#
OWDDatum =
        element owd:datum {
                (
                    attribute sequenceNumber { xsd:unsignedInt } |
                    element owd:sequenceNumber { xsd:unsignedInt }
                ) &
                StartTime &
                EndTime &
                (
                    attribute packetTTL { xsd:unsignedInt } |
                    element owd:packetTTL { xsd:unsignedInt }
                )?
        }

