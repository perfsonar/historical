<HTML>
<HEAD>
<Title>Discontinuous Lines</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 4.1 (Perl Edition)</p>
<p class="heading1">Discontinuous Lines</p>
<hr class="separator">
<div class="content">
<img src="images/discontline.png">
<br><br>
This example demonstrates using <a href="perlchartdir.NoValue.htm">NoValue</a> to represent lines with missing data points. It also demonstrates vertical zones and custom text boxes.<br><br>
In ChartDirector, a special predefined constant <a href="perlchartdir.NoValue.htm">NoValue</a> is used to denote missing data points. The methods to handle missing data points depend on chart types.<br><br>
For line charts, a <a href="perlchartdir.NoValue.htm">NoValue</a> data point is handled by jumping over it, that is, by connecting the previous data point to the next data point. However, the line color and style for jumping over <a href="perlchartdir.NoValue.htm">NoValue</a> data points can be different from the normal line color. The default is <a href="perlchartdir.Transparent.htm">Transparent</a>, so the jump over line will be invisible. Therefore, a <a href="perlchartdir.NoValue.htm">NoValue</a> point will result in a discontinuous line.<br><br>
You can modify the color and style of the jump over line by using <a href="LineLayer.setGapColor.htm">LineLayer.setGapColor</a>.<br><br>
A common design is to use dash lines as jump over lines. This can be achieved by using dash line colors (created with <a href="BaseChart.dashLineColor.htm">BaseChart.dashLineColor</a>) as jump over line colors.<br><br>
If you want the jump over line to be the same color as the original line, use <a href="perlchartdir.SameAsMainColor.htm">SameAsMainColor</a> as the jump over line color.<br><br>
In this example, there are grey vertical zones on the chart. These are created using <a href="Axis.addZone.htm">Axis.addZone</a>.<br><br>
The custom text boxes that label weeks are created using <a href="BaseChart.addText.htm">BaseChart.addText</a>, with their coordinates are obtained dynamically using <a href="Layer.getXCoor.htm">Layer.getXCoor</a>.<br><br>
Note that <a href="BaseChart.layout.htm">BaseChart.layout</a> needs to be call first to auto-scale and finalize the axes before using <a href="Layer.getXCoor.htm">Layer.getXCoor</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> perldemo\discontline.pl
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/perl
use perlchartdir;

#===================================================================
#    For demo purpose, use random numbers as data for the chart
#===================================================================

# Use a random table to create the data. The random table contains 4 cols x 31 rows,
# using 9 as seed.
my $rantable = new RanTable(9, 4, 31);

# Set the 1st col to be the series 1, 2, 3, ....
$rantable-&gt;setCol(0, 1, 1, 1);

# Set the 2nd, 3rd and 4th col to be random number starting from 40, 50 and 60. The
# change between rows is set to -5 to 5. The minimum value of any cell is 0.
$rantable-&gt;setCol(1, 40, -5, 5, 0);
$rantable-&gt;setCol(2, 50, -5, 5, 0);
$rantable-&gt;setCol(3, 60, -5, 5, 0);

# Use the 1st col as the axis label
my $labels = $rantable-&gt;getCol(0);

# Use the 2nd, 3rd and 4th columns for 3 lines
my $data0 = $rantable-&gt;getCol(1);
my $data1 = $rantable-&gt;getCol(2);
my $data2 = $rantable-&gt;getCol(3);

# Simulate some data points have no data value
for(my $i = 1; $i &lt; 30; $i += 7) {
    $data0-&gt;[$i] = $perlchartdir::NoValue;
    $data1-&gt;[$i] = $perlchartdir::NoValue;
    $data2-&gt;[$i] = $perlchartdir::NoValue;
}

#===================================================================
#    Now we have the data ready. Actually drawing the chart.
#===================================================================

# Create a XYChart object of size 600 x 220 pixels
my $c = new XYChart(600, 220);

# Set the plot area at (100, 25) and of size 450 x 150 pixels. Enabled both vertical
# and horizontal grids by setting their colors to light grey (0xc0c0c0)
$c-&gt;setPlotArea(100, 25, 450, 150)-&gt;setGridColor(0xc0c0c0, 0xc0c0c0);

# Add a legend box (92, 0) (top of plot area) using horizontal layout. Use 8 pts
# Arial font. Disable bounding box (set border to transparent).
$c-&gt;addLegend(92, 0, 0, "", 8)-&gt;setBackground($perlchartdir::Transparent);

# Add a title to the y axis. Draw the title upright (font angle = 0)
$c-&gt;yAxis()-&gt;setTitle("Average\nUtilization\n(MBytes)")-&gt;setFontAngle(0);

# Use manually scaling of y axis from 0 to 100, with ticks every 10 units
$c-&gt;yAxis()-&gt;setLinearScale(0, 100, 10);

# Set the labels on the x axis
$c-&gt;xAxis()-&gt;setLabels2($labels);

# Set the title on the x axis
$c-&gt;xAxis()-&gt;setTitle("Jun - 2001");

# Add x axis (vertical) zones to indicate Saturdays and Sundays
for(my $i = 0; $i &lt; 29; $i += 7) {
    $c-&gt;xAxis()-&gt;addZone($i, $i + 2, 0xc0c0c0);
}

# Add a line layer to the chart
my $layer = $c-&gt;addLineLayer();

# Set the default line width to 2 pixels
$layer-&gt;setLineWidth(2);

# Add the three data sets to the line layer
$layer-&gt;addDataSet($data0, 0xcf4040, "Server #1");
$layer-&gt;addDataSet($data1, 0x40cf40, "Server #2");
$layer-&gt;addDataSet($data2, 0x4040cf, "Server #3");

# Layout the chart to fix the y axis scaling. We can then use getXCoor and getYCoor
# to determine the position of custom objects.
$c-&gt;layout();

# Add the "week n" custom text boxes at the top of the plot area.
for(my $i = 0; $i &lt; 4; ++$i) {
    # Add the "week n" text box using 8 pt Arial font with top center alignment.
    my $textbox = $c-&gt;addText($layer-&gt;getXCoor($i * 7 + 2), 25, "Week $i",
        "arialbd.ttf", 8, 0x000000, $perlchartdir::TopCenter);

    # Set the box width to cover five days
    $textbox-&gt;setSize($layer-&gt;getXCoor($i * 7 + 7) - $layer-&gt;getXCoor($i * 7 + 2) +
        1, 0);

    # Set box background to pale yellow 0xffff80, with a 1 pixel 3D border
    $textbox-&gt;setBackground(0xffff80, $perlchartdir::Transparent, 1);
}

# output the chart
$c-&gt;makeChart("discontline.png")</pre></tr></td></table><br><b>[CGI Version]</b> perldemo_cgi\discontline.pl
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/perl

# Include current script directory in the module path (needed on Microsoft IIS).
# This allows this script to work by copying ChartDirector to the same directory
# as the script (as an alternative to installation in Perl module directory)
use File::Basename;
use lib dirname($0);

use perlchartdir;

#===================================================================
#    For demo purpose, use random numbers as data for the chart
#===================================================================

# Use a random table to create the data. The random table contains 4 cols x 31 rows,
# using 9 as seed.
my $rantable = new RanTable(9, 4, 31);

# Set the 1st col to be the series 1, 2, 3, ....
$rantable-&gt;setCol(0, 1, 1, 1);

# Set the 2nd, 3rd and 4th col to be random number starting from 40, 50 and 60. The
# change between rows is set to -5 to 5. The minimum value of any cell is 0.
$rantable-&gt;setCol(1, 40, -5, 5, 0);
$rantable-&gt;setCol(2, 50, -5, 5, 0);
$rantable-&gt;setCol(3, 60, -5, 5, 0);

# Use the 1st col as the axis label
my $labels = $rantable-&gt;getCol(0);

# Use the 2nd, 3rd and 4th columns for 3 lines
my $data0 = $rantable-&gt;getCol(1);
my $data1 = $rantable-&gt;getCol(2);
my $data2 = $rantable-&gt;getCol(3);

# Simulate some data points have no data value
for(my $i = 1; $i &lt; 30; $i += 7) {
    $data0-&gt;[$i] = $perlchartdir::NoValue;
    $data1-&gt;[$i] = $perlchartdir::NoValue;
    $data2-&gt;[$i] = $perlchartdir::NoValue;
}

#===================================================================
#    Now we have the data ready. Actually drawing the chart.
#===================================================================

# Create a XYChart object of size 600 x 220 pixels
my $c = new XYChart(600, 220);

# Set the plot area at (100, 25) and of size 450 x 150 pixels. Enabled both vertical
# and horizontal grids by setting their colors to light grey (0xc0c0c0)
$c-&gt;setPlotArea(100, 25, 450, 150)-&gt;setGridColor(0xc0c0c0, 0xc0c0c0);

# Add a legend box (92, 0) (top of plot area) using horizontal layout. Use 8 pts
# Arial font. Disable bounding box (set border to transparent).
$c-&gt;addLegend(92, 0, 0, "", 8)-&gt;setBackground($perlchartdir::Transparent);

# Add a title to the y axis. Draw the title upright (font angle = 0)
$c-&gt;yAxis()-&gt;setTitle("Average\nUtilization\n(MBytes)")-&gt;setFontAngle(0);

# Use manually scaling of y axis from 0 to 100, with ticks every 10 units
$c-&gt;yAxis()-&gt;setLinearScale(0, 100, 10);

# Set the labels on the x axis
$c-&gt;xAxis()-&gt;setLabels2($labels);

# Set the title on the x axis
$c-&gt;xAxis()-&gt;setTitle("Jun - 2001");

# Add x axis (vertical) zones to indicate Saturdays and Sundays
for(my $i = 0; $i &lt; 29; $i += 7) {
    $c-&gt;xAxis()-&gt;addZone($i, $i + 2, 0xc0c0c0);
}

# Add a line layer to the chart
my $layer = $c-&gt;addLineLayer();

# Set the default line width to 2 pixels
$layer-&gt;setLineWidth(2);

# Add the three data sets to the line layer
$layer-&gt;addDataSet($data0, 0xcf4040, "Server #1");
$layer-&gt;addDataSet($data1, 0x40cf40, "Server #2");
$layer-&gt;addDataSet($data2, 0x4040cf, "Server #3");

# Layout the chart to fix the y axis scaling. We can then use getXCoor and getYCoor
# to determine the position of custom objects.
$c-&gt;layout();

# Add the "week n" custom text boxes at the top of the plot area.
for(my $i = 0; $i &lt; 4; ++$i) {
    # Add the "week n" text box using 8 pt Arial font with top center alignment.
    my $textbox = $c-&gt;addText($layer-&gt;getXCoor($i * 7 + 2), 25, "Week $i",
        "arialbd.ttf", 8, 0x000000, $perlchartdir::TopCenter);

    # Set the box width to cover five days
    $textbox-&gt;setSize($layer-&gt;getXCoor($i * 7 + 7) - $layer-&gt;getXCoor($i * 7 + 2) +
        1, 0);

    # Set box background to pale yellow 0xffff80, with a 1 pixel 3D border
    $textbox-&gt;setBackground(0xffff80, $perlchartdir::Transparent, 1);
}

# output the chart
binmode(STDOUT);
print "Content-type: image/png\n\n";
print $c-&gt;makeChart2($perlchartdir::PNG);</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
