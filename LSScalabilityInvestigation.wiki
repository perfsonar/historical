#summary Report on Lookup Service Scalability Investigation

= perfSONAR Lookup Service (LS) Scalability Tests =

<wiki:toc max_depth="6">
      
== Current Issues to Investigate in gLS/hLS Services ==

 *  Unknown scalability limits
 *  Unknown data consistency
 *  Failure modes are obscure and hard to debug
 *  Sometimes hLS registers empty summary data
 *  Possible XMLDB locking issues
 *  Behavior when using different values in configuration key "`ls_registration_interval`"
 *  Behavior when using different values in configuration key "`maintenance_interval`"


== Proposed Tests ==

 *  Use `ls_registration_daemon` to temporarily register 'fake services'.  Jason has a service emulator [http://anonsvn.internet2.edu/svn/perfSONAR-PS/trunk/Shared/client/fakeService/ FakeService] that should help.
 *  Set up a test gLS and hLS, and then play with Jason's "!FakeService" tool to see when and how things break.
 *  Query the gLS and verify that everything what was registered is returned in the query. 
  *  perfSONAR_PS-perfAdmin/cgi-bin/view.cgi is a program that provides an example of how to query an hLS.  Use, for instance: http://dc211.internet2.edu/cgi-bin/pA/view.cgi?hls=http://ps-bw.es.net:8095/perfSONAR_PS/services/hLS
  *  Also useful:  `perfSONAR_PS-perfAdmin/bin/cache.pl`
  *  For perl client, use examples in etc/requests.  Consult design [http://anonsvn.internet2.edu/svn/nmwg/trunk/nmwg/doc/dLS/gLS/phase_1_color.html document] for information on how to form the queries and use the eventTypes of the service.
  *  For python, there is a wrapper for the generic perl client (`Shared/client/client.pl`) at:  `test_harness/test_PS.py` 
 *  Deploy the !FakeService on 50 ESnet hosts and see what happens.
 
== How to Query an LS ==

The base document, where the raw XML queries are described, is at http://anonsvn.internet2.edu/svn/nmwg/trunk/nmwg/doc/dLS/gLS/phase_1_color.html.

Perl libraries for each LS:
 * gLS:  http://anonsvn.internet2.edu/svn/perfSONAR-PS/trunk/Shared/lib/perfSONAR_PS/Client/gLS.pm
 * LS (works for gLS and hLS):  http://anonsvn.internet2.edu/svn/perfSONAR-PS/trunk/Shared/lib/perfSONAR_PS/Client/LS.pm

Example requests:
 * http://anonsvn.internet2.edu/svn/perfSONAR-PS/trunk/perfSONAR_PS-LookupService/etc/requests/

CGI script for dumping the contents of a gLS or hLS, usable from a web browser:
 * This one is querying a gLS at `ale.damsl.cis.udel.edu:7000`.  To query any hLS/gLS, change the info after `view.cgi?hls=`:
  * http://dc211.internet2.edu/cgi-bin/pA/view.cgi?hls=http://ale.damsl.cis.udel.edu:7000/perfSONAR_PS/services/gLS
 * To query `moonshine` hLS:
  * http://dc211.internet2.edu/cgi-bin/pA/view.cgi?hls=http://moonshine.damsl.cis.udel.edu:7000/perfSONAR_PS/services/hLS
 * Source for the CGI script:  http://anonsvn.internet2.edu/svn/perfSONAR-PS/trunk/perfSONAR_PS-perfAdmin/cgi-bin/view.cgi
 
Command line Perl client:
 * http://anonsvn.internet2.edu/svn/perfSONAR-PS/trunk/Shared/client/client.pl

 
== Testbed ==

Current testbed is depicted in the following figure, and further described below:

http://perfsonar-ps.googlecode.com/svn/wiki/LSScalabilityInvestigation/testbed.png


 * University of Delaware's Distributed and Meta-Systems Lab (DAMSL) servers:
  * _ale_.damsl.cis.udel.edu
   * Services:
   * gLS, port 7000.  Access point:   http://ale.damsl.cis.udel.edu:7000/perfSONAR_PS/services/gLS.  conf.daemon:  [LSScalabilityInvestigation#daemon.conf_file_for_ale]
   * fakeServices registering to _moonshine_ (from 1 to 50 fakeServices)
  * _moonshine_.damsl.cis.udel.edu
   * hLS, port 7000.  Access point:   http://moonshine.damsl.cis.udel.edu:7000/perfSONAR_PS/services/hLS.  conf.daemon:  [LSScalabilityInvestigation#daemon.conf_file_for_moonshine]
  * _stout_.damsl.cis.udel.edu
   * gLS 'cloud', i.e., a new hints file.  Access:  http://stout.damsl.cis.udel.edu/gls.root.hints
	
 * !PlanetLab virtual servers:
  * node planetlab2.cis.upenn.edu
   * hLS, port 9995.  Access point:   http://planetlab2.cis.upenn.edu:9995/perfSONAR_PS/services/hLS.  conf.daemon:  [LSScalabilityInvestigation#daemon.conf_file_for_planetlab2.cis.upenn.edu]
   * fakeServices registering to _planetlab2.cis.upenn.edu_
  * node planetlab2.cs.columbia.edu
   * gLS, port 9995.  Access point:   http://planetlab2.cs.columbia.edu:9995/perfSONAR_PS/services/gLS.  conf.daemon:  [LSScalabilityInvestigation#daemon.conf_file_for_planetlab2.cs.columbia.edu]
  * node plink.cs.uwaterloo.ca
   * gLS, port 9995.  Access point:   http://plink.cs.uwaterloo.ca:9995/perfSONAR_PS/services/gLS.  conf.daemon:  [LSScalabilityInvestigation#daemon.conf_file_for_plink.cs.uwaterloo.ca]
  * node onelab-1.fhi-fokus.de
   * hLS, port 9995.  Access point:   http://onelab-1.fhi-fokus.de:9995/perfSONAR_PS/services/hLS.  conf.daemon:  [LSScalabilityInvestigation#daemon.conf_file_for_onelab-1.fhi-fokus.de]
  * node plonk.cs.uwaterloo.ca
   * Lookup Service installed, but this node will run fakeServices only.
  * node cs-planetlab3.cs.surrey.sfu.ca
   * Lookup Service installed. but this node will run fakeServices only.
  * node cs-planetlab4.cs.surrey.sfu.ca
   * Lookup Service installed. but this node will run fakeServices only.
  * node pl1.bit.uoit.ca
   * Lookup Service installed. but this node will run fakeServices only.
  * node pl1.csl.utoronto.ca
   * Lookup Service installed. but this node will run fakeServices only.
  * node pl1.rcc.uottawa.ca
   * Lookup Service installed. but this node will run fakeServices only.
  
   
 *  After initial setup and testing:
  *  Install a total of 2 - 3 gLSs:  one at UDel, one at LBL, one somewhere else (could be UDel/LBL, or one in Ann Arbor).
  *  Install at least 3 hLS and probably more.
  *  Coordinate deployment of !FakeService on ESnet hosts on additional LSs.
 

== Report on Installation ==

=== Note ===

To obtain the current OS version, type:

 `cat /etc/issue`

and/or

 `uname -a`

=== Instructions:  Sources ===

Using these sources for instructions on installation and configuration:

 http://code.google.com/p/perfsonar-ps/wiki/LS
 
 http://www.internet2.edu/performance/pS-PS/lookup.html


=== Preparing Server stout ===

_stout_ will act as a web server providing the gLS 'cloud', i.e., a list of gLS servers that will form the Lookup Service
gLS network.  This list, a common text file, forms a hints file named `gls.root.hints`.  The default hints file is currently http://dc211.internet2.edu/gls.root.hints.

We make a new hints file that includes the gLS instances created for this testing, and place it on _stout_'s web server
(/var/www/external).  The contents of the file will be:

{{{
  http://ale.damsl.cis.udel.edu:7000/perfSONAR_PS/services/gLS
}}}

The URL for accessing the file, thus, is http://stout.damsl.cis.udel.edu/gls.root.hints .

 
=== Installing gLS on Server ale ===

==== Background ====

This server _ale_ is Fedora Core release 4 (Stentz), linux core 2.6.17-1.2142_FC4smp.  There is already a Lookup Service
installed and running on this server.


==== Attempt 1 (ale) ====

Checked out perfSONAR repository into home directory (must have permission):

 `svn co https://svn.internet2.edu/svn/perfSONAR-PS/`

In perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-!LookupService, must now run
 
{{{
cd perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService
sudo make install
cd scripts
sudo ./install_dependencies.sh
sudo ./prepare_environment.sh
}}}

After `sudo ./install_dependencies.sh` command, got the following error message:

{{{
running xml2-config...failed
The installed version of libxml2 not compatible with XML::LibXML.

You may continue at your own risk, but:

  - don't expect XML::LibXML to build or work correctly!
  - don't report errors!
  - don't send patches!

Check the README file for more information on versions
that are tested with XML::LibXML

  PAJAS/XML-LibXML-1.69.tar.gz
  /usr/local/bin/perl Makefile.PL -- NO Makefile created
Running make test
  Make had some problems, won't test
Running make install
  Make had some problems, won't install
}}}

This suggests problems with the current version of `libxml2` installed on _ale_.

	 <strong><font color="red">Note:  For <i>ale</i>, there is not much that can be done about this error.
 XML::LibXML is designed to work with only certain versions of libxml2, it has explicit entries in the module
 makefile because of this.  Checking libxml version numbers at <i>ale</i>:

	{{{
	$ rpm -qa | grep xml
	libxml-devel-1.8.17-13
	libxml-1.8.17-13
	libxml2-2.6.20-1.FC4
	libxml2-python-2.6.20-1.FC4
	libxml2-devel-2.6.20-1.FC4
	perl-libxml-perl-0.08-1
	dbxml-2.3.10-2
	}}}

	The libxml2 version is 'recent' enough, just not what the latest XML::LibXML wants to see.  Now, entering the
 CPAN shell:

	  `perl -MCPAN -e shell`

	Then running this command:

	  `cpan[2]> m XML::LibXML`

	Yields:

	{{{
	Going to write /home/mportnoi/.cpan/Metadata
	Module id = XML::LibXML
		DESCRIPTION  Interface to the libxml library
		CPAN_USERID  PHISH (Christian Glahn <phish@cpan.org>)
		CPAN_VERSION 1.69
		CPAN_FILE    P/PA/PAJAS/XML-LibXML-1.69.tar.gz
		DSLIP_STATUS RmhOp (released,mailing-list,hybrid,object-oriented,Standard-Perl)
		MANPAGE      XML::LibXML - Perl Binding for libxml2
		INST_FILE    /usr/local/lib/perl5/site_perl/5.8.8/i686-linux/XML/LibXML.pm
		INST_VERSION 1.66
	}}}

	The installed version of LibXML is 1.66, which is new enough for the current purposes.</font></strong>
 


The next installation command, `sudo ./prepare_environment.sh`, does not report anything, which is suspicious and
corroborates that the environment must not be healthy.

Trying to start the Lookup Service (`sudo /etc/init.d/lookup_service start`) yields the following error.

{{{
/opt/perfsonar_ps/lookup_service/bin/daemon.pl --config=/opt/perfsonar_ps/lookup_service/etc/daemon.conf 
 --pidfile=lookup_service.pid --piddir=/var/run --logger=/opt/perfsonar_ps/lookup_service/etc/daemon_logger.conf --user=
 perfsonar --group=perfsonar
Can't locate Data/UUID.pm in @INC (@INC contains: /opt/perfsonar_ps/lookup_service/bin/../lib  ./lib ../lib
 /usr/lib/perl5/site_perl/5.8.6/i386-linux-thread-multi /usr/lib/perl5/site_perl/5.8.5/i386-linux-thread-multi
 /usr/lib/perl5/site_perl/5.8.4/i386-linux-thread-multi /usr/lib/perl5/site_perl/5.8.3/i386-linux-thread-multi
 /usr/lib/perl5/site_perl/5.8.6 /usr/lib/perl5/site_perl/5.8.5 /usr/lib/perl5/site_perl/5.8.4
 /usr/lib/perl5/site_perl/5.8.3 /usr/lib/perl5/site_perl /usr/lib/perl5/vendor_perl/5.8.6/i386-linux-thread-multi
 /usr/lib/perl5/vendor_perl/5.8.5/i386-linux-thread-multi /usr/lib/perl5/vendor_perl/5.8.4/i386-linux-thread-multi
 /usr/lib/perl5/vendor_perl/5.8.3/i386-linux-thread-multi /usr/lib/perl5/vendor_perl/5.8.6
 /usr/lib/perl5/vendor_perl/5.8.5 /usr/lib/perl5/vendor_perl/5.8.4 /usr/lib/perl5/vendor_perl/5.8.3
 /usr/lib/perl5/vendor_perl /usr/lib/perl5/5.8.6/i386-linux-thread-multi /usr/lib/perl5/5.8.6 . ./lib
 ../lib/5.8.6/i386-linux-thread-multi ./lib ../lib/5.8.6 ./lib ../lib/i386-linux-thread-multi ./lib
 ../lib/5.8.5 ./lib ../lib/5.8.4 ./lib ../lib/5.8.3 ./lib ../lib) at /opt/perfsonar_ps/lookup_service/bin/..
 /lib/perfSONAR_PS/Utils/NetLogger.pm line 28.
BEGIN failed--compilation aborted at /opt/perfsonar_ps/lookup_service/bin/../lib/perfSONAR_PS/Utils/NetLogger.pm
 line 28.
Compilation failed in require at /opt/perfsonar_ps/lookup_service/bin/../lib/perfSONAR_PS/Request.pm line 28.
BEGIN failed--compilation aborted at /opt/perfsonar_ps/lookup_service/bin/../lib/perfSONAR_PS/Request.pm line 28.
Compilation failed in require at /opt/perfsonar_ps/lookup_service/bin/daemon.pl line 84.
BEGIN failed--compilation aborted at /opt/perfsonar_ps/lookup_service/bin/daemon.pl line 84.
./lookup_service start: perfSONAR Lookup Service could not be started
}}}

Clearly, `libxml2` must be updated on _ale_ prior to installing the LS service.  <i><strong><font color="red">
(This assumption is actually inaccurate.  As pointed out by Jason Zurawski, the error message states
</font><font color="purple">Can't locate Data/UUID.pm</font><font color="red">, a Perl problem.  The misplaced
attempt to solve libxml2 will be maintained here as reference, but the correct solution can be followed through
the next section [LSScalabilityInvestigation#Attempt_2].</font></strong></i>

Trying now to update libxml2 using the _yum_ tool for Fedora:

 `sudo yum update libxml2`

Here's the new error.

{{{
Setting up Update Process
Setting up repositories
updates-released          100% |=========================|  951 B    00:00     
vlc                       100% |=========================|  951 B    00:00     
vlc-contrib               100% |=========================|  951 B    00:00     
http://192.168.0.1/yum/4/extras/i386/repodata/repomd.xml: [Errno 4] IOError: HTTP Error 404: Date: Thu, 20 Aug 2009
 23:59:02 GMT
Server: Apache/2.0.54 (Fedora)
Content-Length: 312
Connection: close
Content-Type: text/html; charset=iso-8859-1
Trying other mirror.
Cannot open/read repomd.xml file for repository: extras
failure: repodata/repomd.xml from extras: [Errno 256] No more mirrors to try.
Error: failure: repodata/repomd.xml from extras: [Errno 256] No more mirrors to try.
}}}

The _yum_ tool failed, probably due to a missing `repomd.xml` file (as hinted by the error message), or because there
are insufficient mirror sites listed somewhere.  Now, we need to find out how to fix this by surveying _yum_ sites.

From the error message, the URL used to access the file `repomd.xml` seems weird (192.168.0.1, which is a local address).

The directory `/etc/yum.repos.d` contains the configuration files _yum_ uses to access mirror sites for repositories.
The listing is:

{{{
fedora-devel.repo         fedora.repo                  vlc-contrib.repo
fedora-extras-devel.repo  fedora-updates.repo          vlc.repo
fedora-extras.repo        fedora-updates-testing.repo
}}}

Several of these files contain a reference to the address 192.168.0.1, such as the file `fedora-extras.repo`:

{{{
[extras]
name=Fedora Extras $releasever - $basearch
baseurl=http://192.168.0.1/yum/$releasever/extras/$basearch/
#mirrorlist=http://fedora.redhat.com/download/mirrors/fedora-extras-$releasever
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-extras
gpgcheck=1
}}}

Searching for information on https://fedoraproject.org/wiki/Yum, as of August 20, 2009, at 20:29h EDT (8:29pm EDT),
we are welcomed with an empty page with *Yum* written as title.

Searching a bit more aggressively yields the page https://fedoraproject.org/wiki/Extras/Mirrors, where several mirror
sites are listed for the _extras_ files.  Now, we need to find mirrors for the other files.

More research produces the URL http://download.fedora.redhat.com/pub/fedora/linux/extras/.  But the subdirectory for
Fedora 4 is no longer available under this address.  A README file in this location states that this Fedora version is
not maintained (since the current version is Fedora 11).  `libxml2` has to be updated manually.  Turned to 
http://xmlsoft.org/ for more details on how to do this.

Downloaded the following files in attempt to update libxml2:

 `libxml2-2.7.3-1.x86_64.rpm`

 `libxml2-devel-2.7.3-1.x86_64.rpm`
 
Running a check before attempting any update:

 `rpm -F --test libxml2-2.7.3-1.x86_64.rpm`
 
We get the dependency errors:

{{{
warning: libxml2-2.7.3-1.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID de95bc1f
error: Failed dependencies:
        libc.so.6()(64bit) is needed by libxml2-2.7.3-1.x86_64
        libc.so.6(GLIBC_2.2.5)(64bit) is needed by libxml2-2.7.3-1.x86_64
        libc.so.6(GLIBC_2.3)(64bit) is needed by libxml2-2.7.3-1.x86_64
        libc.so.6(GLIBC_2.3.2)(64bit) is needed by libxml2-2.7.3-1.x86_64
        libc.so.6(GLIBC_2.3.4)(64bit) is needed by libxml2-2.7.3-1.x86_64
        libc.so.6(GLIBC_2.4)(64bit) is needed by libxml2-2.7.3-1.x86_64
        libdl.so.2()(64bit) is needed by libxml2-2.7.3-1.x86_64
        libdl.so.2(GLIBC_2.2.5)(64bit) is needed by libxml2-2.7.3-1.x86_64
        libm.so.6()(64bit) is needed by libxml2-2.7.3-1.x86_64
        libm.so.6(GLIBC_2.2.5)(64bit) is needed by libxml2-2.7.3-1.x86_64
        libz.so.1()(64bit) is needed by libxml2-2.7.3-1.x86_64
        rtld(GNU_HASH) is needed by libxml2-2.7.3-1.x86_64
        libxml2.so.2 is needed by (installed) perl-XML-LibXML-Common-0.13-8.i386
        libxml2.so.2 is needed by (installed) perl-XML-LibXML-1.58-2.i386
        libxml2.so.2 is needed by (installed) libxml2-python-2.6.20-1.FC4.i386
        libxml2.so.2 is needed by (installed) shared-mime-info-0.16-3.i386
        libxml2.so.2 is needed by (installed) GConf2-2.10.0-4.i386
        libxml2.so.2 is needed by (installed) libbonobo-2.8.1-1.i386
        libxml2.so.2 is needed by (installed) gnome-vfs2-2.10.0-5.i386
        libxml2.so.2 is needed by (installed) libglade2-2.5.1-2.i386
        libxml2.so.2 is needed by (installed) libgnomecanvas-2.10.0-1.i386
        libxml2.so.2 is needed by (installed) libxslt-1.1.14-2.i386
        libxml2.so.2 is needed by (installed) libbonoboui-2.8.1-4.i386
        libxml2.so.2 is needed by (installed) libgnomeui-2.10.0-1.i386
        libxml2.so.2 is needed by (installed) firefox-1.0.8-1.1.fc4.i386
        libxml2.so.2 is needed by (installed) apt-0.5.15lorg3.2-9.fc4.i386
        libxml2.so.2 is needed by (installed) libcroco-0.6.0-5.i386
        libxml2.so.2 is needed by (installed) libgsf-1.11.1-2.i386
        libxml2.so.2 is needed by (installed) libgnomeprint22-2.10.3-1.i386
        libxml2.so.2 is needed by (installed) libgnomeprintui22-2.10.1-1.i386
        libxml2.so.2 is needed by (installed) librsvg2-2.9.5-2.i386
        libxml2.so.2 is needed by (installed) vlc-0.8.5-1.i386
        libxml2 = 2.6.20 is needed by (installed) libxml2-python-2.6.20-1.FC4.i386
        libxml2 = 2.6.20 is needed by (installed) libxml2-devel-2.6.20-1.FC4.i386
}}}

Stuck at this point.  Too many dependencies to resolve in a system.  Let's continue through another venue below, since
it was pointed by Jason Zurawski that the installation problem does not reside specifically in libxml2, but in Perl's
Data/UUID.pm.


==== Attempt 2 (ale) ====

Detected that Perl's Data/UUID.pm is generating the installation problem.  Let us try a different install approach, per
instructed by Jason.

First, checkout or update the SVN repository.

 `svn co https://svn.internet2.edu/svn/perfSONAR-PS/`
 
The Makefile at `perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService`, as well as the installation scripts
(`install_dependencies.sh` and `prepare_environment.sh`) and `lookup_service` start/stop scripts at directory `scripts`
all consider that the Lookup Service will be installed at `/opt/perfsonar_ps`.  If this is not desirable, these files
can be altered to reflect the new install directory.  But, in this attempt, we will not run the install scripts, also
considering that there is already a Lookup Service running on _ale_.  We will run the LS directly from the checked out
repository directory.

To facilitate starting and stopping the service, let us edit the `lookup_service` start/stop script at `scripts`.
Basically, we need to change the variable `PREFIX` to reflect the correct directory.  Thus, we edit as follows:

{{{
#!/bin/bash
#
# Init file for perfSONAR Lookup Service
#
# chkconfig: 2345 60 20
# description: perfSONAR Lookup Service
#

PREFIX=/home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService
#PREFIX=/opt/perfsonar_ps/lookup_service
BINDIR=${PREFIX}/bin
...
}}}

Before running the service, let us edit the `etc/daemon.conf` file.  The resulting file is as follows:

{{{
<port 7000>
    <endpoint /perfSONAR_PS/services/gLS>
        <gls>
                                                                # just an gLS ... (Udel, Newark, DE, USA)
                        root                            1
                                                                # data TTL = 4 days
                        ls_ttl                          5760
                                                                # 180 minute (3hr) registration window
                        ls_registration_interval        180
                                                                # 120 miute cleaning/summary window
                        maintenance_interval            120
                                                                # Database options (only change path)
                        metadata_db_file                    glsstore.dbxml
                        metadata_summary_db_file            glsstore-summary.dbxml
                        metadata_db_name                    /opt/perfsonar_ps1/perfSONAR_PS-LookupService/gLS-xmldb
                                                                # Service options (please customize)
                        service_accesspoint             http://ale.damsl.cis.udel.edu:7000/perfSONAR_PS/services/gLS
                        service_description             Udel Global Lookup Service (Udel, Newark, DE, USA)
                        service_name                    Udel Global Lookup Service
                        service_type                    gLS
                </gls>
                disable                             0
                module                              perfSONAR_PS::Services::LS::gLS
        </endpoint>
</port>
                                                    # 180 minute (3hr) registration window
ls_registration_interval                        180
disable_echo                                0
                                                    # Root hints info, url + local copy location
root_hints_url                              http://stout.damsl.cis.udel.edu/gls.root.hints
root_hints_file                             /opt/perfsonar_ps1/perfSONAR_PS-LookupService/hls.root.hints
                                                    # Daemon management, shouldn't need changing
reaper_interval                             20
max_worker_lifetime                             300
max_worker_processes                        30
pid_dir                                     /opt/perfsonar_ps1/perfSONAR_PS-LookupService
pid_file                                        lookup_service.pid
}}}

Now running `lookup_service start` under `scripts`, we get:

{{{
$ sudo scripts/lookup_service start
/home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/bin/daemon.pl --config=/home/mportnoi/
 perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/etc/daemon.conf --pidfile=lookup_service.pid --piddir=
 /var/run --logger=/home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/etc/daemon_logger.conf
 --user=perfsonar --group=perfsonar
Can't locate Data/UUID.pm in @INC (@INC contains: /home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-Lookup
 Service/bin/../lib  ./lib ../lib /usr/lib/perl5/site_perl/5.8.6/i386-linux-thread-multi /usr/lib/perl5/site_perl/5.8.5/
 i386
 ...
}}}

The error message states that Data/UUID.pm was not found, a Perl problem.  Using CPAN to download and install this
package:

 `sudo perl -MCPAN -e 'install Data::UUID' (to enter CPAN and run the command `install Data::UUID`)
 
We get:

 `Data::UUID is up to date (1.202).`
 
Running the `sudo lookup_service start`, we get the same Data/UUID missing error again.  Let us try to force install
Data::UUID under CPAN.

 {{{
 sudo perl -MCPAN -e shell`
 cpan[1]> force install Data::UUID
 }}}
 
We try to run the `sudo lookup_service start` and we get the same error.  So, `Data::UUID` must be being installed
in some place where the LS scripts cannot find.  The array `@INC` controls the directories where Perl look for libraries.
To find out where `UUID.pm` is actually installed:

 `sudo find / -name UUID.pm -print`
 
We get:

{{{
...
/usr/local/lib/perl5/site_perl/5.8.8/i686-linux/Data/UUID.pm
}}}

We must make Perl search this directory, i.e., include this directory into `@INC` array.  There are a number of ways
to perform this, per several documents in the internet.  Basically:

 # Add the directory to the PERL5LIB environment variable.
 # Add use lib 'directory'; in your Perl script.
 # Construct a symbolic link in the directory already included in `@INC` and make it point to the directory where UUID.pm is actually installed.  This solution actually does nothing to `@INC` and seems untidy, since the result is effectively mixing different library versions.  But we will not comment on Linux "tideness". :)
 
Let us try the first approach.  Edit the `.bashrc` file in the home directory and include:

{{{
PERL5LIB=/usr/local/lib/perl5/site_perl/5.8.8/i686-linux:$PERL5LIB
export PERL5LIB
}}}

Logoff, login again, trying to run `lookup_service start` script, we obtain this new error:

{{{
/home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/bin/daemon.pl --config=/home/mportnoi/
 perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/etc/daemon.conf --pidfile=lookup_service.pid
 --piddir=/var/run --logger=/home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/etc/
 daemon_logger.conf --user=perfsonar --group=perfsonar
Can't load '/usr/local/lib/perl5/site_perl/5.8.8/i686-linux/auto/XML/LibXML/Common/Common.so' for module
 XML::LibXML::Common: /usr/local/lib/perl5/site_perl/5.8.8/i686-linux/auto/XML/LibXML/Common/Common.so: undefined
 symbol: PL_sv_undef at /usr/lib/perl5/5.8.6/i386-linux-thread-multi/DynaLoader.pm line 230.
 at /usr/local/lib/perl5/site_perl/5.8.8/i686-linux/XML/LibXML.pm line 12
Compilation failed in require at /usr/local/lib/perl5/site_perl/5.8.8/i686-linux/XML/LibXML.pm line 12.
BEGIN failed--compilation aborted at /usr/local/lib/perl5/site_perl/5.8.8/i686-linux/XML/LibXML.pm line 12.
Compilation failed in require at /home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/bin/../
 lib/perfSONAR_PS/Common.pm line 26.
BEGIN failed--compilation aborted at /home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/bin/
 ../lib/perfSONAR_PS/Common.pm line 26.
Compilation failed in require at /home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/bin/
 daemon.pl line 82.
BEGIN failed--compilation aborted at /home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/bin/
 daemon.pl line 82.
./lookup_service start: perfSONAR Lookup Service could not be started
}}}

The hint seems to be:
 `undefined symbol: PL_sv_undef at /usr/lib/perl5/5.8.6/i386-linux-thread-multi/DynaLoader.pm line 230`
 
It appears that by running <font color=purple>`perl Makefile.PL POLLUTE=1`</font> would solve this sort of problem.  The
sources fail to explain exactly which `Makefile.pl` is to be used.

Searching for `DynaLoader.pm` yields:

{{{
sudo find / -name DynaLoader.pm -print
/var/lib/systemimager/images/cognac_image/usr/lib/perl5/5.8.6/i386-linux-thread-multi/DynaLoader.pm
/usr/local/lib/perl5/5.8.8/i686-linux/DynaLoader.pm
/usr/lib/perl5/5.8.6/i386-linux-thread-multi/DynaLoader.pm
}}}

Since the error message relates to a `DynaLoader.pm` under version 5.8.6, and the rest of the Perl libraries are under
5.8.8, let us try to force the use of `DynaLoader.pm` 5.8.8 by editing PERL5LIB again in `.bashrc`.

{{{
PERL5LIB=/usr/local/lib/perl5/5.8.8/i686-linux:/usr/local/lib/perl5/site_perl/5.8.8/i686-linux:$PERL5LIB
export PERL5LIB
}}}

Run `lookup_service start` again and check what new error presents itself.  Effectively:

{{{
/home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/bin/daemon.pl 
 --config=/home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/etc/daemon.conf
 --pidfile=lookup_service.pid --piddir=/var/run --logger=/home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/
 perfSONAR_PS-LookupService/etc/daemon_logger.conf --user=perfsonar --group=perfsonar
Perl lib version (v5.8.8) doesn't match executable version (v5.8.6) at /usr/local/lib/perl5/5.8.8/i686-linux/Config.pm
 line 46.
Compilation failed in require at /usr/local/lib/perl5/5.8.8/i686-linux/DynaLoader.pm line 25.
BEGIN failed--compilation aborted at /usr/local/lib/perl5/5.8.8/i686-linux/DynaLoader.pm line 25.
Compilation failed in require at /usr/local/lib/perl5/5.8.8/i686-linux/Time/HiRes.pm line 7.
Compilation failed in require at /home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/bin/
 daemon.pl line 24.
BEGIN failed--compilation aborted at /home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1/perfSONAR_PS-LookupService/bin/
 daemon.pl line 24.
./lookup_service start: perfSONAR Lookup Service could not be started
}}}

This last attempt just creates another version conflict.

At this point we abandon this pursuit, as it seems revolving in garbage (which generates more garbage).  Proceed
to [LSScalabilityInvestigation#Attempt_3].


==== Attempt 3 (ale) - Working Script ====

===== Derived Modification in Perfsonar 1 =====

Lookup Service installation scripts modified to better handle dependencies.


It is possible that using the `lookup_service start script` and running the services from the home directory caused
the problems verified.  Now, the Lookup Service will be installed to directory `/opt/perfsonar_ps1`.

First, checkout or update the SVN repository.

 `svn co https://svn.internet2.edu/svn/perfSONAR-PS/`
 

After perfSONAR software is downloaded, create the installation directory:

  `sudo mkdir -p /opt/perfsonar_ps1`
  
Copy the proper diretories from the download location to the installation directory.  Change
to the directory where perfSONAR_PS-!LookupService and Shared directories are located and do:

{{{
cd /home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1
sudo cp -r perfSONAR_PS-LookupService /opt/perfsonar_ps1
sudo cp -r Shared /opt/perfsonar_ps1
}}}

Do not run 'make install', as the Makefile will attempt to install the service to the default directory
/opt/perfsonar_ps.  Instead, proceed to install the necessary dependencies:

{{{
cd /opt/perfsonar_ps1/perfSONAR_PS-LookupService/scripts  
sudo ./install_dependencies.sh
}}}

Do not run 'prepare_environment.sh'.  Now modify the .conf files accordingly (refer to README):

Edit `/opt/perfsonar_ps1/perfSONAR_PS-LookupService/etc/daemon_logger.conf` and set the desired logging method.
Here, we choose to display log messages to the screen.  Hence, per instructed within the file, we uncomment the line:

 `log4perl.appender.A1=Log::Dispatch::Screen`
 
And comment the line:

 `#log4perl.appender.A1=Log::Dispatch::FileRotate`
 
===== daemon.conf file for ale =====
 
Edit `/opt/perfsonar_ps1/perfSONAR_PS-LookupService/etc/daemon.conf` and set the appropriate configuration variables.
The resulting file (for a gLS) is:

{{{
<port 7000>
    <endpoint /perfSONAR_PS/services/gLS>
        <gls>
                                                                # just an gLS ... (Udel, Newark, DE, USA)
                        root                            1
                                                                # data TTL = 4 days
                        ls_ttl                          5760
                                                                # 180 minute (3hr) registration window
                        ls_registration_interval        180
                                                                # 120 miute cleaning/summary window
                        maintenance_interval            120
                                                                # Database options (only change path)
                        metadata_db_file                    glsstore.dbxml
                        metadata_summary_db_file            glsstore-summary.dbxml
                        metadata_db_name                    /opt/perfsonar_ps1/perfSONAR_PS-LookupService/gLS-xmldb
                                                                # Service options (please customize)
                        service_accesspoint             http://ale.damsl.cis.udel.edu:7000/perfSONAR_PS/services/gLS
                        service_description             Udel Global Lookup Service (Udel, Newark, DE, USA)
                        service_name                    Udel Global Lookup Service
                        service_type                    gLS
                </gls>
                disable                             0
                module                              perfSONAR_PS::Services::LS::gLS
        </endpoint>
</port>
                                                    # 180 minute (3hr) registration window
ls_registration_interval                        180
disable_echo                                0
                                                    # Root hints info, url + local copy location
root_hints_url                              http://stout.damsl.cis.udel.edu/gls.root.hints
root_hints_file                             /opt/perfsonar_ps1/perfSONAR_PS-LookupService/hls.root.hints
                                                    # Daemon management, shouldn't need changing
reaper_interval                             20
max_worker_lifetime                             300
max_worker_processes                        30
pid_dir                                     /opt/perfsonar_ps1/perfSONAR_PS-LookupService
pid_file                                        lookup_service.pid
}}}

Finally, run the service (refer to README for manual start) in the<font color=purple> foreground</font>:

{{{
cd /opt/perfsonar_ps1/perfSONAR_PS-LookupService/bin
sudo perl daemon.pl --verbose --conf=../etc/daemon.conf --logger=../etc/daemon_logger.conf
}}}
  
Now the service reports to be running.  It can be switched to the background by pressing CTRL-Z and typing `bg`.
To bring it back to the foreground, press CTRL-Z and type `fg`.  Alternatively, use the command<font color=purple> `screen`</font>.

To run it in<font color=purple> background</font>, it is best to switch the logging method to !FileRotate, and remove the --verbose option from
`daemon.pl`.  Therefore, in file `daemon_logger.conf`, comment the line:

 `#log4perl.appender.A1=Log::Dispatch::Screen`
 
And uncomment the line:

 `log4perl.appender.A1=Log::Dispatch::FileRotate`
 
Select a log file to avoid conflict with other log files for additional LS instances.  Edit the line:

 `log4perl.appender.A1.filename=/var/log/perfsonar/lookup_service1.log`
 
And run:

{{{
cd /opt/perfsonar_ps1/perfSONAR_PS-LookupService/bin
sudo perl daemon.pl --conf=../etc/daemon.conf --logger=../etc/daemon_logger.conf
}}}


=== Installing hLS on Server moonshine ===

==== Backgroung ====

This server _moonshine_ is Debian GNU/Linux 5.0, linux core 2.6.26-2-686.  Again, there is already a Lookup Service
installed and running on this server.


==== Attempt 1 (moonshine) - Working Script ====

This attempt was based on _ale_'s [LSScalabilityInvestigation#Attempt_3_(ale)].  The Lookup Service will be installed to
directory `/opt/perfsonar_ps1`.

First, checkout or update the SVN repository.

 `svn co https://svn.internet2.edu/svn/perfSONAR-PS/`
 

After perfSONAR software is downloaded, create the installation directory:

  `sudo mkdir -p /opt/perfsonar_ps1`
  
Copy the proper diretories from the download location to the installation directory.  Change
to the directory where perfSONAR_PS-!LookupService and Shared directories are located and do:

{{{
cd /home/mportnoi/perfSONAR-PS/branches/RELEASE_3.1
sudo cp -r perfSONAR_PS-LookupService /opt/perfsonar_ps1
sudo cp -r Shared /opt/perfsonar_ps1
}}}

Do not run 'make install', as the Makefile will attempt to install the service to the default directory
/opt/perfsonar_ps.  Instead, proceed to install the necessary dependencies:

{{{
cd /opt/perfsonar_ps1/perfSONAR_PS-LookupService/scripts  
sudo ./install_dependencies.sh
}}}

Do not run 'prepare_environment.sh'.  Now modify the .conf files accordingly (refer to README):

Edit `/opt/perfsonar_ps1/perfSONAR_PS-LookupService/etc/daemon_logger.conf` and set the desired logging method.
Here, we choose to display log messages to the screen.  Hence, per instructed within the file, we uncomment the line:

 `log4perl.appender.A1=Log::Dispatch::Screen`
 
And comment the line:

 `#log4perl.appender.A1=Log::Dispatch::FileRotate`
 
===== daemon.conf file for moonshine =====

Edit `/opt/perfsonar_ps1/perfSONAR_PS-LookupService/etc/daemon.conf` and set the appropriate configuration variables.
The resulting file (for a hLS) is:

{{{
<port 7000>
    <endpoint /perfSONAR_PS/services/hLS>
        <gls>
                                                                # just an hLS ... (Udel, Newark, DE, USA)
                        root                            0       #0 = hLS; 1 = gLS
                                                                # data TTL = 4 days
                        ls_ttl                          5760
                                                                # 180 minute (3hr) registaration window
                        ls_registration_interval        180
                                                                # 120 miute cleaning/summary window
                        maintenance_interval            120
                                                                # Database options (only change path)
                        metadata_db_file                    glsstore.dbxml
                        metadata_summary_db_file            glsstore-summary.dbxml
                        metadata_db_name                    /opt/perfsonar_ps1/perfSONAR_PS-LookupService/gLS-xmldb
                                                                # Service options (please customize)
                        service_accesspoint             http://moonshine.damsl.cis.udel.edu:7000/perfSONAR_PS/services/hLS
                        service_description             Udel Home Lookup Service (Newark, DE, USA)
                        service_name                    Udel Home Lookup Service
                        service_type                    hLS
                </gls>
                disable                             0
                module                              perfSONAR_PS::Services::LS::gLS
        </endpoint>
</port>
                                                    # 180 minute (3hr) registaration window
ls_registration_interval                        180
disable_echo                                0
                                                    # Root hints info, url + local copy location
root_hints_url                              http://stout.damsl.cis.udel.edu/gls.root.hints
root_hints_file                             /opt/perfsonar_ps1/perfSONAR_PS-LookupService/hls.root.hints
                                                    # Daemon management, shouldn't need changing
reaper_interval                             20
max_worker_lifetime                             300
max_worker_processes                        30
pid_dir                                     /opt/perfsonar_ps1/perfSONAR_PS-LookupService
pid_file                                        lookup_service.pid
}}}

Finally, run the service (refer to README for manual start) in the<font color=purple> foreground</font>:

{{{
cd /opt/perfsonar_ps1/perfSONAR_PS-LookupService/bin
sudo perl daemon.pl --verbose --conf=../etc/daemon.conf --logger=../etc/daemon_logger.conf
}}}
  
Now the service reports to be running.  It can be switched to the background by pressing CTRL-Z and typing `bg`.
To bring it back to the foreground, press CTRL-Z and type `fg`.  Alternatively, use the command<font color=purple> `screen`</font>.

To run it in<font color=purple> background</font>, it is best to switch the logging method to !FileRotate, and remove the --verbose option from
`daemon.pl`.  Therefore, in file `daemon_logger.conf`, comment the line:

 `#log4perl.appender.A1=Log::Dispatch::Screen`
 
And uncomment the line:

 `log4perl.appender.A1=Log::Dispatch::FileRotate`
 
Select a log file to avoid conflict with other log files for additional LS instances.  Edit the line:

 `log4perl.appender.A1.filename=/var/log/perfsonar/lookup_service1.log`
 
And run:

{{{
cd /opt/perfsonar_ps1/perfSONAR_PS-LookupService/bin
sudo perl daemon.pl --conf=../etc/daemon.conf --logger=../etc/daemon_logger.conf
}}}

After running the `daemon.pl` init script, _moonshine_ hLS immediately registered itself with _ale_ gLS, as seen in messages
logged from both _ale_ and _moonshine_.

<font color=green>_moonshine_ reports:</font>

{{{
gLS.pm:755 perfSONAR_PS::Services::LS::gLS::registerLS - Success from LS "http://ale.damsl.cis.udel.edu:7000/perfSONAR_PS/services/gLS",
 eventType: success.ls.register, response: [0] Data elements have been registered with key [41491c472d798db53b0bc90deb7c6f71]
}}}


=== Installing fakeService on ale ===

`fakeService` is already installed, together with the Shared libraries,  under `/opt/perfsonar_ps1/Shared/client/fakeService`.  Change to this directory.

Trying the build script for `fakeService` first.

 `sudo ./build_fakeService.sh`

The script reports the following error:

{{{
Building executable fakeService
 Building ... 
  pp -c -I ../../lib -l /usr/lib/libxml2.a -l /usr/lib/libxml2.so.2 -o fakeService fakeService.pl  
 
Can't locate Data/Random/WordList.pm in @INC (@INC contains: ../../lib /usr/local/lib/perl5/5.8.8/i686-linux /usr/local/lib/perl5/5.8.8 /usr/local/lib/perl5/site_perl/5.8.8/i686-linux /usr/local/lib/perl5/site_perl/5.8.8 /usr/local/lib/perl5/site_perl .) at E7F784 line 13.
BEGIN failed--compilation aborted at E7F784 line 13.
}}}

Perl is missing the `Data::Random::WordList` library.  Let us install the parent library (it is best to try installing
the exact `Data::Random::WordList` library first, but this was not done here):

 `sudo perl -MCPAN -e 'Data::Random'`
 
Now the build script works, and produces a compiled `fakeService` file.  Building the service *is not required*, though,
and this step can be skipped.  We will run the `fakeService` Perl script directly.  Since there is no CONFIG file for
the service yet, we will let it create the file.  We will install 3 `fakeService` with 3 different configuration files.
Under /opt/perfsonar_ps1/Shared/client/fakeService, type:

 `sudo perl fakeService.pl --verbose --config=./fakeService.config1`
 
<font color=red>Note:  the --config parameter indicates the CONFIG _file_, and not the CONFIG directory.</font>

The program asks the following questions, for which the answers are in<font color=green> *green*</font>.

 `Enter the service type ( snmp | pSB | dcn )[snmp]:` <font color=green> *ENTER*</font>
 
 `Enter the number of metadata [10]:` <font color=green> *ENTER*</font>
 
 `Enter any service keywords separated by commas (ex: LHC,Internet2)[LHC]:` <font color=green> *ENTER*</font>
 
 `Enter the hLS to register with [http://localhost:8080/perfSONAR_PS/services/gLS]:`  <font color=green> *`http://moonshine.damsl.cis.udel.edu:7000/perfSONAR_PS/services/hLS`*</font>
 
 `Enter the hLS registration interval (in minutes) [1]:` <font color=green> *ENTER*</font>


After this, the `fakeService` registers itself to the hLS, as the hLS reports.

Two more `fakeService` are created as follows:

 `sudo perl fakeService.pl --verbose --config=./fakeService.config2`
 
 `sudo perl fakeService.pl --verbose --config=./fakeService.config3`
 
A total of three `fakeService` instances were created on _ale_ and registered on the hLS on _moonshine_.  These services assume random URNs collected from the word list installed at the operating system.  Nevertheless, we modify the configuration files such that the domains are not random, but bear some indication of where the `fakeService` instance is dispatched from.  The three fakeServices here acquired the following domain names:
 * fake1-ale.edu
 * fake2-ale.edu
 * fake3-ale.edu
 
Using these domains, each `fakeService` instance uses other prefix names to register.


=== Setting Up !PlanetLab ===

In order to create a critical mass for the scalability testing, several hLS/gLS and client services need to be created.  These cannot all reside on both _ale_ and _moonshine_ machines, otherwise this could create performance issues.  We can make use of [http://www.planet-lab.org PlanetLab].

!PlanetLab is an open platform that allows the creation of virtual machines running Fedora 8.  Each virtual machine has internet access and can be used to run any kind of experiment.  The virtual machines reside on real servers, called nodes, granted by several organizations.  In this document, we will refer to !PlanetLab's own definitions and jargon; the explanation can be found in !PlanetLab's website and documentation.

First, the user must be affiliated with some institution that does have access to !PlanetLab's resources.  Then, the user requests a "slice", which is a virtual piece of !PlanetLab's combined resources.  Within this slice, the user adds nodes, that correspond to the real servers that provide the virtual functionalities.  On each of these nodes, !PlanetLab will create a virtual machine related to the user's slice.  (Therefore, a slice can span several nodes; each node may run several virtual machines, owned by different slices).  Once the user is assigned a slice (which must be authorized by the user institution Principal Investigator), then the user adds nodes to this slice.  All can be done through the !PlanetLab web interface.

Adding a node to a slice, although a basal operation (without nodes, nothing can be done in a slice), is hidden under a number of menus in !PlanetLab web interface and not indicated in the immediate documentation.  It can be found by selecting "My Slices", then clicking on the slice's name, then expanding the "nodes" tab, and finally expanding the list of available nodes.  There, any node can be marked and added to the slice.

If a node named `planetlab2.cis.upenn.edu` was added to the slice, the user can log on to this node (or virtual machine) by issuing:

 `ssh -l slice_name -i ~/.ssh/id_rsa planetlab2.cis.upenn.edu`

 
==== Preparing planetlab2.cs.columbia.edu ====

Installation of `planetlab2.cs.columbia.edu` and `planetlab2.cis.upenn.edu` were done concurrently, so there is some redundancy in the report for both.

===== Background =====

This server _planetlab2.cs.columbia.edu_ is Fedora release 8 (Werewolf), linux core 2.6.22.19-vs2.3.0.34.39.planetlab.

===== Attempt 1 (planetlab3.cs.columbia.edu) =====

Import public keys:

{{{
wget http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo rpm --import http://dries.ulyssis.org/rpm/RPM-GPG-KEY.dries.txt
}}}

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

File `additional.repo`:

{{{
# Name: Additional Repositories for perfSONAR Lookup Service
[dries]
name=Extra Fedora rpms dries - $releasever - $basearch
baseurl=http://ftp.belnet.be/packages/dries.ulyssis.org/fedora/linux/$releasever/$basearch/dries/RPMS
[Dag]
name = Dag Repository
baseurl = http://apt.sw.be/fedora/$releasever/en/$basearch/dries
}}}

Now:

 `sudo yum update`
 
Brand new error to the report:

{{{
error: rpmdb: damaged header #79 retrieved -- skipping.
Traceback (most recent call last):
  File "/usr/bin/yum", line 29, in <module>
    yummain.user_main(sys.argv[1:], exit_code=True)
  File "/usr/share/yum-cli/yummain.py", line 229, in user_main
    errcode = main(args)
  File "/usr/share/yum-cli/yummain.py", line 84, in main
    base.getOptionsConfig(args)
  File "/usr/share/yum-cli/cli.py", line 184, in getOptionsConfig
    enabled_plugins=self.optparser._splitArg(opts.enableplugins))
  File "/vservers/.vref/planetlab-f8-i386/usr/lib/python2.5/site-packages/yum/__init__.py", line 192, in _getConfig
  File "/vservers/.vref/planetlab-f8-i386/usr/lib/python2.5/site-packages/yum/config.py", line 774, in readMainConfig
  File "/vservers/.vref/planetlab-f8-i386/usr/lib/python2.5/site-packages/yum/config.py", line 850, in _getsysver
StopIteration
}}}

Trying:

{{{
sudo rpm --initdb
sudo yum update
}}}

No.  Trying to remove __db* files from /var/lib/rpm and executing the two commands above again.  Does not work.

===== Attempt 2 (planetlab2.cs.columbia.edu) =====

We will avoid spending hours confronting this new issue.  Let us destroy this Planetlab virtual node (by deleting it from the Planetlab slice), and then add it again.  This will basically mimic reinstalling the operating system.  We begin again:

Import public keys:

 `wget http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt`
 
Edit this file and remove the initial lines of text, that have nothing to do with the public key.  Now:

{{{
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo rpm --import http://dries.ulyssis.org/rpm/RPM-GPG-KEY.dries.txt
}}}

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

Add file `additional.repo`:

{{{
# Name: Additional Repositories for perfSONAR Lookup Service
[dries]
name=Extra Fedora rpms dries - $releasever - $basearch
baseurl=http://ftp.belnet.be/packages/dries.ulyssis.org/fedora/linux/$releasever/$basearch/dries/RPMS
[Dag]
name = Dag Repository
baseurl = http://apt.sw.be/fedora/$releasever/en/$basearch/dries
}}}

After `sudo yum update`, we get:

 `Error: database disk image is malformed`
 
And nothing else gets to be installed via yum.

===== Attempt 3 (planetlab2.cs.columbia.edu) - Undocumented Installation Procedure - Working Script =====

Again, let us kill this node and restart from scratch.  We will try an undocumented (and now documented) venue for installation, following recommendation from Jason Zurawsky:

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

{{{
sudo rpm -Uvh http://ftp.freshrpms.net/pub/freshrpms/fedora/linux/8/freshrpms-release/freshrpms-release-1.1-1.fc.noarch.rpm
wget -c http://freshrpms.net/RPM-GPG-KEY-freshrpms
sudo rpm --import http://www.perfsonar.net/download/services/perfSONAR-PS_RPM-GPG-KEY
wget -c http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
sudo rpm -ivh http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
wget -c http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo yum update
sudo yum install perl-perfSONAR_PS-LookupService --nogpgcheck
}}}

This works.  Notice that this method installs additional RPM at ftp.freshrpms.net, adds an RPMFORGE repository, and uses --nogpgcheck when installing the Lookup Service (Internet2 public key was not imported here).

Proceeding to start the gLS service.  Modify the .conf files accordingly (refer to README):
 
Edit /opt/perfsonar_ps/lookup_service/etc/daemon_logger.conf and set the desired logging method. Here, we choose to display log messages to the screen.  Hence, per instructed within the file, we uncomment the line:
 
 `log4perl.appender.A1=Log::Dispatch::Screen`

And comment the line: 

 `#log4perl.appender.A1=Log::Dispatch::FileRotate` 

 
===== daemon.conf file for planetlab2.cs.columbia.edu =====

File `daemon.conf`:

{{{
<port 9995>
    <endpoint /perfSONAR_PS/services/gLS>
        <gls>
                                                                # just an gLS ... (Columbia University, Planetlab virtual, USA)
                        root                            1
                                                                # data TTL = 4 days
                        ls_ttl                          5760
                                                                # 180 minute (3hr) registaration window
                        ls_registration_interval        180
                                                                # 120 miute cleaning/summary window
                        maintenance_interval            120
                                                                # Database options (only change path)
                        metadata_db_file                    glsstore.dbxml
                        metadata_summary_db_file            glsstore-summary.dbxml
                        metadata_db_name                    /var/lib/perfsonar/lookup_service/xmldb
                                                                # Service options (please customize)
                        service_accesspoint             http://planetlab2.cs.columbia.edu:9995/perfSONAR_PS/services/gLS
                        service_description             Columbia Global Lookup Service (Planetlab virtual, USA)
                        service_name                    Columbia Home Lookup Service
                        service_type                    gLS
                </gls>
                disable                             0
                module                              perfSONAR_PS::Services::LS::gLS
        </endpoint>
</port>
                                                    # 180 minute (3hr) registaration window
ls_registration_interval                        180
disable_echo                                0
                                                    # Root hints info, url + local copy location
root_hints_url                              http://stout.damsl.cis.udel.edu/gls.root.hints
root_hints_file                             /var/lib/perfsonar/lookup_service/hls.root.hints
                                                    # Daemon management, shouldn't need changing
reaper_interval                             20
max_worker_lifetime                             300
max_worker_processes                        30
pid_dir                                     /var/run
pid_file                                        lookup_service.pid
}}}

The service will run through the init.d script:

 `/etc/init.d/lookup_service start`

We have to update the gLS cloud file `gls.root.hints` at _stout_ to reflect the newly added gLS server.  The file is located at `/var/www/external/gls.root.hints`.  The new contents is:

{{{
http://ale.damsl.cis.udel.edu:7000/perfSONAR_PS/services/gLS
http://planetlab2.cs.columbia.edu:9995/perfSONAR_PS/services/gLS
}}}

 
==== Preparing planetlab2.cis.upenn.edu ====

===== Background =====

This server _planetlab2.cis.upenn.edu_ is Fedora release 8 (Werewolf), linux core 2.6.22.19-vs2.3.0.34.39.planetlab.


===== Attempt 1 (planetlab2.cis.upenn.edu) =====
 
On this node, we install the Lookup Service, this time using the `yum` package.

First, import signing key:

 `rpm --import http://software.internet2.edu/rpms/RPM-GPG-KEY-Internet2`

Then install the RPM: 

 `rpm -ivh http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm`

Now:

 `yum install perl-perfSONAR_PS-LookupService`

The installation fails, because many Perl libraries are missing.  Yum is uncapable of resolving this; it informs that certain Perl libraries are missing, and halts.  Trying to install these libraries with CPAN, we detect that the !Planetlab node needs a plethora of additional software, before attempting this installation.  Some are:

 * cpan (and perl) and all packages required by perfSONAR
 * svn
 * gcc
 * make
 * apt (if desired)
 
After installing the above through yum, we attempt installing Lookup Service again, but to no avail.  It still reports two missing Perl libraries:  *NetAddr::IP (version 4.007)*, and *Hash::Merge*.  Using cpan to install them directly, by using:

 {{{
 sudo cpan install NetAddr::IP
 sudo cpan install Hash::Merge
 }}}
 
This results in cpan resolving several dependencies, but failing at the end and reporting unsuccessful "make".  The error is:

{{{
 Unsatisfied dependencies detected during [M/MI/MIKER/NetAddr-IP-4.027.tar.gz] -----
    Test::More
Shall I follow them and prepend them to the queue
of modules we are processing right now? [yes] 
Running make test
  Delayed until after prerequisites
Running make install
  Delayed until after prerequisites
Running install for module Test::More
Running make for M/MS/MSCHWERN/Test-Simple-0.94.tar.gz
  Is already unwrapped into directory /home/udel_perfsonar/.cpan/build/Test-Simple-0.94
  Has already been processed within this session
Running make test
  Can't test without successful make
Running make install
  make had returned bad status, install seems impossible
Running make for M/MI/MIKER/NetAddr-IP-4.027.tar.gz
  Is already unwrapped into directory /home/udel_perfsonar/.cpan/build/NetAddr-IP-4.027

  CPAN.pm: Going to build M/MI/MIKER/NetAddr-IP-4.027.tar.gz

    -- NOT OK
Running make test
  Can't test without successful make
Running make install
  make had returned bad status, install seems impossible
}}}

"Install seems impossible" is a typicall unix-style motivating message...

===== Attempt 2 (planetlab2.cis.upenn.edu) =====

*Setting CPAN Problem Aside for a Moment; Adding One Repository to Yum*

Setting CPAN problem aside for a while and breathing, we try to tackle _yum_ not being able to retrieve the needed libraries from the pre-defined repositories.  Lookup Service
suggests adding two repositories from:

 * http://dries.ulyssis.org/rpm/ 
 * http://dag.wieers.com/rpm/
 
To add a repository to _yum_, edit the file `/etc/yum.conf` or add a file with the repository information to `/etc/yum.repos.d`.
Let us attempt to add such a file (`additional.repo`) with the following contents (as instructed by dries.ulyssis.org):

{{{
# Name: Additional Repositories for perfSONAR Lookup Service
[dries]
name=Extra Fedora rpms dries - $releasever - $basearch
baseurl=http://ftp.belnet.be/packages/dries.ulyssis.org/fedora/linux/$releasever/$basearch/dries
}}}

Also, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

And import the public key:

{{{
wget -c http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
}}}

These last two steps will add some mirror repositores for _yum_, helpful to install a number of packages not available by default in !PlanetLab virtual machine.

Now running

 `sudo yum update`
 
We get the error message:

{{{
http://ftp.belnet.be/packages/dries.ulyssis.org/fedora/linux/8/i386/dries/repodata/repomd.xml: [Errno 14] HTTP Error 404: Not Found
Trying other mirror.
Error: Cannot retrieve repository metadata (repomd.xml) for repository: dries. Please verify its path and try again
}}}

Trying the URL manually, we detect that the file `repomd.xml` is located in a different directory.  Fixing the contents of `additional.repo`
and also putting the Dag entry (found manually in dag.wieers.com):

{{{
# Name: Additional Repositories for perfSONAR Lookup Service
[dries]
name=Extra Fedora rpms dries - $releasever - $basearch
baseurl=http://ftp.belnet.be/packages/dries.ulyssis.org/fedora/linux/$releasever/$basearch/dries/RPMS
[Dag]
name = Dag Repository
baseurl = http://apt.sw.be/fedora/$releasever/en/$basearch/dries
}}}

And now `sudo yum update` reports this error:

{{{
Downloading Packages:     
perl-Test-Harness-3.14-1.fc8.rf.noarch.rpm                    | 246 kB     00:01     
warning: rpmts_HdrFromFdno: Header V3 DSA signature: NOKEY, key ID 1aa78495          


Public key for perl-Test-Harness-3.14-1.fc8.rf.noarch.rpm is not installed
}}}

The public key for the repository is missing.  At http://dries.ulyssis.org/rpm/RPM-GPG-KEY.dries.html, we fetch such key.
We import the public key and update the repositories again:

 {{{
 sudo rpm --import http://dries.ulyssis.org/rpm/RPM-GPG-KEY.dries.txt
 sudo yum update
 }}}
 
This time successfully.  We still have to import DAG public key, but we have to do it manually, since the key file at http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
has extra text and yields errors.  Since we do not know whether !PlanetLab virtual machine has a web browser, we just create a text
file (`RPM-GPG-KEY.dag.txt`) and paste the public key contents into it, and then import.

 {{{
 sudo rpm --import RPM-GPG-KEY.dag.txt
 sudo yum update
 }}}
 
===== Attempt 3 (planetlab2.cis.upenn.edu) =====

Now, back to CPAN problem.

*Back to CPAN Problem*

Adding one more repository to _yum_ does not mean installation of Lookup Service is possible, because CPAN is still incompetent
to resolve the dependencies and install what is needed, as seen above.

Researching a bit more, we endeavor the following (from http://www.nntp.perl.org/group/perl.cpan.discuss/2009/06/msg525.html):

{{{
rm /var/lib/rpm/__db.00*
rpm --rebuilddb
}}}

CPAN is still unable to install what is needed.  Apparently, CPAN cannot install Parse::Yapp, or LWP, or XML::Parser, among other
libraries.

We will aim to install NetAddr::IP (version 4.007) and Hash::Merge manually from the rpm sources.  First, get the files:

 {{{
 wget http://apt.sw.be/fedora/8/en/SRPMS.rpmforge/perl-Hash-Merge-0.11-1.rf.src.rpm
 wget http://apt.sw.be/fedora/8/en/SRPMS.rpmforge/perl-NetAddr-IP-4.007-1.rf.src.rpm
 }}}
 
Process Hash-Merge:

 {{{
 rpm -ivh perl-Hash-Merge-0.11-1.rf.src.rpm                                
 error: cannot create %sourcedir /usr/src/redhat/SOURCES
 }}}
 
The indicated directory does not exist, so create it with `mkdir /usr/src/redhat/SOURCES`.

 Process the files again:
 
 {{{
 rpm -ivh perl-Hash-Merge-0.11-1.rf.src.rpm
 rpm -ivh perl-NetAddr-IP-4.007-1.rf.src.rpm
 }}}
 
Now extract the .gz file for Hash::Merge and a directory will be created:

 `tar xvf Hash-Merge-0.11.tar.gz`
 
According to the README file, install it via:

 {{{
 sudo perl Makefile.PL
 sudo make
 sudo make test
 sudo make install
 }}}
 
The `make` generates warnings and `make test` generates a compile error; we ignore them (possibly the error has something to do with Test::More not being installed yet).
Extract .gz file for NetAddr::IP and install:

 {{{
 tar xvf NetAddr-IP-4.007.tar.gz
 sudo perl Makefile.PL
 sudo make
 sudo make test
 sudo make install
 }}}
 
Again, `make test` generates a compile error.  We put this error on the pile and proceed.  Attempting Lookup Service install via _yum_
fails again with the same Hash::Merge and NetAddr::IP dependencies.  With Cpan, we detect that Hash::Merge seems to be OK, but
NetAddr::IP is not there.  Cpan will not install it, perhaps due to a missing Test::More.  We attempt manual installation of Test::More.

 {{{
 wget http://apt.sw.be/fedora/8/en/SRPMS.rpmforge/perl-Test-Simple-0.94-1.rf.src.rpm
 sudo rpm -ivh perl-Test-Simple-0.94-1.rf.src.rpm
 cd /usr/src/redhat/SOURCES
 sudo tar xvf Test-Simple-0.94.tar.gz
 cd Test-Simple-0.94
 sudo perl Makefile.PL
 sudo make
 sudo make test
 sudo make install
 }}}
 
This one writes no error after `make test`.  Yum install for Lookup Service still fails for the same reasons; it seems that
Hash::Merge and NetAddr::IP fail due to dependencies that Cpan cannot yet resolve; or, the manual installation failed, perhaps because
environment variables deep in the system bowels were not updated (thus rendering the system unaware that the packages are in fact installed).

===== Attempt 4 (planetlab2.cis.upenn.edu) - Working Script =====

====== Derived Modification in Perfsonar 2 ======

Internet2 repository now includes packages NetAddr::IP and Hash::Merge, required by Perfsonar and that some Fedora versions have difficulty finding.

Before we could find the source of the problem, the Internet2 repository was updated in order to include both of the packages that _yum_ could not resolve.  Now, the complete script:

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

{{{
sudo rpm -Uvh http://ftp.freshrpms.net/pub/freshrpms/fedora/linux/8/freshrpms-release/freshrpms-release-1.1-1.fc.noarch.rpm
wget -c http://freshrpms.net/RPM-GPG-KEY-freshrpms
sudo rpm --import http://www.perfsonar.net/download/services/perfSONAR-PS_RPM-GPG-KEY
wget -c http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
sudo rpm -ivh http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
wget -c http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo yum update
sudo yum install perl-perfSONAR_PS-LookupService --nogpgcheck
}}}

 
And this works.

Proceeding to start the hLS service.  Now modify the .conf files accordingly (refer to README):
 
Edit /opt/perfsonar_ps/lookup_service/etc/daemon_logger.conf and set the desired logging method. Here, we choose to display log messages to the screen.  Hence, per instructed within the file, we uncomment the line:
 
 `log4perl.appender.A1=Log::Dispatch::Screen`

And comment the line: 

 `#log4perl.appender.A1=Log::Dispatch::FileRotate` 

 
===== daemon.conf file for planetlab2.cis.upenn.edu =====

File `daemon.conf`:

{{{
<port 9995>
    <endpoint /perfSONAR_PS/services/hLS>
        <gls>
                                                                # just an hLS ... (UPenn, Planetlab virtual, USA)
                        root                            0
                                                                # data TTL = 4 days
                        ls_ttl                          5760
                                                                # 180 minute (3hr) registaration window
                        ls_registration_interval        180
                                                                # 120 miute cleaning/summary window
                        maintenance_interval            120
                                                                # Database options (only change path)
                        metadata_db_file                    glsstore.dbxml
                        metadata_summary_db_file            glsstore-summary.dbxml
                        metadata_db_name                    /var/lib/perfsonar/lookup_service/xmldb
                                                                # Service options (please customize)
                        service_accesspoint             http://planetlab2.cis.upenn.edu:9995/perfSONAR_PS/services/hLS
                        service_description             UPenn Home Lookup Service (Planetlab Virtual, USA)
                        service_name                    UPenn Home Lookup Service
                        service_type                    hLS
                </gls>
                disable                             0
                module                              perfSONAR_PS::Services::LS::gLS
        </endpoint>
</port>
                                                    # 180 minute (3hr) registaration window
ls_registration_interval                        180
disable_echo                                0
                                                    # Root hints info, url + local copy location
root_hints_url                              http://stout.damsl.cis.udel.edu/gls.root.hints
root_hints_file                             /var/lib/perfsonar/lookup_service/hls.root.hints
                                                    # Daemon management, shouldn't need changing
reaper_interval                             20
max_worker_lifetime                             300
max_worker_processes                        30
pid_dir                                     /var/run
pid_file                                        lookup_service.pid
}}}

We planned to use the `screen` command here and run the hLS on a separate terminal using the Perl script, similarly to what was done in _ale_ and _moonshine_.  Planetlab, however, does not support the screen command, because it has no _pts_ terminals.  After a number of hours, sites of fruitless search, we have reached http://lists.planet-lab.org/pipermail/users/2005-September/001645.html.

The service will run through the init.d script:

 `/etc/init.d/lookup_service start`

Per _ale_ log report, this hLS has successfully registered.



==== Current Planetlab Findings ====

The hLS service successfully registers to the gLS at _ale_.  However, a test fakeService running on _ale_ fails to register to this new hLS.  Need to discern why.

There is no firewall at Planetlab nodes.  A rapid look at _ale's_ iptables did not show blocked ports that might be disturbing the fakeService registration to the hLS at `planetlab2.cis.upenn.edu`.

<font color=green>Planetlab is not a stable environment.  Nodes can be rebooted unexpectedly, bringing down the services running on the node.  This may happen especially if a slice is consuming "excessive" resources.  Periodically, the services on Planetlab nodes must be checked for normal operation.</font>


==== Derived Modification in Perfsonar 3 ====

Comprehensive documentation ([http://code.google.com/p/perfsonar-ps/wiki/LocalLSDeployment LocalLSDeployment]) added on installing an LS locally.
 

==== Installing fakeService on planetlab2.cs.columbia.edu ====

===== Attempt 1 on fakeService at planetlab2.cs.columbia.edu =====

Trying a fakeService registering to `planetlab2.cis.upenn.edu` hLS.

{{{
sudo yum install svn cpan unzip make links ncftp ftp
sudo cpan install Data::Random
svn co https://svn.internet2.edu/svn/perfSONAR-PS/
cd perfSONAR-PS/branches/RELEASE_3.1/
sudo cp -r Shared /opt/perfsonar_ps
cd /opt/perfsonar_ps/Shared/client/fakeService 
sudo perl fakeService.pl --verbose --config=./fakeService.config1
}}}

`fakeService` fails with this error:

{{{
could not open /usr/share/dict/words : No such file or directory at /usr/lib/perl5/site_perl/5.8.8/Data/Random/WordList.pm line 41.
}}}

Find the appropriate location of the Words list, or copy the list from another computer to this location in this host.

The Words list can be installed with:
 `sudo yum install words`

Again, listing the install script for fakeService from the beginning:

{{{
sudo yum install svn cpan unzip make links ncftp ftp words
sudo cpan install Data::Random
svn co https://svn.internet2.edu/svn/perfSONAR-PS/
cd perfSONAR-PS/branches/RELEASE_3.1/
sudo cp -r Shared /opt/perfsonar_ps
cd /opt/perfsonar_ps/Shared/client/fakeService 
sudo perl fakeService.pl --verbose --config=./fakeService.config1
}}}

`fakeService` goes through its initial query of configuration parameters.  Again, we are trying to register a `fakeService` to `planetlab2.cis.upenn.edu`.

After the initial configuration, `fakeService` fails to register with the hLS at `planetlab2.cis.upenn.edu`.  This hints that, although the hLS can be seen from a web browser, the hLS is not running properly (there is no firewall at Planetlab nodes).

Note:  As an additional test, we configure the `fakeService` to temporarily register to `moonshine.damsl.cis.udel.edu:7000` hLS.  This time, the `fakeService` successfully registers.  At least, this Planetlab platform works for launching the fakeServices...

We run `planetlab2.cis.upenn.edu` hLS in verbose, screen log mode, and detect that it reports these error messages:

{{{
2009/10/26 17:27:56 (9050) ERROR> daemon.pl:718 main::__ANON__ - Unhandled exception or crash: Can't locate object method "getValue" via package "XML::LibXML::Namespace" at /opt/perfsonar_ps/lookup_service/bin/../lib/perfSONAR_PS/Common.pm line 694.
}}}

{{{
2009/10/26 17:27:56 (9050) DEBUG> Document.pm:414 perfSONAR_PS::XML::Document::getValue - Construction Results: <nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="message.1976931" type="ErrorResponse"><nmwg:metadata id="metadata.14164500"><nmwg:eventType>error.common.internal_error</nmwg:eventType></nmwg:metadata><nmwg:data metadataIdRef="metadata.14164500" id="data.2020620"><nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/">An internal error occurred</nmwgr:datum></nmwg:data></nmwg:message>
}}}

They hint an issue with the method "getValue".

It was suggested that the libxml and libxml2-dev library versions be upgraded to solve the "getValue" method problem.  Running `sudo yum update` or `sudo yum update libxml2` do not update the libraries, since their current versions (2.7.2-2) are the latest versions available in the yum repositories.  Manually installing or upgrading these libraries have already shown to be rather cumbersome, as reported in the several attempts for _ale_ above.  We postpone this endeavour until the systems involved become more user-friendly (sigh?), or until the user replenishes anti-headache pill stack.

Planetlab can still be used to deploy `fakeService` instances.  Therefore, we create more `fakeService` instances <font color=green>registering to _moonshine_</font>.  `fake1-planetlab2.columbia.edu` is currently set to register to `planetlab2.cis.upenn.edu` hLS; since this hLS is not operating correctly due to the "getValue" method problem, the `fakeService` fails to register.


==== Fixing "getValue" Error on PlanetLab Nodes ====

The "getValue" problem reported earlier is due to an old Perl library, namely XML::LibXML version 1.620001-2.  This is the output obtained from `planetlab2.cs.columbia.edu`:

{{{
$ rpm -qa | grep XML
perl-XML-NamespaceSupport-1.09-2.fc8.1
perl-XML-DOM-1.44-2.fc8.1
perl-XML-LibXML-1.62001-2.fc8.3      <--- problem library
perl-XML-SAX-0.16-2.fc8
perl-XML-RegExp-0.03-2.fc8.1
perl-XML-LibXML-Common-0.13-9
perl-XML-Parser-2.36-1.fc8.rf
}}}

Yum will not update this library; the procedure has to be manual.  The update script below is (c) Jason Zurawski with the help of Internet2 repository.

Download RPM package from Internet2 repository:
 `wget -c http://software.internet2.edu/rpms/i386/main/RPMS/perl-XML-LibXML-1.69-2.pSPS.i386.rpm`
 
Remove current XML::LibXML from system (commanding `yum localinstall` will not work):

 `sudo rpm -e --nodeps perl-XML-LibXML-1.62001-2.fc8.3`
 
Force install the new package:

 `sudo rpm -ivh --force perl-XML-LibXML-1.69-2.pSPS.i386.rpm`

The system reports messages regarding existing symbolic links, but the procedure is successful.

Let us install one more gLS in a Planetlab node, thus reporting the complete working script.


==== Preparing plink.cs.uwaterloo.ca ====

===== Background =====

This server _plink.cs.uwaterloo.ca_ is Fedora release 8 (Werewolf), linux core 2.6.22.19-vs2.3.0.34.39.planetlab.

===== Attempt 1 (plink.cs.uwaterloo.ca) - Working Script =====

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

{{{
sudo rpm -Uvh http://ftp.freshrpms.net/pub/freshrpms/fedora/linux/8/freshrpms-release/freshrpms-release-1.1-1.fc.noarch.rpm
wget -c http://freshrpms.net/RPM-GPG-KEY-freshrpms
sudo rpm --import http://www.perfsonar.net/download/services/perfSONAR-PS_RPM-GPG-KEY
wget -c http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
sudo rpm -ivh http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
wget -c http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo yum update --nogpgcheck
sudo yum install perl-perfSONAR_PS-LookupService --nogpgcheck
sudo yum install libxml2-devel
wget -c http://software.internet2.edu/rpms/i386/main/RPMS/perl-XML-LibXML-1.69-2.pSPS.i386.rpm
sudo rpm -e --nodeps perl-XML-LibXML-1.62001-2.fc8.3 
sudo rpm -ivh --force perl-XML-LibXML-1.69-2.pSPS.i386.rpm
}}}

In this case, we had to perform and additional `sudo yum install libxml2-devel` command, and add the `--nogpgcheck` paramenter to `sudo yum update`.

Proceeding to start the gLS service.  Modify the .conf files accordingly (refer to README):
 
Edit /opt/perfsonar_ps/lookup_service/etc/daemon_logger.conf and set the desired logging method. Here, we choose to display log messages to the screen.  Hence, per instructed within the file, we uncomment the line:
 
 `log4perl.appender.A1=Log::Dispatch::Screen`

And comment the line: 

 `#log4perl.appender.A1=Log::Dispatch::FileRotate`

 
===== daemon.conf file for plink.cs.uwaterloo.ca =====

File `daemon.conf`:

{{{
<port 9995>
    <endpoint /perfSONAR_PS/services/gLS>
        <gls>
                                                                # just an gLS ... (University of Waterloo, Planetlab virtual, Canada)
                        root                            1
                                                                # data TTL = 4 days
                        ls_ttl                          5760
                                                                # 180 minute (3hr) registaration window
                        ls_registration_interval        180
                                                                # 120 miute cleaning/summary window
                        maintenance_interval            120
                                                                # Database options (only change path)
                        metadata_db_file                    glsstore.dbxml
                        metadata_summary_db_file            glsstore-summary.dbxml
                        metadata_db_name                    /var/lib/perfsonar/lookup_service/xmldb
                                                                # Service options (please customize)
                        service_accesspoint             http://plink.cs.uwaterloo.ca:9995/perfSONAR_PS/services/gLS
                        service_description             University of Waterloo Global Lookup Service (Planetlab virtual, Canada)
                        service_name                    University of Waterloo Global Lookup Service
                        service_type                    gLS
                </gls>
                disable                             0
                module                              perfSONAR_PS::Services::LS::gLS
        </endpoint>
</port>
                                                    # 180 minute (3hr) registaration window
ls_registration_interval                        180
disable_echo                                0
                                                    # Root hints info, url + local copy location
root_hints_url                              http://stout.damsl.cis.udel.edu/gls.root.hints
root_hints_file                             /var/lib/perfsonar/lookup_service/hls.root.hints
                                                    # Daemon management, shouldn't need changing
reaper_interval                             20
max_worker_lifetime                             300
max_worker_processes                        30
pid_dir                                     /var/run
pid_file                                        lookup_service.pid
}}}

The service will run through the init.d script:

 `/etc/init.d/lookup_service start`

We have to update the gLS cloud file `gls.root.hints` at _stout_ to reflect the newly added gLS server.  The file is located at `/var/www/external/gls.root.hints`.  The new contents is:

{{{
http://ale.damsl.cis.udel.edu:7000/perfSONAR_PS/services/gLS
http://planetlab2.cs.columbia.edu:9995/perfSONAR_PS/services/gLS
http://plink.cs.uwaterloo.ca:9995/perfSONAR_PS/services/gLS
}}}


==== Preparing onelab-1.fhi-fokus.de ====

===== Background =====

This server _onelab-1.fhi-fokus.de_ is Fedora release 8 (Werewolf), linux core 2.6.22.19-vs2.3.0.34.39.planetlab.

===== Attempt 1 (onelab-1.fhi-fokus.de) - Working Script =====

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

{{{
sudo rpm -Uvh http://ftp.freshrpms.net/pub/freshrpms/fedora/linux/8/freshrpms-release/freshrpms-release-1.1-1.fc.noarch.rpm
wget -c http://freshrpms.net/RPM-GPG-KEY-freshrpms
sudo rpm --import http://www.perfsonar.net/download/services/perfSONAR-PS_RPM-GPG-KEY
wget -c http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
sudo rpm -ivh http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
wget -c http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo yum update --nogpgcheck
sudo yum install perl-perfSONAR_PS-LookupService --nogpgcheck
sudo yum install libxml2-devel
sudo yum update --nogpgcheck
wget -c http://software.internet2.edu/rpms/i386/main/RPMS/perl-XML-LibXML-1.69-2.pSPS.i386.rpm
sudo rpm -e --nodeps perl-XML-LibXML-1.62001-2.fc8.3 
sudo rpm -ivh --force perl-XML-LibXML-1.69-2.pSPS.i386.rpm
}}}

In this case, we had to perform and additional `sudo yum install libxml2-devel` command, and add the `--nogpgcheck` parameter to `sudo yum update`.

Proceeding to start the gLS service.  Modify the .conf files accordingly (refer to README):
 
Edit /opt/perfsonar_ps/lookup_service/etc/daemon_logger.conf and set the desired logging method. Here, we choose to display log messages to the screen.  Hence, per instructed within the file, we uncomment the line:
 
 `log4perl.appender.A1=Log::Dispatch::Screen`

And comment the line: 

 `#log4perl.appender.A1=Log::Dispatch::FileRotate` 

 
===== daemon.conf file for onelab-1.fhi-fokus.de =====

File `daemon.conf`:

{{{
<port 9995>
    <endpoint /perfSONAR_PS/services/hLS>
        <gls>
                                                                # just an hLS ... (Fraunhofer Fokus, Planetlab virtual, Germany)
                        root                            0
                                                                # data TTL = 4 days
                        ls_ttl                          5760
                                                                # 180 minute (3hr) registaration window
                        ls_registration_interval        180
                                                                # 120 miute cleaning/summary window
                        maintenance_interval            120
                                                                # Database options (only change path)
                        metadata_db_file                    glsstore.dbxml
                        metadata_summary_db_file            glsstore-summary.dbxml
                        metadata_db_name                    /var/lib/perfsonar/lookup_service/xmldb
                                                                # Service options (please customize)
                        service_accesspoint             http://onelab-1.fhi-fokus.de:9995/perfSONAR_PS/services/hLS
                        service_description             Fraunhofer Fokus Home Lookup Service (Planetlab virtual, Germany)
                        service_name                    Fraunhofer Fokus Home Lookup Service
                        service_type                    hLS
                </gls>
                disable                             0
                module                              perfSONAR_PS::Services::LS::gLS
        </endpoint>
</port>
                                                    # 180 minute (3hr) registaration window
ls_registration_interval                        180
disable_echo                                0
                                                    # Root hints info, url + local copy location
root_hints_url                              http://stout.damsl.cis.udel.edu/gls.root.hints
root_hints_file                             /var/lib/perfsonar/lookup_service/hls.root.hints
                                                    # Daemon management, shouldn't need changing
reaper_interval                             20
max_worker_lifetime                             300
max_worker_processes                        30
pid_dir                                     /var/run
pid_file                                        lookup_service.pid
}}}

The service will run through the init.d script:

 `/etc/init.d/lookup_service start`
 
 
==== Preparing plonk.cs.uwaterloo.ca ====

===== Background =====

This server _plonk.cs.uwaterloo.ca_ is Fedora release 8 (Werewolf), linux core 2.6.22.19-vs2.3.0.34.39.planetlab.

===== Attempt 1 (plonk.cs.uwaterloo.ca) - Working Script =====

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

{{{
sudo rpm -Uvh http://ftp.freshrpms.net/pub/freshrpms/fedora/linux/8/freshrpms-release/freshrpms-release-1.1-1.fc.noarch.rpm
wget -c http://freshrpms.net/RPM-GPG-KEY-freshrpms
sudo rpm --import http://www.perfsonar.net/download/services/perfSONAR-PS_RPM-GPG-KEY
wget -c http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
sudo rpm -ivh http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
wget -c http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo yum update --nogpgcheck
sudo yum install perl-perfSONAR_PS-LookupService --nogpgcheck
sudo yum install libxml2-devel
wget -c http://software.internet2.edu/rpms/i386/main/RPMS/perl-XML-LibXML-1.69-2.pSPS.i386.rpm
sudo rpm -e --nodeps perl-XML-LibXML-1.62001-2.fc8.3 
sudo rpm -ivh --force perl-XML-LibXML-1.69-2.pSPS.i386.rpm
}}}

In this case, we had to perform and additional `sudo yum install libxml2-devel` command, and add the `--nogpgcheck` paramenter to `sudo yum update`.

Proceeding to start the hLS service.  Modify the .conf files accordingly (refer to README):
 
Edit /opt/perfsonar_ps/lookup_service/etc/daemon_logger.conf and set the desired logging method. Here, we choose to display log messages to the screen.  Hence, per instructed within the file, we uncomment the line:
 
 `log4perl.appender.A1=Log::Dispatch::Screen`

And comment the line: 

 `#log4perl.appender.A1=Log::Dispatch::FileRotate`

 
===== daemon.conf file for plonk.cs.uwaterloo.ca =====

File `daemon.conf`:

{{{
<port 9995>
    <endpoint /perfSONAR_PS/services/hLS>
        <gls>
                                                                # just an hLS ... (University of Waterloo, Planetlab virtual, Canada)
                        root                            0
                                                                # data TTL = 4 days
                        ls_ttl                          5760
                                                                # 180 minute (3hr) registaration window
                        ls_registration_interval        180
                                                                # 120 miute cleaning/summary window
                        maintenance_interval            120
                                                                # Database options (only change path)
                        metadata_db_file                    glsstore.dbxml
                        metadata_summary_db_file            glsstore-summary.dbxml
                        metadata_db_name                    /var/lib/perfsonar/lookup_service/xmldb
                                                                # Service options (please customize)
                        service_accesspoint             http://plonk.cs.uwaterloo.ca:9995/perfSONAR_PS/services/hLS
                        service_description             University of Waterloo Home Lookup Service (Planetlab virtual, Canada)
                        service_name                    University of Waterloo Home Lookup Service
                        service_type                    hLS
                </gls>
                disable                             0
                module                              perfSONAR_PS::Services::LS::gLS
        </endpoint>
</port>
                                                    # 180 minute (3hr) registaration window
ls_registration_interval                        180
disable_echo                                0
                                                    # Root hints info, url + local copy location
root_hints_url                              http://stout.damsl.cis.udel.edu/gls.root.hints
root_hints_file                             /var/lib/perfsonar/lookup_service/hls.root.hints
                                                    # Daemon management, shouldn't need changing
reaper_interval                             20
max_worker_lifetime                             300
max_worker_processes                        30
pid_dir                                     /var/run
pid_file                                        lookup_service.pid
}}}

The service will run through the init.d script:

 `/etc/init.d/lookup_service start`
 
===== Installing fakeService on plonk.cs.uwaterloo.ca =====

Install script for fakeService:

{{{
sudo yum install svn cpan unzip make links ncftp ftp words
sudo cpan install Data::Random
svn co https://svn.internet2.edu/svn/perfSONAR-PS/
cd perfSONAR-PS/branches/RELEASE_3.1.1/
sudo cp -r Shared /opt/perfsonar_ps
cd /opt/perfsonar_ps/Shared/client/fakeService 
sudo perl fakeService.pl --verbose --config=./fakeService.config
}}}


==== Preparing cs-planetlab3.cs.surrey.sfu.ca ====

===== Background =====

This server _cs-planetlab3.cs.surrey.sfu.ca_ is Fedora release 8 (Werewolf), linux core 2.6.22.19-vs2.3.0.34.39.planetlab.

===== Attempt 1 (cs-planetlab3.cs.surrey.sfu.ca) - Working Script =====

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

{{{
sudo rpm -Uvh http://ftp.freshrpms.net/pub/freshrpms/fedora/linux/8/freshrpms-release/freshrpms-release-1.1-1.fc.noarch.rpm
wget -c http://freshrpms.net/RPM-GPG-KEY-freshrpms
sudo rpm --import http://www.perfsonar.net/download/services/perfSONAR-PS_RPM-GPG-KEY
wget -c http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
sudo rpm -ivh http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
wget -c http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo yum update --nogpgcheck
sudo yum install perl-perfSONAR_PS-LookupService --nogpgcheck
sudo yum install libxml2-devel
wget -c http://software.internet2.edu/rpms/i386/main/RPMS/perl-XML-LibXML-1.69-2.pSPS.i386.rpm
sudo rpm -e --nodeps perl-XML-LibXML-1.62001-2.fc8.3 
sudo rpm -ivh --force perl-XML-LibXML-1.69-2.pSPS.i386.rpm
}}}

In this case, we had to perform and additional `sudo yum install libxml2-devel` command, and add the `--nogpgcheck` paramenter to `sudo yum update`.

 
===== Installing fakeService on cs-planetlab3.cs.surrey.sfu.ca =====

Install script for fakeService:

{{{
sudo yum install svn cpan unzip make links ncftp ftp words
sudo cpan install Data::Random
svn co https://svn.internet2.edu/svn/perfSONAR-PS/
cd perfSONAR-PS/branches/RELEASE_3.1.1/
sudo cp -r Shared /opt/perfsonar_ps
cd /opt/perfsonar_ps/Shared/client/fakeService 
sudo perl fakeService.pl --verbose --config=./fakeService.config
}}}
	
	
==== Preparing cs-planetlab4.cs.surrey.sfu.ca ====

===== Background =====

This server _cs-planetlab4.cs.surrey.sfu.ca_ is Fedora release 8 (Werewolf), linux core 2.6.22.19-vs2.3.0.34.39.planetlab.

===== Attempt 1 (cs-planetlab4.cs.surrey.sfu.ca) - Working Script =====

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

{{{
sudo rpm -Uvh http://ftp.freshrpms.net/pub/freshrpms/fedora/linux/8/freshrpms-release/freshrpms-release-1.1-1.fc.noarch.rpm
wget -c http://freshrpms.net/RPM-GPG-KEY-freshrpms
sudo rpm --import http://www.perfsonar.net/download/services/perfSONAR-PS_RPM-GPG-KEY
wget -c http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
sudo rpm -ivh http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
wget -c http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo yum update --nogpgcheck
sudo yum install perl-perfSONAR_PS-LookupService --nogpgcheck
sudo yum install libxml2-devel
wget -c http://software.internet2.edu/rpms/i386/main/RPMS/perl-XML-LibXML-1.69-2.pSPS.i386.rpm
sudo rpm -e --nodeps perl-XML-LibXML-1.62001-2.fc8.3 
sudo rpm -ivh --force perl-XML-LibXML-1.69-2.pSPS.i386.rpm
}}}

In this case, we had to perform and additional `sudo yum install libxml2-devel` command, and add the `--nogpgcheck` paramenter to `sudo yum update`.

 
===== Installing fakeService on cs-planetlab4.cs.surrey.sfu.ca =====

Install script for fakeService:

{{{
sudo yum install svn cpan unzip make links ncftp ftp words
sudo cpan install Data::Random
svn co https://svn.internet2.edu/svn/perfSONAR-PS/
cd perfSONAR-PS/branches/RELEASE_3.1.1/
sudo cp -r Shared /opt/perfsonar_ps
cd /opt/perfsonar_ps/Shared/client/fakeService 
sudo perl fakeService.pl --verbose --config=./fakeService.config
}}}


==== Preparing pl1.bit.uoit.ca ====

===== Background =====

This server _pl1.bit.uoit.ca_ is Fedora release 8 (Werewolf), linux core 2.6.22.19-vs2.3.0.34.39.planetlab.

===== Attempt 1 (pl1.bit.uoit.ca) - Working Script =====

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

{{{
sudo rpm -Uvh http://ftp.freshrpms.net/pub/freshrpms/fedora/linux/8/freshrpms-release/freshrpms-release-1.1-1.fc.noarch.rpm
wget -c http://freshrpms.net/RPM-GPG-KEY-freshrpms
sudo rpm --import http://www.perfsonar.net/download/services/perfSONAR-PS_RPM-GPG-KEY
wget -c http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
sudo rpm -ivh http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
wget -c http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo yum update --nogpgcheck
sudo yum install perl-perfSONAR_PS-LookupService --nogpgcheck
sudo yum install libxml2-devel
wget -c http://software.internet2.edu/rpms/i386/main/RPMS/perl-XML-LibXML-1.69-2.pSPS.i386.rpm
sudo rpm -e --nodeps perl-XML-LibXML-1.62001-2.fc8.3 
sudo rpm -ivh --force perl-XML-LibXML-1.69-2.pSPS.i386.rpm
}}}

In this case, we had to perform and additional `sudo yum install libxml2-devel` command, and add the `--nogpgcheck` paramenter to `sudo yum update`.

 
===== Installing fakeService on pl1.bit.uoit.ca =====

Install script for fakeService:

{{{
sudo yum install svn cpan unzip make links ncftp ftp words
sudo cpan install Data::Random
svn co https://svn.internet2.edu/svn/perfSONAR-PS/
cd perfSONAR-PS/branches/RELEASE_3.1.1/
sudo cp -r Shared /opt/perfsonar_ps
cd /opt/perfsonar_ps/Shared/client/fakeService 
sudo perl fakeService.pl --verbose --config=./fakeService.config
}}}

==== Preparing pl1.csl.utoronto.ca ====

===== Background =====

This server _pl1.csl.utoronto.ca_ is Fedora release 8 (Werewolf), linux core 2.6.22.19-vs2.3.0.34.39.planetlab.

===== Attempt 1 (pl1.csl.utoronto.ca) - Working Script =====

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

{{{
sudo rpm -Uvh http://ftp.freshrpms.net/pub/freshrpms/fedora/linux/8/freshrpms-release/freshrpms-release-1.1-1.fc.noarch.rpm
wget -c http://freshrpms.net/RPM-GPG-KEY-freshrpms
sudo rpm --import http://www.perfsonar.net/download/services/perfSONAR-PS_RPM-GPG-KEY
wget -c http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
sudo rpm -ivh http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
wget -c http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo yum update --nogpgcheck
sudo yum install perl-perfSONAR_PS-LookupService --nogpgcheck
sudo yum install libxml2-devel
wget -c http://software.internet2.edu/rpms/i386/main/RPMS/perl-XML-LibXML-1.69-2.pSPS.i386.rpm
sudo rpm -e --nodeps perl-XML-LibXML-1.62001-2.fc8.3 
sudo rpm -ivh --force perl-XML-LibXML-1.69-2.pSPS.i386.rpm
}}}

In this case, we had to perform and additional `sudo yum install libxml2-devel` command, and add the `--nogpgcheck` paramenter to `sudo yum update`.

 
===== Installing fakeService on pl1.csl.utoronto.ca =====

Install script for fakeService:

{{{
sudo yum install svn cpan unzip make links ncftp ftp words
sudo cpan install Data::Random
svn co https://svn.internet2.edu/svn/perfSONAR-PS/
cd perfSONAR-PS/branches/RELEASE_3.1.1/
sudo cp -r Shared /opt/perfsonar_ps
cd /opt/perfsonar_ps/Shared/client/fakeService 
sudo perl fakeService.pl --verbose --config=./fakeService.config
}}}


==== Preparing pl1.rcc.uottawa.ca ====

===== Background =====

This server _pl1.rcc.uottawa.ca_ is Fedora release 8 (Werewolf), linux core 2.6.22.19-vs2.3.0.34.39.planetlab.

===== Attempt 1 (pl1.rcc.uottawa.ca) - Working Script =====

In `/etc/yum.repos.d`, add file `rpmforge.repo`:

{{{
[rpmforge]
name=Fedora Core $releasever - $basearch - rpmforge
mirrorlist=http://apt.sw.be/fedora/$releasever/en/mirrors-rpmforge
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY.dag.txt
gpgcheck=1
}}}

{{{
sudo rpm -Uvh http://ftp.freshrpms.net/pub/freshrpms/fedora/linux/8/freshrpms-release/freshrpms-release-1.1-1.fc.noarch.rpm
wget -c http://freshrpms.net/RPM-GPG-KEY-freshrpms
sudo rpm --import http://www.perfsonar.net/download/services/perfSONAR-PS_RPM-GPG-KEY
wget -c http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
sudo rpm -ivh http://software.internet2.edu/Internet2-repo-0.1-2.noarch.rpm
wget -c http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
sudo rpm --import RPM-GPG-KEY.dag.txt
sudo yum update --nogpgcheck
sudo yum install perl-perfSONAR_PS-LookupService --nogpgcheck
sudo yum install libxml2-devel
wget -c http://software.internet2.edu/rpms/i386/main/RPMS/perl-XML-LibXML-1.69-2.pSPS.i386.rpm
sudo rpm -e --nodeps perl-XML-LibXML-1.62001-2.fc8.3 
sudo rpm -ivh --force perl-XML-LibXML-1.69-2.pSPS.i386.rpm
}}}

In this case, we had to perform and additional `sudo yum install libxml2-devel` command, and add the `--nogpgcheck` paramenter to `sudo yum update`.

 
===== Installing fakeService on pl1.rcc.uottawa.ca =====

Install script for fakeService:

{{{
sudo yum install svn cpan unzip make links ncftp ftp words
sudo cpan install Data::Random
svn co https://svn.internet2.edu/svn/perfSONAR-PS/
cd perfSONAR-PS/branches/RELEASE_3.1.1/
sudo cp -r Shared /opt/perfsonar_ps
cd /opt/perfsonar_ps/Shared/client/fakeService 
sudo perl fakeService.pl --verbose --config=./fakeService.config
}}}


== Report on Results ==

=== Goals ===

The purposes of the following tests are mainly:
 *  Investigate scalability limits for the Lookup Service
 *  Ascertain that data remains consistent with different loads on the LS service
 *  Reproduce and inspect XMLDB locking issues
 
=== Experimental Part ===

==== Resources ====

The servers will include machines at the Distributed and Meta-Systems Laboratory (DAMSL) at [http://www.udel.edu University of Delaware] and virtual machines from [http://www.planet-lab.org Planetlab].  They will be accessed remotely using SSH.  The Lookup Service and fakeService client will be installed and configured on these machines, as described earlier in this document.

For querying the hLS and measuring response time, we will mainly utilize the visualization tool named ICE - Internet Computer network Eye, built by Ivo Kenji Koga and Tassio Ferreira Vale, from [http://www.unifacs.edu.br Universidade Salvador].  The tool is available at http://wiki.nuperc.unifacs.br/ice/.  A special bundle ([http://perfsonar-ps.googlecode.com/svn/wiki/LSScalabilityInvestigation/WSPlayGroundViewBundle_timings.jar WSPlayGroundViewBundle with timings]) was modified in order to obtain the time elapsed between a query and a response from an LS server.

The tool, built in Java, works by transmiting an XML request to the server, and showing the received XML response.  The timing, therefore, comprehends processing by the server, and also transmission delays between the client running ICE and the server.

The complete XML query message sent to the hLS is:

{{{
<nmwg:message type="LSQueryRequest"
		  id="msg1"
		  xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
		  xmlns:xquery="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0/">
<nmwg:metadata id="meta1">  
<xquery:subject id="sub1">
  declare namespace perfsonar='http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/'; 
  declare namespace nmwg='http://ggf.org/ns/nmwg/base/2.0/'; 
  declare namespace psservice='http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/'; 
  declare namespace nmwgt='http://ggf.org/ns/nmwg/topology/2.0/'; 
  declare namespace netutil='http://ggf.org/ns/nmwg/characteristic/utilization/2.0/';            
  /nmwg:store[@type='LSStore']/nmwg:metadata
</xquery:subject>
<nmwg:eventType>service.lookup.xquery</nmwg:eventType>    
</nmwg:metadata>  
<nmwg:data metadataIdRef="meta1" id="d1"/>
</nmwg:message>
}}}

===== fakeService Client Configuration =====

The fakeServices take basically the configuration exemplified below:

{{{
Service.config
domain     mainframe.edu
ip     51.106.c.d
key     0e2e12f4e0a7845cb5b35494bfbad7aa
keywords     LHC
ls     http://onelab-1.fhi-fokus.de:9995/perfSONAR_PS/services/hLS
ls_interval     60
md_number     10
type     snmp
}}}

Each client will re-register itself with the hLS every 60 seconds, a deliberate heavy load behavior.

To automate deployment, a simple script to run several fakeServices can be built into a file (e.g. `runfake`).  The example below runs 10 instances of fakeService in background:

{{{
for (( i = 1 ; i <= 10; i++ ))
do
        sudo perl fakeService.pl --config=./fakeService.config &
done
}}}

The file must afterwards be made executable.  For instance:

`sudo chmod 777 runfake`

After the testing is concluded, the fakeService instances can be killed with:

`sudo killall perl`

This command will also kill other `perl` jobs.  For Planetlab nodes that are executing fakeServices only, this is not a problem.  For other cases, proper slaughtering of the fakeServices must be devised.

==== Procedure ====

The testing procedure consists of:

 * Build a cloud of hLSs and gLSs.
 * Install fakeService clients on specific nodes.
 * Choose a hLS and have the fakeService clients register to it in controlled numbers (10, 30, 50, 100, 250).
  * Distribute the fakeService clients among nodes so as to avoid overloading a single node with too many clients.  Again, all fakeService clients will register to one hLS.
 * Select a computer or location from where to deploy queries to the hLS.  Ideally, the location or computer must remain the same throughout all the measurements to be performed to the hLS being investigated.  For the following measurements, the client was located in Newark, DE, connected through comcast.net network.
 * When registration of all fakeService clients is successful, query the hLS (type="LSQueryRequest) for `@type='LSSTORE'` and *measure* the time between the query and the hLS response.  Do this for all numbers of registered fakeService clients (10, 30, 50, 100, 250).
 * Record the contents of selected responses and sizes of directories and databases for later analysis.

=== Results and Discussion ===
 
==== Miscellaneous ====

===== Planetlab planetlab2.cs.columbia.edu Exhausted Resources =====

The _columbia_ node was reset by Planetlab monitoring watchdog due to exhausted resources on Nov 1, 2009.  Currently, this node has one gLS and 10 `fakeService` instances.  Planetlab's resource mapping by the time of reset follows:

{{{
top - 02:02:19 up 30 days,  3:53,  0 users,  load average: 27.75, 20.99, 19.76
Tasks:  18 total,  11 running,   7 sleeping,   0 stopped,   0 zombie
Cpu(s): 61.5%us, 31.2%sy,  0.0%ni,  0.0%id,  0.0%wa,  0.0%hi,  7.3%si,  0.0%st
Mem:   1034760k total,  1020808k used,    13952k free,    15220k buffers
Swap:  1048568k total,   643168k used,   405400k free,   142420k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND            
 3015 root      18   0 12556 9240 2076 R  6.7  0.9   0:01.47 perl               
 2583 root      18   0 12556 9232 2076 R  1.7  0.9   0:01.51 perl               
 6812 udel_per  15   0  2276  964  796 R  0.3  0.1   0:00.04 top                
 2013 root      19   0 12556 9244 2076 R  0.0  0.9   0:01.68 perl               
 2091 root      18   0 12556 9244 2076 D  0.0  0.9   0:01.74 perl               
 2186 root      19   0 12560 9244 2076 R  0.0  0.9   0:01.72 perl               
 2369 root      18   0 12560 9244 2076 R  0.0  0.9   0:01.26 perl               
 3463 root      18   0 12560 9244 2076 R  0.0  0.9   0:01.69 perl               
 4083 root      18   0 12556 9240 2076 R  0.0  0.9   0:01.71 perl               
 4966 root      19   0 12560 9244 2076 R  0.0  0.9   0:01.71 perl               
 5436 root      18   0 12556 9240 2076 R  0.0  0.9   0:01.63 perl               
 6144 perfsona  18   0 38820 4736 1072 R  0.0  0.5   0:00.00 daemon.pl          
 8045 perfsona  18   0 38820 4748 1080 D  0.0  0.5   0:00.00 daemon.pl          
27003 udel_per  15   0  2632 1440 1176 S  0.0  0.1   0:00.06 bash               
27069 perfsona  19   0 38820 1028  616 S  0.0  0.1   0:00.00 daemon.pl          
27070 perfsona  18   0 38820 4456 1324 S  0.0  0.4   0:01.27 daemon.pl       
}}}

This is not a performance issue with PerfSONAR, but with Planetlab virtual system resource limitations.  The aim is to avoid further node resets in Planetlab, by experimenting with values in the file `DB_CONFIG` at `/var/lib/perfsonar/lookup_service/xmldb` in order to diminish the resources used by the LS instance.  We modify two parameters to 50% of their original values, as seen below:

|| *Parameter* || *Current Value* || *New Value* ||
|| set_lock_timeout || 5000 || <font color=green> <i>unmodified</i> </font> ||
|| set_txn_timeout ||  5000 || <font color=green> <i>unmodified</i> </font> ||
|| set_lk_max_lockers ||  500000 || <font color=green> <i>unmodified</i> </font> ||
|| set_lk_max_locks ||  500000 || <font color=red> 250000 </font> ||
|| set_lk_max_objects ||  500000 || <font color=green> <i>unmodified</i> </font> ||
|| set_lk_detect ||  DB_LOCK_MINLOCKS || <font color=green> <i>unmodified</i> </font> ||
|| set_cachesize ||  0 33554432 0 || <font color=red>0 16777216 0</font> ||
|| set_flags ||  DB_LOG_AUTOREMOVE || <font color=green> <i>unmodified</i> </font> ||
|| set_lg_regionmax ||  2097152 || <font color=green> <i>unmodified</i> </font> ||

Next, we restart the local gLS and 10 `fakeService` instances.  The `fakeService` instances do start and register, but the local gLS seems to hang and do not go up after several minutes.  `Top` command output, before the gLS goes up completely, follows:

{{{
top - 21:04:36 up 30 days, 22:55,  0 users,  load average: 14.17, 17.19, 19.01
Tasks:  14 total,   1 running,  13 sleeping,   0 stopped,   0 zombie
Cpu(s): 59.0%us, 33.3%sy,  0.0%ni,  0.0%id,  0.0%wa,  0.0%hi,  7.7%si,  0.0%st
Mem:   1034760k total,  1021212k used,    13548k free,    21100k buffers
Swap:  1048568k total,   601920k used,   446648k free,   201672k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND            
 7323 root      18   0  2580 1100  952 S  0.0  0.1   0:00.02 lookup_service     
 7484 perfsona  18   0  301m  27m 7656 S  0.0  2.7   0:01.86 daemon.pl          
 9282 udel_per  15   0  2632 1440 1176 S  0.0  0.1   0:00.02 bash               
 9342 udel_per  15   0  2272  960  796 R  0.0  0.1   0:00.10 top                
13991 root      17   0 16404  12m 2648 S  0.0  1.2   0:10.87 perl               
13992 root      15   0 16412  11m 2648 S  0.0  1.2   0:10.89 perl               
13993 root      18   0 16404  11m 2648 S  0.0  1.2   0:10.87 perl               
13994 root      16   0 16404  11m 2648 S  0.0  1.2   0:10.88 perl               
13995 root      15   0 16400 9752 2648 S  0.0  0.9   0:10.92 perl               
13996 root      16   0 16408 8708 2648 S  0.0  0.8   0:11.11 perl               
13997 root      18   0 16412 8752 2648 S  0.0  0.8   0:11.09 perl               
14027 root      17   0 16408  13m 2648 S  0.0  1.3   0:11.15 perl               
14032 root      17   0 16408  11m 2648 S  0.0  1.1   0:11.02 perl               
14036 root      17   0 16524  13m 2648 S  0.0  1.3   0:11.02 perl
}}}

Unable to resolve this particular issue, it was chosen to reset and reinstall the LS on this node, using the _default configuration_ for DB_CONFIG.

===== Attempting Install of view.cgi script =====

It would be interesting if a timestamp were included in the output of this script, in order to convey the time elapsed between the request and response of the script.

An attempt to install perfAdmin in `plink.cs.uwaterloo.ca` was made with the command:

 `sudo yum install perl-perfSONAR_PS-perfAdmin --nogpgcheck`
 
And it was successful.  Venturing `http://plink.cs.uwaterloo.ca/perfAdmin` should display the directory list, as written in the INSTALL.  It does not work, however.

===== Status Nov 29, 2009 =====

After a number of days, the services in `moonshine`, `ale`, and most Planetlab nodes were stopped, probably due to server rebooting.  The hLS at `planetlab2.cis.upenn.edu` refuses to start again, and node `planetlab2.cs.columbia.edu` is inaccessible.   These Planetlab nodes will be reinstalled.

==== Response Timings ====

The ICE tool request/response timings are tabulated below.

For the hLS, different quantities of fakeServices are registered.  The hLS is then queried using ICE and the response time is reported (the response time obviously includes the roundtrip communication between client/server).

http://perfsonar-ps.googlecode.com/svn/wiki/LSScalabilityInvestigation/response_timings.png

The response outputs from `onelab-1.fhi-fokus.de` for 100 and 250 registered services, as obtained from the `view.cgi` script from perfAdmin, are below.

 * [http://perfsonar-ps.googlecode.com/svn/wiki/LSScalabilityInvestigation/onelab-1_fhi-fokus_de-output100.html Response output from onelab-1.fhi-fokus.de for 100 registered services.]
 * [http://perfsonar-ps.googlecode.com/svn/wiki/LSScalabilityInvestigation/onelab-1_fhi-fokus_de-output250.html Response output from onelab-1.fhi-fokus.de for 250 registered services.]


==== Output of `top` Command for 250 Registered fakeServices on `onelab-1.fhi-fokus.de` ====

{{{
top - 18:27:27 up 9 days,  8:57,  0 users,  load average: 1.59, 0.95, 0.78
Tasks:   9 total,   3 running,   6 sleeping,   0 stopped,   0 zombie
Cpu(s):  2.4%us,  1.1%sy,  0.0%ni, 96.0%id,  0.4%wa,  0.0%hi,  0.1%si,  0.0%st
Mem:   2074280k total,  1963648k used,   110632k free,   187356k buffers
Swap:  1048568k total,       32k used,  1048536k free,   888124k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND           
 7656 perfsona  15   0 35928  17m 1200 S    1  0.9  56:59.84 daemon.pl          
15364 perfsona  17   0  132m  26m 8952 R    1  1.3   0:00.04 daemon.pl          
15365 perfsona  17   0  299m  23m 6516 R    1  1.2   0:00.03 daemon.pl          
 7655 perfsona  15   0 35928  17m  748 S    0  0.9   0:00.00 daemon.pl          
 7659 perfsona  17   0  389m 379m 8564 S    0 18.8  78:40.10 daemon.pl          
 7660 perfsona  20   0 45108  33m 8200 S    0  1.7   4:22.47 daemon.pl          
14920 udel_per  16   0  2628 1416 1176 S    0  0.1   0:00.00 bash               

15342 perfsona  15   0  299m  22m 5132 S    0  1.1   0:00.02 daemon.pl  

==== XMLDB Directory Size for 250 Registered fakeServices on `onelab-1.fhi-fokus.de` ====

$cd /var/lib/perfsonar/lookup_service/xmldb
$ls -l
total 202068
-rw-r--r-- 1 perfsonar perfsonar       230 Feb 13 02:26 DB_CONFIG
-rw-r----- 1 perfsonar perfsonar     24576 Feb 13 02:26 __db.001
-rw-r----- 1 perfsonar perfsonar  58990592 Feb 13 02:26 __db.002
-rw-r----- 1 perfsonar perfsonar  41951232 Feb 13 02:26 __db.003
-rw-r----- 1 perfsonar perfsonar   2129920 Feb 13 02:26 __db.004
-rw-r----- 1 perfsonar perfsonar 172990464 Feb 13 02:26 __db.005
-rw-r----- 1 perfsonar perfsonar     40960 Feb 13 02:26 __db.006
-rw-r----- 1 perfsonar perfsonar   2850816 Feb 18 17:45 glsstore-summary.dbxml
-rw-r----- 1 perfsonar perfsonar   9904128 Feb 18 18:29 glsstore.dbxml
-rw-rw---- 1 perfsonar perfsonar  10485760 Feb 18 18:28 log.0000001213
-rw-rw---- 1 perfsonar perfsonar  10485760 Feb 18 18:29 log.0000001214
}}}

==== Output of `df -h` and `ps auxw` for 250 Registered fakeServices on `onelab-1.fhi-fokus.de` ====

{{{
$ df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/hdv1             9.6G  2.6G  6.9G  28% /
none                  9.6G  2.6G  6.9G  28% /tmp

$ ps auxw
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
499       7655  0.0  0.5  35928 10672 ?        Ss   Feb13   0:00 perfsonar-daemon.pl (7655)
499       7656  0.7  0.5  35928 11832 ?        S    Feb13  79:10 perfsonar-daemon.pl (7655) - Listener (9995)
499       7659  1.1 19.8 530100 411368 ?       S    Feb13 115:24 perfsonar-daemon.pl (7655) - Service Maintenance
499       7660  0.0  1.4  45108 29360 ?        S    Feb13   6:40 perfsonar-daemon.pl (7655) - LS Registration (9995:/perfSONAR_PS/se
665      26750  0.0  0.0   2632  1416 ?        Ss   01:22   0:00 /bin/bash -l
499      28532  0.0  0.6  36324 13884 ?        R    01:25   0:00 perfsonar-daemon.pl (7655) - Listener (9995) - 206.12.16.155 - /per
665      28534  0.0  0.0   2448   824 ?        R+   01:25   0:00 ps auxw
}}}

=== Observations ===

The response times increase as the number of registered services grow in a hLS.  In particular, the response time for server `onelab-1.fhi-fokus.de` is higher than server `moonshine`, but it must be taken into account that the first is a Planetlab virtual machine housed at Germany, whereas the second is located at the same geographical spot as the time measurement client (Newark, DE)

Starting at 30 services registered (from the same client), the number of errors of the types below reported by `moonshine` hLS increases when the fakeServices first attempt to register.  Their registration also takes a long time to complete (be successful), during which several errors of *type 2* are reported.

Error *type 3* was also observed in rare occasions when querying the LS, after approximately 30 services and up where registered.

It is yet unknown whether these are related to the LS server, or to the host where the fakeServices are being deployed.  At approximately 45 fakeServices running, the performance of the host decreases appreciably.

*Type 1*
{{{
Service failed to keepalive - eventType: error.ls.keepalive.key_not_found
Response:       Database errors prevented the transaction from completing.
}}}

*Type 2*
{{{
Service failed to register - LS did not respond.
}}}
  
*Type 3*
{{{
Database errors prevented the transaction from completing:
}}}

For the the hLS at `onelab-1.fhi-fokus.de`, the same observation was noted:  at 30 registered services and up, the number of errors and the registration times increase; services begin to take tipically 5-10 minutes to successfully register.

It is important to note that the fakeServices do try to register with very little interval in between different instances, since they are deployed in series, one after another.  This also causes them to behave in synchronism.


==== XMLDB Error ====

After approximately 5 days and with 50 registered fakeServices, the hLS server at `onelab-1.fhi-fokus.de` stopped working.  Attempts to restart the LS service were not successful:  the init script would halt after displaying the warning message:

 `WARN> daemon.pl:232 main:: - Enabling echo service for each endpoint unless specified otherwise`
 
To find out the origin of the problem, the LS init script is run with the `--verbose` option:

{{{
cd /opt/perfsonar/lookup_service/bin
sudo perl daemon.pl --verbose --config=../etc/daemon.conf --logger=../etc/daemon_logger.conf
}}}
 
This outputs:

{{{
   WARN> daemon.pl:232 main:: - Enabling echo service for each endpoint unless specified otherwise
   DEBUG> daemon.pl:241 main:: - Starting perfSONAR-PS daemon as '9546'
   DEBUG> daemon.pl:300 main:: - Adding endpoint /perfSONAR_PS/services/hLS to 9995
   DEBUG> daemon.pl:315 main:: - Modules is not an array: 
   DEBUG> gLS.pm:216 perfSONAR_PS::Services::LS::gLS::init - Creating 'metadata_db_file' file at "/var/lib/perfsonar/lookup_service/xmldb/glsstore.dbxml"
   DEBUG> gLS.pm:224 perfSONAR_PS::Services::LS::gLS::init - Creating 'metadata_db_file' file at "/var/lib/perfsonar/lookup_service/xmldb/glsstore-summary.dbxml"
   DEBUG> gLS.pm:250 perfSONAR_PS::Services::LS::gLS::init - Setting 'ls_registration_interval' to 10800 seconds
   DEBUG> gLS.pm:274 perfSONAR_PS::Services::LS::gLS::init - Setting 'maintenance_interval' to "120" minutes.
   DEBUG> RequestHandler.pm:115 perfSONAR_PS::RequestHandler::registerFullMessageHandler - Adding message handler for LSRegisterRequest
   DEBUG> RequestHandler.pm:115 perfSONAR_PS::RequestHandler::registerFullMessageHandler - Adding message handler for LSDeregisterRequest
   DEBUG> RequestHandler.pm:115 perfSONAR_PS::RequestHandler::registerFullMessageHandler - Adding message handler for LSKeepaliveRequest
   DEBUG> RequestHandler.pm:115 perfSONAR_PS::RequestHandler::registerFullMessageHandler - Adding message handler for LSQueryRequest
   DEBUG> RequestHandler.pm:115 perfSONAR_PS::RequestHandler::registerFullMessageHandler - Adding message handler for LSLookupRequest
   DEBUG> RequestHandler.pm:115 perfSONAR_PS::RequestHandler::registerFullMessageHandler - Adding message handler for LSKeyRequest
   DEBUG> RequestHandler.pm:115 perfSONAR_PS::RequestHandler::registerFullMessageHandler - Adding message handler for LSSynchronizationRequest
}}}

This hints a XMLDB - XML database problem.  The fix used was:
 
 # Delete the files at `/var/lib/perfsonar/lookup_service/xmldb`.
 # Recreate the perfsonar XML database with:
  {{{
  cd /opt/perfsonar/lookup_service/scripts
  sudo ./psCreateLookupDB --directory=/var/lib/perfsonar/lookup_service/xmldb
  }}}
 # Change ownership of the files:
  {{{
  sudo chown -R perfsonar:perfsonar /var/lib/perfsonar/lookup_service/xmldb
  }}}
 # Now, start the LS again
  {{{
  sudo /etc/init.d/lookup_service start
  }}}
  
After these procedures, the service successfully starts.  It is now yet clear whether this is a problem with the LS service implementation, or with Planetlab environment, or with the XMLDB database.

This procedure can also be used to quickly restart the LS database and eliminate old registrations for services that do not exist anymore.
