#summary Guide for New Developers of perfSONAR-PS tools

<wiki:toc max_depth="6" />

== Introduction ==

Starting development for a new software project can be intimidating.  The following guide was created to point out the basics of both the tangible and intangible elements of developing software for the perfSONAR-PS infrastructure.  

== What Is perfSONAR-PS ==

perfSONAR-PS is a set of independent software services that implement the [http://www.perfsonar.net/ perfSONAR] protocols for network performance monitoring. perfSONAR-PS services are designed to be compatible with all other perfSONAR software that implements the perfSONAR protocols. perfSONAR-PS is able to federate between deployments, particularly those that span multiple domains, making the job of solving end-to-end performance problems on paths crossing several networks much easier to address.

The perfSONAR-PS services provide Web Services (WS) based interfaces into already deployed network monitoring infrastructures and act as an intermediate layer, between the performance measurement tools and the diagnostic or visualization applications. The targeted audience for these services is network Network Operation Centers (NOCs) at Universities and Regional networks, however these services are broadly useful to the general public at large. 

=== Service Examples ===

The following represent the current released products in the perfSONAR-PS framework.  Each serves a specific purpose that benefits the measurement framework as a whole.  

==== SNMP Measurement Archive ====

The perfSONAR-PS SNMP based Measurement Archive (SNMP MA) is able to expose data collected via variables from the Simple Network Management Protocol (SNMP) protocol found on networked devices and stored in Round Robin Databases (RRD) archives. The measurements are collected through external means, normally through software such as [http://oss.oetiker.ch/mrtg/ MRTG], [http://www.cacti.net Cacti], or [http://cricket.sourceforge.net/ Cricket], and is commonly stored in [http://oss.oetiker.ch/rrdtool/ RRD] archives. External access to commonly requested data items, remains challenging due to physical and political boundaries.

The SNMP MA provides a simple interface that is cable of exposing these files after basic configuration for consumption by perfSONAR client applications and services alike. The Web Service front end provides a uniform method of access using the perfSONAR XML protocols and delivers the data in an unambiguous manner, thus eliminating the mystery associated with the backend storage. 

For more information see also the development page: [SNMPMA].

==== Lookup Service ====

The perfSONAR-PS Lookup Service (LS) addresses the always challenging problem of resource registration and discovery for the perfSONAR framework. Service instances that manage datasets are only useful when they can be contacted by consumers. Consumers can only function when there is data available. To manage these problems in a dynamic environment such as perfSONAR, it is necessary to register, maintain, and query for the services that may contain interesting data.

The perfSONAR-PS LS relies on an XML database, [http://www.oracle.com/technology/products/berkeley-db/xml/index.html Oracle DB XML], to store service registration information in a native manner. Using the power of the [http://www.w3.org/TR/xpath XPath] and [http://www.w3.org/TR/xquery XQuery] standards it is then possible for client applications and services alike to query for information in a uniform and powerful manner. All perfSONAR services are capable of registering information with an LS instantiation, thus deploying this service within your framework is paramount. 

For more information see also the development page: [LS].

==== Topology Service ====

The perfSONAR-PS Topology Service provides the ability for administrators to make topology information about their networks available to remote clients. Client applications and services can be written that use the [http://www.w3.org/TR/xquery XQuery] language to perform arbitrarily complex queries against the data stored in the database. The Topology information returned by the topology service follows the perfSONAR Topology XML schema being developed in coordination with the the DICE Control Plane Working Group. The Topology Service stores the topology information in the [http://www.oracle.com/technology/products/berkeley-db/xml/index.html Oracle DB XML] XML database.

==== Status Measurement Archive ====

There are two types of status services: measurement and circuit.

The Status Measurement Archive provides a way for an administrator to provide layer2 link status information to remote clients. This information can be obtained via a polling service that can use SNMP, or scripts to collect the link status information, and stores it into a SQL database. The technique used to store the information helps minimize the storage requirements of rarely changing links.  This service is compatible with [https://wiki.man.poznan.pl/perfsonar-mdm/index.php/Geant2_E2E_Monitoring_System_Software_Downloads E2EMon], a commonly used service that provides a webpage containing status information about inter-domain circuits. In order to produce the webpage, the service requests the complete state of each domain in the circuits it has an interest in and then correlates this information to produce end-to-end statistics. This Circuit Status service uses the Status Measurement Archive and can use the Topology Service to provide the complete domain status required by the E2EMon service.

==== PingER ====

The perfSONAR-PS PingER service is an evolution of the [http://www-iepm.slac.stanford.edu/pinger PingER project] with more than 10 years experience in collecting and analysising network performance across the world. The perfSONAR-PS PingER service is composed of both a storage backend (MA) and measurement frontend (MP) to conduct and store ping measurements and to make available such data for consumption by interested parties. Network characteristics supported include availability, latency and jitter, which provide a broad spectrum of determining end-to-end network performance.

perfSONAR-PS PingER is designed to be scalable enough in order to accommodate hundreds of monitored pairs of hosts and uses a relational database backend (MySQL, Postgres, SQLite) to efficiently store and retrieve such performance information.

perfSONAR-PS PingER also supports the registration of data through perfSONAR LS's to faciliate the dynamic discovery and querying of unknown deployments.

The MA provides a web service interface based on [http://nmwg.internet2.edu/ NMWG XML] that allows queries on the PingER data and to be consumpted by perfSONAR client applications and services alike.

==== perfSONAR-BUOY Measurement Archive ====

The perfSONAR-BUOY Measurement Archive service (pSB MA) exposes active measurement data, making the results available through perfSONAR web services interfaces. All performance tests are performed via the [http://e2epi.internet2.edu/bwctl BWCTL] tool (throughput measurements) and currently consist of regularly-scheduled [http://sourceforge.net/projects/iperf Iperf] tests to a configurable list of source and destination hosts.

Data collected through the BWCTL interaction is stored in a MySQL database. Active measurements between known hosts are particularly valuable when assuring connectivity, availability, and quality of the network. perfSONAR-BUOY allows for the easy configuration of a "mesh" of tests to hosts equipped with BWCTL. Based on a configurable schedule, the tests will be conducted autonomously and stored for consumption via the perfSONAR-BUOY interface as well as presentation through included web scripts. Using the same XML protocols as the the other perfSONAR services, perfSONAR-BUOY provides uncomplicated access methods to retrieve the data in an unambiguous manner, thus eliminating the mystery associated with the backend storage. Closely coupled with development on BWCTL, perfSONAR-BUOY will soon offer data originating from sources besides Iperf such as [http://e2epi.internet2.edu/owamp OWAMP] (latency measurements).

==== LS Registration Daemon ====

The perfSONAR-PS LS Registration Daemon allows networks to register their [http://e2epi.internet2.edu/bwctl BWCTL], [http://e2epi.internet2.edu/owamp OWAMP], [http://e2epi.internet2.edu/ndt NDT], [http://www.psc.edu/networking/projects/pathdiag/ NPAD] and [http://damsl.cis.udel.edu/projects/phoebus/ Phoebus] services with a perfSONAR-PS Lookup Service. This allows interested clients to search for and find the network's services. 

=== Use Cases ===

TBD

=== Future Plans ===

TBD

== Development Tools ==

The development of perfSONAR-PS involves several tools that are meant to make the jobs of developers easier particularly for managing the source code, communication, and tasks to be done.  The following sections offer an introduction to each important item.

=== Subversion ===

The main perfSONAR-PS subversion repository is located in Ann Arbor Michigan:

 * [http://anonsvn.internet2.edu/svn/perfSONAR-PS/] - Read only access to the source code
 * [https://svn.internet2.edu/svn/perfSONAR-PS/] - Read/Write access for approved developers

Subversion resources can be found [http://svnbook.red-bean.com/en/1.5/svn-book.html here], but a quick guide to useful commands follows:

 * Checking out (do initially)
{{{
bash$ svn checkout http://anonsvn.internet2.edu/svn/perfSONAR-PS/trunk perfSONAR-PS
}}}
 * Updating working copy (do frequently)
{{{
bash$ svn update
At revision 7.
}}}
 * Checking status (do to check the status of items in your local copy)
{{{
bash$ svn status
?      newFile
M      mirrors-Internet2
}}}
 * Adding
{{{
bash$ svn add newFile
A      newFile
}}}
 * Deleting
{{{
bash$ svn rm RPM-GPG-KEY-Internet2 
D     RPM-GPG-KEY-Internet2
}}}
 * Committing
{{{
bash$ svn commit
A    trunk/newFile
M    trunk/mirrors-Internet2
D    trunk/RPM-GPG-KEY-Internet2
}}}
 
==== Repo Organization ====

Specifically the organization of the subversion repository should resemble this from a high level:

http://perfsonar-ps.googlecode.com/svn/wiki/ReleaseManagement/svn.png

The repository has gone through several changes through our development lifecycle.  Please see a [SubversionStructure primer] on how individual directories (e.g. Trunk, Branches) should look to better understand our methodology.  

it is organized .

==== Code Organization ====
 
As described in [SubversionStructure], we have organized the code in such a way to facilitate:

 * Individual service identity
 * Packaging procedures
 * Easy release of specific components
  
=== Wiki ===

The perfSONAR-PS wiki is located on [http://code.google.com Google Code].  Specifically the wiki can accessed in one of two ways:

 * Wiki listing - [http://code.google.com/p/perfsonar-ps/w/list]
 * Wiki _Home_ - [http://code.google.com/p/perfsonar-ps/w/Home]

Access to the wiki is controlled via [https://www.google.com/accounts/ManageAccount Google Accounts], if you have one please see one of the project leaders (listed on the [http://code.google.com/p/perfsonar-ps/ home] page) to add you to the project.  

==== Editing ====

The wiki can be edited in two ways:

 * Web interface
 * Checkout via subversion:
{{{
svn checkout https://perfsonar-ps.googlecode.com/svn perfSONAR-PS-Google --username YOURNAME
}}}
   * Note that a password is required, you may find it [http://code.google.com/hosting/settings here] (note you must be logged in to view your personal password

When editing the wiki be sure to follow:

 * Formatting rules:
{{{
#summary ENTER A SUMMARY HERE

<wiki:toc max_depth="6" />

== Introduction ==

... content ...

=== Other Headers ===

... content ....

== Last Updated ==

$Id$
}}}
 * Always enter a log entry (either through the web form or the svn commit script) to each addition.  

=== Issue Tracker ===

The project uses the Issue tracker that comes with [http://code.google.com Google Code].  This software is a bit minimal compared to other similar offerings such as [http://www.bugzilla.org/ Bugzilla].  The following is aimed to help a developer:

 * Fill out a bug report
 * Understand how to maintain a bug report through the lifecycle

The issue tracker is located [http://code.google.com/p/perfsonar-ps/issues/list here].

==== Bug Reports ====

Each Bug report main contain certain items:

 # _*Summary*_ - One line description that will be visible in the [http://code.google.com/p/perfsonar-ps/issues/list issue tracker] 
 # _*Description*_ - Longer description of the bug.  Each update must contain some action that was taken in this field.  
 # _*Status*_ - Status of the bug, there are two categories and several states in each:
   * _*Open*_ Issues
     * _New_ - Issue has not had initial review yet
     * _Accepted_ - Problem reproduced / Need acknowledged
     * _Started_ - Work on this issue has begun   
   * _*Closed*_ Issues 
     * _Fixed_ - Developer made requested changes, QA should verify
     * _Verified_ - QA has verified that the fix worked
     * _Invalid_ - This was not a valid issue report
     * _Duplicate_ - This report duplicates an existing issue
     * _WontFix_ - We decided to not take action on this issue
 # _*Owner*_ - 
 # _*CC*_ - 
 # _*Labels*_ - 
   * _*Type*_ 
     * _Defect_ - Report of a software defect
     * _Enhancement_ - Request for enhancement
     * _Task_ - Constructive work item
     * _Patch_ - Source code patch for review
     * _Other_ - Some other kind of issue
   * _*Priority*_ 
     * _Critical_ - Must resolve in milestone
     * _High_ - Strongly want to resolve in milestone
     * _Medium_ - Normal priority
     * _Low_ - Might slip to later milestone
   * _*OpSys*_ 
     * _All_ - Affects all operating systems
     * _Windows_ - Affects Windows users
     * _Linux_ - Affects Linux users
     * _OSX_ - Affects Mac OS X users
   * _*Milestone*_ 
     * _Release0.9Beta_ - perfSONAR-PS September 2007 Release (<font color="red">depreciated</font>) 
     * _Release0.9_ - perfSONAR-PS January 2008 Release (<font color="red">depreciated</font>) 
     * _Release1.0_ - perfSONAR-PS July 2008 Release (<font color="red">depreciated</font>) 
     * _Release3.1Beta_ - perfSONAR-PS March 2009 Release - Special tag for beta testing
     * _Release3.1_ - perfSONAR-PS March 2009 Release
     * _Release3.2Beta_ - perfSONAR-PS Summer 2009 Release - Special tag for beta testing
     * _Release3.2_ - perfSONAR-PS Summer 2009 Release
     * _Future_ - perfSONAR-PS Future Plans
   * _*Component*_ 
     * _Issues_ - Issues Information Request
     * _Wiki_ - Wiki Information Request
     * _Docs_ - PerfSONAR-PS documentation
     * _perfSONAR-PS_ - General Framework - use when unsure of specific parts are unknown
     * _PingER_ - PingER Measurement Archive and Point
     * _SNMP_ - SNMP Measurement Archive
     * _LookupService_ - Class Lookup Service (<font color="red">depreciated</font>) 
     * _HomeLookupService_ - Home Lookup Service
     * _GlobalLookupService_ - Global Lookup Service
     * _TopologyService_ - Topology Service
     * _CircuitStatus_ - Circuit Status Measurement Archive (<font color="red">depreciated</font>) 
     * _StatusService_ - Status Measurement Archive
     * _PerfSONARBUOY_ - PerfSONAR-BOUY Measurement Archive (<font color="red">depreciated</font>) 
     * _PerfSONARBUOYClient_ - PerfSONAR-BOUY Client Package
     * _PerfSONARBUOYServer_ - PerfSONAR-BOUY Server Package
     * _LSRegistrationDaemon_ - LS Registration Daemon
     * _TL1_ - TL1 Tools
     * _GUI_ - PerfSONAR-PS GUI Tools
     * _API_ - Programmer Interfaces
     * _NPToolkit_ - Network Performance Toolkit (<font color="red">depreciated</font>) 
     * _PerformanceNode_ - Performance Node
     * _PerformanceNodeKnoppix_ - Performance Node - Knoppix Releases
     * _PerformanceNodeFedora_ - Performance Node - Fedora Releases
   * _*Misc*_ 
     * _Security_ - Security risk to users
     * _Performance_ - Performance issue
     * _Usability_ - Affects program usability
     * _Maintainability_ - Hinders future changes
     * _Documentation_ - Documentation issue
     * _Packaging_ - Issues package construction

==== Bug Lifecycle ==== 

Each bug should go through a typical lifecycle, moving from a start state to one of the closed states.  Each update should include information that addresses the target issue.  Note that labels may be changed at anytime (these will help search later).  

=== Mailing Lists ===

There are several categories of mailing lists, each targeting specific groups of people.

==== Developer Centric ====


|| *List* || *Audience* ||
|| https://mail.internet2.edu/wws/info/i2-perfsonar || perfSONAR-PS Developers Only ||
|| https://mail.internet2.edu/wws/info/ps-ps-dev || perfSONAR-PS Developers Only ||
|| https://mail.internet2.edu/wws/info/perfsonar-dev || perfSONAR Developers (International) || 
|| https://mail.internet2.edu/wws/info/bwctl-dev || BWCTL Development || 
|| https://mail.internet2.edu/wws/info/ndt-dev || NDT Development || 
|| https://mail.internet2.edu/wws/info/owamp-dev || OWAMP Development || 


==== User Centric ====


|| *List* || *Audience* ||
|| https://mail.internet2.edu/wws/info/perfsonar-user || perfSONAR Users Group ||
|| https://mail.internet2.edu/wws/info/performance-node-users || Performance Node Users ||  
|| https://mail.internet2.edu/wws/info/bwctl-users || BWCTL Users || 
|| https://mail.internet2.edu/wws/info/ndt-users || NDT Users || 
|| https://mail.internet2.edu/wws/info/owamp-users || OWAMP Users || 


==== Low Volume Announcement ====


|| *List* || *Audience* ||
|| https://mail.internet2.edu/wws/info/perfsonar-announce || perfSONAR Announcements ||
|| https://mail.internet2.edu/wws/info/performance-node-announce || Performance Node Announcements  || 
|| https://mail.internet2.edu/wws/info/bwctl-announce || BWCTL Announcements || 
|| https://mail.internet2.edu/wws/info/ndt-announce || NDT Announcements || 
|| https://mail.internet2.edu/wws/info/owamp-announce || OWAMP Announcements ||


==== Community Discussion ====


|| *List* || *Audience* ||
|| https://mail.internet2.edu/wws/info/is-wg || NTAC Information Services Working Group ||
|| https://mail.internet2.edu/wws/info/performance-wg || NTAC Performance Working Group ||
|| https://mail.internet2.edu/wws/info/dcn-wg || DCN Working Group ||
|| http://www.ogf.org/mailman/listinfo/nm-wg || Network Measurement Working Group ||
|| http://www.ogf.org/mailman/listinfo/nml-wg || Network Markup Language Working Group ||
|| http://www.ogf.org/mailman/listinfo/nmc-wg || Network Measurement Control Working Group ||
|| http://www.ogf.org/mailman/listinfo/nsi-wg || Network Service Interface Working Group ||


== Development Practices ==

TBD

=== Release Process ===

TBD

=== Code Rules ===

TBD

== Project Development ==

TBD

=== Services ===

TBD

=== GUIs ===

TBD

=== Packaging ===

TBD

=== Testing ===

TBD

== Last Updated ==

$Id$

