#labels Phase-Design
#summary dealing with current or obsolete metadata

= Problem with obsolete/current metadata =

== The problem ==

I am not sure if this issue ever surfaced and been discussed but while testing health of the pinger service I stumbled upon this problem. 
I created that health checking script which gets list of stored metadata
and then checks if there were some current data for each metadata item.
The problem is that when someone is using pinger admin interface to reconfigure pinger mp then list of metadata might change - for example someone decides to leave only single
destination to monitor and removes everything else. But all old metadata is still in the db and therefore MDKrequest will return old list and health check will complain that some metadata is there but its missing recent data since data collection stopped for un-configured ones. In the worst case when someone decides to clean landmarks file then it will complain constantly and it will look exactly as it happened before - MP is running but not getting any data.  I donâ€™t know how other services deal with that but I need to distinguish "active" metadata from the "inactive". 
I propose to add parameter into the MKrequest to ask about "active" metadata" only
or "inactive" or "all". On DB level it can be easily supported of course by simple boolean field.

== JZ ==

_Tue Jan 19 12:30:33 EST 2010_

Comments to the initial proposal:

 # _Active_ vs _Inactive_ is pretty subjective.  If I have data that has been updated in the last month but collected only once per day that may be _active_ vs a PingER test that updates once ever 10 seconds and may be considered 'inactive' after 24 hours.  I don't think that a single parameter really covers this and a lot of variability will be present from service to service.
 # _*<philosophical_musing>*_  Determining if something is active vs inactive is not something that should be encoded in the metadata, this is a property of the underlying data set. _*</philosophical_musing>*_.

My thoughts on this would be to try and break the service into two metadata collections:

 * historic
 * active
 
Each could be served via a different endpoint.  It is also important to offer a unified view so that a general query that doesn't have a time component (e.g. _show me all measurements between a and b that have ever happened_) can be answered.  It would be the service's job to partition each as appropriate (still have the problem described in #1) and this would not force a change in the structure of the metadata. 

== Any Ideas ? ==

???

== Last Updated ==

$Id$

