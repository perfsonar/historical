#summary dealing with current or obsolete metadata
#labels Phase-Design

= Problem with obsolete/current metadata =

== The problem ==

I am not sure if this issue ever surfaced and been discussed but while testing health of the pinger service I stumbled upon this problem. 
I created that health checking script which gets list of stored metadata
and then checks if there were some current data for each metadata item.
The problem is that when someone is using pinger admin interface to reconfigure pinger mp then list of metadata might change - for example someone decides to leave only single
destination to monitor and removes everything else. But all old metadata is still in the db and therefore MDKrequest will return old list and health check will complain that some metadata is there but its missing recent data since data collection stopped for un-configured ones. In the worst case when someone decides to clean landmarks file then it will complain constantly and it will look exactly as it happened before - MP is running but not getting any data.  I don’t know how other services deal with that but I need to distinguish "active" metadata from the "inactive". 
I propose to add parameter into the MKrequest to ask about "active" metadata" only
or "inactive" or "all". On DB level it can be easily supported of course by simple boolean field.

_Tue 1/19/2010 1:48 PM_

The active/inactive means configured. If some interface/link/pair of hosts/test is configured
to run then its active. Everything else is inactive. The activity means expectancy of some data.
I can add time parameter for the metadata and I don’t see problem with supporting such optional parameter in the MDK request. But I don’t know how it will be useful in getting an answer on the original question – what metadata are describing some actively collected data.


== JZ ==

_Tue Jan 19 12:30:33 EST 2010_

Comments to the initial proposal:

 # _Active_ vs _Inactive_ is pretty subjective.  If I have data that has been updated in the last month but collected only once per day that may be _active_ vs a PingER test that updates once ever 10 seconds and may be considered 'inactive' after 24 hours.  I don't think that a single parameter really covers this and a lot of variability will be present from service to service.
 # _*<philosophical_musing>*_  Determining if something is active vs inactive is not something that should be encoded in the metadata, this is a property of the underlying data set. _*</philosophical_musing>*_.

My thoughts on this would be to try and break the service into two metadata collections:

 * historic
 * active
 
Each could be served via a different endpoint.  It is also important to offer a unified view so that a general query that doesn't have a time component (e.g. _show me all measurements between a and b that have ever happened_) can be answered.  It would be the service's job to partition each as appropriate (still have the problem described in #1) and this would not force a change in the structure of the metadata. 

_Wed 1/20/2010 10:45 AM_

pSB and PingER are similar because an external config (e.g. owmesh.conf and landmarks.xml) is used to represent what should be 'current' in the way of metadata/data sets and what we would want to check the health of. 
  Both services will have other data that may not be very fresh if the user re-configures tests, or if measurements are inserted behind the scenes.

I may have mis-understood Maxim's original problem, but my response to split the metadata sets into endpoints represents what I think is a way to call attention to the separation between what is 'scheduled' and everything else that is not.  This also gives a new meaning to the word 'active' if we are going to interpret this as anything that lives in the scheduled testing regardless of if we are getting recent data.  I originally interpreted 'active' to be time based only which is why I felt it was rather subjective.


== AB ==

I think "active/inactive" is a subset of the general concept of querying for dynamic metadata. For example, "what interfaces were stats collected on between X and Y" or "what tests were collected in the last X hours" gets you the concept of inactive/active, and may have wider usefulness (especially if the collector isn't being specifically munged to spit out something perfsonar specific). Depending on how the stats are collected/stored, answering these kinds of questions may be easy. E.g. with pSB, it should be straight-forward to set that kind of question up as a select query or two. For other methods of stats collection/storage, its probably significantly harder to answer that kind of question.

I'm not sure there's a way to represent that in the protocol. 5-second strawman: a new kind of message, MetadataQueryRequest, which would work like a SetupDataRequest except it would select metadata from the database, and apply filters to the metadata coming out of the database. The time filters would not be filtering on a specific metadata field so I'm not sure I'm happy with that, but it's an idea.



== MS ==

_Tue 1/19/2010 4:25 PM_

It seems to me that we could accomplish what Aaron philosophically mused about originally by adding an automatic metadata element in the chain that contained time- and maybe data-based metadata.
The system could enable it (or not) and keep it updated with latest, oldest, count, etc.  These are the things the daemon can create and update automagically.


== JB ==

_Tue 1/19/2010 1:09 PM_

I'm not sure there's a way to represent that in the protocol. 5-second strawman: a new kind of message, MetadataQueryRequest, which would work like a SetupDataRequest except it would select metadata from the database, and apply filters to the metadata coming out of the database. The time filters would not be filtering on a specific metadata field so I'm not sure I'm happy with that, but it's an idea.

Lets perhaps indicate what actual db queries would need to be done across each of our currently supported services. (Including circuit monitoring and SNMP.) Perhaps that will help us clarify what would need to be done using current protocol messages, and inform us on how much it is worth creating a specialized protocol message to optimize.


_Wed 1/20/2010 10:56 AM_

The fact that the pingER service is a combination MP/MA makes it different from others.

I understand that there is a desire to 'check' a service to ensure that it is really working and generating data. I just think we really need to separate that kind of functionality from the query for data and metadata. I don't want this case to interfere with the ability to throw ad-hoc measurements into an MA and still do queries.

Personally, I like Dan's idea of querying the MP interface to determine what tests it would try to run separate from querying the MA interface to determine what data is available. I think it is much cleaner than the other options.



== DG ==

_Wed 1/20/2010 10:25 AM_

Perhaps this whole issue gets easier if you think of the "freshness" rather than "health" of a service. This is the thing I, as a consumer, would like to know. I don't care if the system is "healthy" if it's configured to update information once a month and I need the last 4 hours.

One more question then: is the service metadata doubling as a registry? Is that why Jason wants to have this active/historical separation? If so, then I think my question implies my (ancient, hoary, GMA) perspective on it, and I will say no more.

== Any Ideas ? ==

???

== Last Updated ==

$Id$