<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://docbook.org/xml/4.2/docbookx.dtd">
<article>

  <articleinfo>
    <title>perfSONAR Base Protocol</title>

    <authorgroup>
      <author>
        <firstname>J.</firstname>
        <surname>Zurawski</surname>
        <affiliation>
          <orgname>Internet2</orgname>
          <address>   
            <email>zurawski@internet2.edu</email>
          </address>
        </affiliation>
      </author>

      <author>
        <firstname>M.</firstname>
        <surname>Swany</surname>
        <affiliation>
          <orgname>University of Delaware</orgname>
          <address>   
            <email>swany@cis.udel.edu</email>
          </address>
        </affiliation>
      </author>
    </authorgroup>

  </articleinfo>

  <section id="changes" xreflabel="Document Changes">
    <title>Document Changes</title>

    <table frame="all" align="center" halign="center" width="80%"  id="table.1">
      <title>Change Log</title>
      <tgroup cols="1" align="left" colsep="1" rowsep="1">
        <colspec colnum="1" colname="c1" width="10%"/>
        <colspec colnum="2" colname="c2" width="10%"/>
        <colspec colnum="3" colname="c3" width="50%"/>
        <colspec colnum="4" colname="c4" width="30%"/>
        <thead>
          <row>
            <entry>Version</entry>
            <entry>Date</entry>
            <entry>Description</entry>
            <entry>Author(s)</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>1.0</entry>
            <entry>4/3/2008</entry>
            <entry>Initial Preparation</entry>
            <entry>J. Zurawski</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
   
  </section>

  <section id="introduction" xreflabel="Introduction">
    <title>Introduction</title>
    
    <para>
      <citation>perfSONAR</citation> is an infrastructure for network
      performance monitoring and data exchange. It consists of a set of services
      delivering performance measurements in a federated environment. These
      services act as an intermediate layer, between the performance measurement
      tools and the diagnostic or visualization applications.
    </para>

    <para>
      This framework is designed in the <emphasis>service-oriented</emphasis>
      style, implying that a set of elementary functions has been isolated and
      can be provided by different software entities.  In this model, all
      services must communicate using well-defined protocols.  This document
      describes the base communication protocol to be used by all services and
      clients in the
      <emphasis>perfSONAR</emphasis> framework.  These communication protocols
      are based on and utilize the same <citation>XML</citation> structure used
      to exchange and store measurement data as defined by
      the <citation>NM-WG</citation> in the <citation>OGF</citation>.
    </para>
    
    <para>
      This document will proceed as follows: we first examine why this document
      is necessary and what it will achieve.  We follow with a discussion of the
      syntactic details and a semantic description of the major message types.
      After, we introduce two common protocols used by every service in the
      <emphasis>perfSONAR</emphasis> infrastructure: the Echo and Authentication
      protocols.  Finally we conclude with some description of other protocol
      documents.
    </para>

  </section>

  <section id="motivation" xreflabel="Motivation">
    <title>Motivation</title>

    <!--
    <para>
      All services feature communication mechanisms derived from the same
      source and function in a particularly similar manner utilizing a
      <emphasis>Request</emphasis> and <emphasis>Response</emphasis> paradigm.
      Due to this similarity, documenting the detailed aspects of this behavior
      in repeated descriptions is absurd.  Consider this example of a client
      application interacting with some <emphasis>perfSONAR</emphasis> service
      in search of data.
    </para>
	-->

	<para>
	  A common message exchange pattern in <emphasis>perfSONAR</emphasis> is
	  a <emphasis>Request</emphasis> followed by
	  a <emphasis>Response</emphasis>.  As this pattern is important, we will
	  show a basic interaction and build on it.  Consider this example of a
	  client application interacting with some <emphasis>perfSONAR</emphasis>
	  service in search of data.
	</para>

	<!--TODO: While one-sided messaging is not precluded, it is not completely
	  defined yet -->

    <para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="exchange.png"/>
        </imageobject>
      </mediaobject>
    </para>   

    <para>
      It becomes the burden of <emphasis>both</emphasis> the service developer
      and the client developer to document what an exchange consists of, and how
      it takes place (albeit from different points of view).  A second example
      involving different actors is quite similar:
    </para>
    
    <para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="exchange2.png"/>
        </imageobject>
      </mediaobject>
    </para>   

    <para>
      Essentially, the acts of sending messages, receiving responses, and being
      able to discern success or failure are common across many specific
      interactions.  One aim of this document is to prevent the following
      redundancies:
    </para>

    <itemizedlist mark='opencircle'>
      <listitem>
        <para><command>Duplicate Schemata</command> - Messages will differ
        from service to service, but the overarching concepts will not; we
        present some of the common features that must be present in every
        exchange and describe how extension is possible.</para>
      </listitem>
      <listitem>
        <para><command>Duplicate Error Conditions</command> - Some errors will
        occur across services and do not need to be defined repeatedly
        (e.g. Unknown Message Type).</para>
      </listitem>
      <listitem>
        <para><command>Duplication of Common Exchanges</command> - Every service
        in perfSONAR is capable of receiving and acting upon common protocols
        such as <emphasis>Echo</emphasis> and <emphasis>AA</emphasis>.  These
        will be presented as the first two <emphasis>extensions</emphasis> to
        this base.</para>
      </listitem>
    </itemizedlist> 
  
    <para>
      With this base, it will be possible to define protocol extensions on
      a <emphasis>type-by-type</emphasis> basis instead of
      <emphasis>service by service</emphasis>.  This also allows for a
      sufficient reduction in documentation due to service types implementing
      the same underlying format of messages (e.g. Measurement Archives mostly
      implement the same message types with notable exceptions and data
      differences). 
    </para>
    
  </section>
  
  <section id="messages" xreflabel="Messages">
    <title>Messages</title>
    
    <para>
      Services in <emphasis>perfSONAR</emphasis> rely on a simple communication
      protocol based on the notion of <emphasis>Request</emphasis> and
      <emphasis>Response</emphasis> messages.  Both messages are fundamentally
      the same: a series of <emphasis>metadata</emphasis> and
      <emphasis>data</emphasis> units linked via identifying attributes.  These
      concepts, taken from the <emphasis>NM-WG</emphasis> format, observe the 
      same rules with regards to splitting both measurement and communication
      into logical units.
    </para>

    <section id="messages_example" xreflabel="Preliminary Example">
      <title>Preliminary Example</title>

      <para>  
        To cement an early understanding of how the messages work, consider this
        rudimentary query for some data from a service:
      </para>
    
      <programlisting>
        <![CDATA[
<message type="request">

  <metadata id="m1">
    <!-- some partial metadata the service may or may not understand -->
  </metadata>

  <data id="d1" metadatIdRef="m1" />
  
</message>
        ]]>
      </programlisting>
    
      <para>
        There are some important things to note about this query:
      </para>

      <itemizedlist mark='opencircle'>
        <listitem>
          <para><command>Message Type</command> - Every message in
          <emphasis>perfSONAR</emphasis> contains a type, these are necessary to
          be able to identify the semantic intentions of the internal data
          </para>
        </listitem>
        <listitem>
          <para><command>Message Structure</command> - There may be many
          metadata and data elements in each message, and there does not need to
          be a matching data for <emphasis>every</emphasis> metadata (e.g.
          chaining)
          </para>
        </listitem>
        <listitem>
          <para><command>Metadata</command> - Can contain measurement data, or
          perhaps identifying information about a service, note that we still 
          loosely observe the <emphasis>static</emphasis> rule of thumb</para>
        </listitem>
        <listitem>
          <para><command>Data</command> - Serves a dual role: in request
          messages this may be empty (e.g. this is a data trigger, it lets the
          service know we need action on the accompanying metadata), or it can
          contain <emphasis>dynamic</emphasis> measurement data or even other
          metadata elements</para>
        </listitem>
      </itemizedlist> 

      <para>
        Simply stated, we are sending some type of request that is interested in
        getting back some data that matches the sent metadata.  This metadata
        may be partial or complete.  When the service receives this request it
        will check for several things:
      </para>

      <itemizedlist mark='opencircle'>
        <listitem>
          <para><command>Syntax</command> - Does the XML parse</para>
        </listitem>
        <listitem>
          <para><command>Message Type</command> - Can this service accept and
          act on this kind of message</para>
        </listitem>
        <listitem>
          <para><command>Structure</command> - Is there at least a single
          metadata and data pair that is capable of being acted on; do any
          chains resolve properly</para>
        </listitem>
        <listitem>
          <para><command>Semantics</command> - Does the request make sense, can
          the metadata be acted upon</para>
        </listitem>
      </itemizedlist> 

      <para>
        The service has two options at this point: acting on the message and
        returning data or reporting some other form of status.  We will explore
        the first option initially:
      </para>

      <programlisting>
        <![CDATA[
<message type="response">

  <metadata id="m1">
    <!-- specific metadata that matched -->
  </metadata>

  <data id="d1" metadatIdRef="m1">
    <!-- lots and lots of data -->
  </data>
  
</message>
        ]]>
      </programlisting>

      <para>
        Note this message is similar to the response in many ways.  The major
        differences:
      </para>

      <itemizedlist mark='opencircle'>
        <listitem>
          <para><command>Message Type</command> - This becomes the foil
          of the previous request; it is common to simply replace the word
          <emphasis>Request</emphasis> with <emphasis>Response</emphasis></para>
        </listitem>
        <listitem>
          <para><command>Message Structure</command> - All valid metadata and 
          data pairings will be acted on, chained items may be truncated</para>
        </listitem>
        <listitem>
          <para><command>Metadata</command> - May be
          <emphasis>completed</emphasis> if it was not this way in the request
          </para>
        </listitem>
        <listitem>
          <para><command>Data</command> - Should contain information, especially 
          if it was empty in the initial request</para>
        </listitem>
      </itemizedlist> 

      <para>
        The second situation is not very different, but is indicative of
        something occurring that was not expected.  We don't explicitly use the
        term <emphasis>error</emphasis> to describe this situation because many
        paths that lead to this are not <emphasis>wrong</emphasis>.  Some
        examples of status may be:
      </para>

      <itemizedlist mark='opencircle'>
        <listitem>
          <para><command>Message Syntax/Structure/Semantics</command> - The
          service must be able to understand the request, if it cannot be parsed
          on either the syntactic or semantic levels the status should reflect
          this</para>
        </listitem>
        <listitem>
          <para><command>Metadata/Data Search</command> - The backend storage
          can simply be devoid of references to what a request is interested in,
          this can be expressed by returning nothing in the response or having
          an explicit message to do so</para>
        </listitem>
        <listitem>
          <para><command>Catastrophic Events</command> - Internal events may
          trigger some sort of panic in the service; note that not all events
          may be recovered from and are not the fault of the service itself
          </para>
        </listitem>
      </itemizedlist> 

      <para>
        The general format of a status message is as follows, parallels between
        the previous response as well as the request can easily be drawn.
      </para>

      <programlisting>
        <![CDATA[
<message type="response">

  <metadata id="m1">
    <!-- some error code -->
  </metadata>

  <data id="d1" metadatIdRef="m1">
    <!-- some human readable information -->
  </data>
  
</message>
        ]]>
      </programlisting>

    </section>

    <section id="messages_actions" xreflabel="Message Actions">
      <title>Message Actions</title>
    
      <para>
        The example from <xref linkend="messages_example" /> characterizes many
        of the common actions services perform on receipt of a request message.
        A more formal description of this interaction is described below.  Note
        that this is a generalized attempt, and does not directly reflect the
        actions of any particular service.  Protocol extensions 
        <emphasis>must</emphasis> provide a description where this example is
        lacking.
      </para>

      <para>
        <mediaobject>
          <imageobject>
            <imagedata fileref="flow.png"/>
          </imageobject>
        </mediaobject>
      </para>   

      <para>
        The example illustrates that any stage of processing a request may
        trigger entry into the status routine.  Specifics regarding available
        status messages should be categorized by service type and will appear
        in the protocol extensions; specifics based on a particular action a
        service may take based on internal conditions will appear in the service
        documentation.
      </para>

    </section>     

    <section id="messages_request" xreflabel="Request Message">
      <title>Request Message</title>
    
      <para>
        The request message is a container for submitting various forms of 
        communication to <emphasis>perfSONAR</emphasis> capable services.
        Enclosed in this simple envelope will be a series of metadata and data
        pairs containing various instructions to act on.  We first present
        a very simple schema in <xref linkend="messages_request_schema" /> along
        with an analysis of the elements in 
        <xref linkend="messages_request_analysis" />.  We conclude with examples
        in <xref linkend="messages_request_example" />.
      </para>

      <section id="messages_request_schema" xreflabel="Request Message Schema">
        <title>Request Message Schema</title>
    
        <para>
          The following schema is a native description of the request schema as
          in the <citation>RELAX-NG</citation> language.  Through the use of
          tools such as <citation>Trang</citation> and <citation>MSV</citation>
          it is possible to convert this to other widely accepted formats such
          as <citation>XSD</citation>.
        </para>

        <programlisting>
          <![CDATA[
            <inlineschema file="schema/request.rnc"/>
          ]]>
        </programlisting> 

      </section>
    
      <section id="messages_request_analysis" xreflabel="Request Message Analysis">
        <title>Request Message Analysis</title>
    
        <para>
          The following is a breakdown of the elements featured in the schema.
          Note that services in general <emphasis>must not</emphasis> implement
          or attempt to understand this, it is provided as a tool to aid in the
          development of extensions.
        </para>

        <section id="messages_request_analysis_message" xreflabel="Message">
          <title>Message</title>
      
          <programlisting>
            <![CDATA[
<nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
              id="message1"
              type="Request">

  <nmwg:parameters />
  
  <nmwg:metadata />
  
  <nmwg:data />
  
</nmwg:message>
            ]]>
          </programlisting>

          <table frame="all" align="center" halign="center" width="80%"  id="table.messages_request_analysis_message">
            <title>Message Element Requirements</title>
            <tgroup cols="1" align="left" colsep="1" rowsep="1">
              <colspec colnum="1" colname="c1" width="30%"/>
              <colspec colnum="2" colname="c2" width="70%"/>
              <tbody>
                <row>
                  <entry><command>localname</command></entry>
                  <entry>message</entry>
                </row>
                <row>
                  <entry><command>namespaces</command></entry>
                  <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                </row>
                <row>
                  <entry><command>attributes</command></entry>
                  <entry>id, type</entry>
                </row>
                <row>
                  <entry><command>nested elements</command></entry>
                  <entry>parameters, metadata, data</entry>
                </row>
                <row>
                  <entry><command>required</command></entry>
                  <entry>yes</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
       
          <para>
            The message element serves as a container for transporting requests
            to <emphasis>perfSONAR</emphasis> capable services.  The message
            itself is unremarkable, it features attributes to aid in the
            identification of messages and contains elements with legitimate
            content.  We first examine the available attributes:  
          </para> 

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>id</command> - Identifier that can be used to track
              state between messages and services</para>
            </listitem>
            <listitem>
              <para><command>type</command> - Designates the message to a 
              particular type; fully enumerated in each protocol extension
              </para>
            </listitem>
          </itemizedlist>

          <para>
            There are three major elements that may be contained in the message
            element:
          </para> 
      
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>Parameters</command> - Described in
              <xref linkend="messages_request_analysis_parameters" /></para>
            </listitem>
            <listitem>
              <para><command>Metadata</command> - Described in
              <xref linkend="messages_request_analysis_metadata" /></para>
            </listitem>
            <listitem>
              <para><command>Data</command> - Described in
              <xref linkend="messages_request_analysis_data" /></para>
            </listitem>
          </itemizedlist>

        </section>

        <section id="messages_request_analysis_parameters" xreflabel="Parameters">
          <title>Parameters</title>
      
          <programlisting>
            <![CDATA[
<nmwg:parameters xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="parameters1">

  <nmwg:parameter />

</nmwg:parameters>
            ]]>
          </programlisting>

          <table frame="all" align="center" halign="center" width="80%"  id="table.messages_request_analysis_parameters">
            <title>Parameters Element Requirements</title>
            <tgroup cols="1" align="left" colsep="1" rowsep="1">
              <colspec colnum="1" colname="c1" width="30%"/>
              <colspec colnum="2" colname="c2" width="70%"/>
              <tbody>
                <row>
                  <entry><command>localname</command></entry>
                  <entry>parameters</entry>
                </row>
                <row>
                  <entry><command>namespaces</command></entry>
                  <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                </row>
                <row>
                  <entry><command>attributes</command></entry>
                  <entry>id</entry>
                </row>
                <row>
                  <entry><command>nested elements</command></entry>
                  <entry>parameter</entry>
                </row>
                <row>
                  <entry><command>required</command></entry>
                  <entry>no</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
       
          <para>
            The parameters element encloses a series of parameter elements that
            can be used to adjust variable aspects of a request message.  This
            element serves merely as a container for the
            <xref linkend="messages_request_analysis_parameter" /> elements that
            will populate it.  The single available attribute is described
            first:
          </para>

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>id</command> - Identifying attribute that can be
              used to track state.</para>
            </listitem>
          </itemizedlist>

          <para>
            There is only one available element, although it can be used
            multiple times.
          </para> 
      
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>Parameter</command> - Described in
              <xref linkend="messages_request_analysis_parameter" /></para>
            </listitem>
          </itemizedlist>

        </section>

        <section id="messages_request_analysis_parameter" xreflabel="Parameter">
          <title>Parameter</title>
      
          <programlisting>
            <![CDATA[
<nmwg:parameter xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                name="NAME">VALUE</nmwg:parameter>

<!-- OR -->

<nmwg:parameter xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                name="NAME" value="VALUE" />
            ]]>
          </programlisting>

          <table frame="all" align="center" halign="center" width="80%"  id="table.messages_request_analysis_parameter">
            <title>Parameter Element Requirements</title>
            <tgroup cols="1" align="left" colsep="1" rowsep="1">
              <colspec colnum="1" colname="c1" width="30%"/>
              <colspec colnum="2" colname="c2" width="70%"/>
              <tbody>
                <row>
                  <entry><command>localname</command></entry>
                  <entry>parameter</entry>
                </row>
                <row>
                  <entry><command>namespaces</command></entry>
                  <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                </row>
                <row>
                  <entry><command>attributes</command></entry>
                  <entry>name, value</entry>
                </row>
                <row>
                  <entry><command>nested elements</command></entry>
                  <entry>text</entry>
                </row>
                <row>
                  <entry><command>required</command></entry>
                  <entry>yes</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
       
          <para>
            The parameter element features a generic structure that allows it to
            easily adapt to the needs of a particular schema.  Possible names
            and values will not be enumerated here, but will be done both at the
            protocol extension and service level.  
          </para>    

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>name</command> - Generically specify the name
              of some variable value</para>
            </listitem>
            <listitem>
              <para><command>value</command> - Can be used instead a text
              element to set the value of the <emphasis>name</emphasis></para>
            </listitem>
          </itemizedlist>

          <para>
            In lieu of the <emphasis>value</emphasis> attribute, a text element
            may be used for the same purpose.  This is the only element that is
            allowed for this instantiation of the parameters element.
          </para> 

        </section>

        <section id="messages_request_analysis_metadata" xreflabel="Metadata">
          <title>Metadata</title>
      
          <programlisting>
            <![CDATA[
<nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
               id="metadata2" metadataIdRef="metadata1" />
            ]]>
          </programlisting>

          <table frame="all" align="center" halign="center" width="80%"  id="table.messages_request_analysis_metadata">
            <title>Metadata Element Requirements</title>
            <tgroup cols="1" align="left" colsep="1" rowsep="1">
              <colspec colnum="1" colname="c1" width="30%"/>
              <colspec colnum="2" colname="c2" width="70%"/>
              <tbody>
                <row>
                  <entry><command>localname</command></entry>
                  <entry>metadata</entry>
                </row>
                <row>
                  <entry><command>namespaces</command></entry>
                  <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                </row>
                <row>
                  <entry><command>attributes</command></entry>
                  <entry>id, metadataIdRef</entry>
                </row>
                <row>
                  <entry><command>nested elements</command></entry>
                  <entry>undefined</entry>
                </row>
                <row>
                  <entry><command>required</command></entry>
                  <entry>yes</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
       
          <para>
            The metadata element normally contains the static parts of
            measurements, and will no doubt differ from service
            to service.  Besides measurement data it is possible to send other
            items such as service descriptions.  We leave the description of
            what is possible inside of a metadata blank, and use vague schema
            language that allows for <emphasis>any</emphasis> reasonable XML
            to be contained within.
          </para> 

          <para>
            There are two attributes possible.  These are used to both track
            state and perform the various forms of chaining (e.g.
            <emphasis>operator</emphasis> or <emphasis>merge</emphasis>) that 
            may be required in a request message.  A detailed description
            follows:
          </para>

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>id</command> - Identifying attribute that can be
              used to track state.</para>
            </listitem>
            <listitem>
              <para><command>metadataIdRef</command> - Identifying attribute
              that can be used to track state or be linked to chaining.</para>
            </listitem>
          </itemizedlist>

        </section>

        <section id="messages_request_analysis_data" xreflabel="Data">
          <title>Data</title>
      
          <programlisting>
            <![CDATA[
<nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
           id="data2" metadataIdRef="metadata2" />
            ]]>
          </programlisting>

          <table frame="all" align="center" halign="center" width="80%"  id="table.messages_request_analysis_data">
            <title>Data Element Requirements</title>
            <tgroup cols="1" align="left" colsep="1" rowsep="1">
              <colspec colnum="1" colname="c1" width="30%"/>
              <colspec colnum="2" colname="c2" width="70%"/>
              <tbody>
                <row>
                  <entry><command>localname</command></entry>
                  <entry>data</entry>
                </row>
                <row>
                  <entry><command>namespaces</command></entry>
                  <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                </row>
                <row>
                  <entry><command>attributes</command></entry>
                  <entry>id, metadataIdRef</entry>
                </row>
                <row>
                  <entry><command>nested elements</command></entry>
                  <entry>undefined</entry>
                </row>
                <row>
                  <entry><command>required</command></entry>
                  <entry>yes</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
       
          <para>
            The data element normally contains the dynamic parts of
            measurements, and will no doubt differ from service to service.
            Besides collected measurements the data field may also be populated
            with query data, or even other other metadata information in certain
            applications.  We leave the description of what is possible inside
            of a data blank, and use vague schema language that allows for
            <emphasis>any</emphasis> reasonable XML to be contained within.
          </para> 

          <para>
            There are two attributes possible.  These are used to both track
            state inside of a request message.  A detailed description follows:
          </para>

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>id</command> - Identifying attribute that can be
              used to track state.</para>
            </listitem>
            <listitem>
              <para><command>metadataIdRef</command> - used to link data to
              metadata.</para>
            </listitem>
          </itemizedlist>

        </section>

      </section>
      
      <section id="messages_request_example" xreflabel="Request Message Example">
        <title>Request Message Example</title>
    
        <para>
          The following examples demonstrate some of the possible uses and
          layouts of request messages in the base protocol.  These examples are
          not an attempt to be exhaustive, but rather some examples of ways to
          perform common tasks.  Note that these messages are
          <emphasis>NOT</emphasis> indicative of a particular service. 
        </para>

        <para>
          The first example demonstrates the most common use case: a single 
          metadata and data pair.  This message represents the layouts of most
          request messages in the <emphasis>perfSONAR</emphasis> framework.
        </para>

        <programlisting>
          <![CDATA[
            <inlinexml file="examples/request1.xml"/>
          ]]>
        </programlisting> 
        
        <para>
          The second example is similar, but incorporates a parameters block
          that may be populated with optional behaviors for a service. 
        </para>

        <programlisting>
          <![CDATA[
            <inlinexml file="examples/request2.xml"/>
          ]]>
        </programlisting> 
        
        <para>
          The third example is also similar to the first, but shows it is
          possible to ask for multiple pairs of metadata and data in a single
          message.  Note that there are two empty data triggers to signify that
          each message be acted upon.
        </para>

        <programlisting>
          <![CDATA[
            <inlinexml file="examples/request3.xml"/>
          ]]>
        </programlisting> 
        
        <para>
          This example features merge chaining.  Note there is only one data
          trigger, and it is at the <emphasis>tail</emphasis> of the chain.  A
          service would perform the necessary chaining first, then act on the
          result of this operation.
        </para>

        <programlisting>
          <![CDATA[
            <inlinexml file="examples/request4.xml"/>
          ]]>
        </programlisting> 
        
        <para>
          The final example is an invalid case where the metadata does not
          have an appropriate data trigger.
        </para>

        <programlisting>
          <![CDATA[
            <inlinexml file="examples/request5.xml"/>
          ]]>
        </programlisting> 

      </section>

    </section>

    <section id="messages_response" xreflabel="Response Message">
      <title>Response Message</title>
    
      <para>
        The response message is a container filled with the results of a 
        <xref linkend="messages_request" /> from
        <emphasis>perfSONAR</emphasis> capable services.  Enclosed in this
        simple envelope will be a series of metadata and data
        pairs containing the results of actions performed by a service. We first
        present a very simple schema in
        <xref linkend="messages_response_schema" /> along with an analysis of
        the elements in <xref linkend="messages_response_analysis" />.  We
        conclude with examples in <xref linkend="messages_response_example" />.
      </para>

      <section id="messages_response_schema" xreflabel="Response Message Schema">
        <title>Response Message Schema</title>
    
        <para>
          The following schema is a native description of the response schema as
          in the <citation>RELAX-NG</citation> language.  Through the use of
          tools such as <citation>Trang</citation> and <citation>MSV</citation>
          it is possible to convert this to other widely accepted formats such
          as <citation>XSD</citation>.
        </para>

        <programlisting>
          <![CDATA[
            <inlineschema file="schema/response.rnc"/>
          ]]>
        </programlisting> 

      </section>
    
      <section id="messages_response_analysis" xreflabel="Response Message Analysis">
        <title>Response Message Analysis</title>
    
        <para>
          The following is a breakdown of the elements featured in the schema.
          Note that services in general <emphasis>must not</emphasis> implement
          or attempt to understand this, it is provided as a tool to aid in the
          development of extensions.
        </para>

        <section id="messages_response_analysis_message" xreflabel="Message">
          <title>Message</title>
      
          <programlisting>
            <![CDATA[
<nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
              id="message1"
              type="Response">

  <nmwg:parameters />
  
  <nmwg:metadata />
  
  <nmwg:data />
  
</nmwg:message>
            ]]>
          </programlisting>

          <table frame="all" align="center" halign="center" width="80%"  id="table.messages_response_analysis_message">
            <title>Message Element Requirements</title>
            <tgroup cols="1" align="left" colsep="1" rowsep="1">
              <colspec colnum="1" colname="c1" width="30%"/>
              <colspec colnum="2" colname="c2" width="70%"/>
              <tbody>
                <row>
                  <entry><command>localname</command></entry>
                  <entry>message</entry>
                </row>
                <row>
                  <entry><command>namespaces</command></entry>
                  <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                </row>
                <row>
                  <entry><command>attributes</command></entry>
                  <entry>id, type</entry>
                </row>
                <row>
                  <entry><command>nested elements</command></entry>
                  <entry>parameters, metadata, data</entry>
                </row>
                <row>
                  <entry><command>required</command></entry>
                  <entry>yes</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
       
          <para>
            The message element, like it's counterpart seen in
            <xref linkend="messages_response_analysis_message" /> serves as a
            container for transporting responses from
            <emphasis>perfSONAR</emphasis> capable services.  The message itself
            is unremarkable, it features attributes to aid in the identification
            of messages and contains elements with legitimate content.  We first
            examine the available attributes:  
          </para> 

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>id</command> - Identifier that can be used to track
              state between messages and services</para>
            </listitem>
            <listitem>
              <para><command>type</command> - Designates the message to a 
              particular type; fully enumerated in each protocol extension
              </para>
            </listitem>
          </itemizedlist>

          <para>
            There are three major elements that may be contained in the message
            element:
          </para> 
      
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>Parameters</command> - Described in
              <xref linkend="messages_response_analysis_parameters" /></para>
            </listitem>
            <listitem>
              <para><command>Metadata</command> - Described in
              <xref linkend="messages_response_analysis_metadata" /></para>
            </listitem>
            <listitem>
              <para><command>Data</command> - Described in
              <xref linkend="messages_response_analysis_data" /></para>
            </listitem>
          </itemizedlist>

        </section>

        <section id="messages_response_analysis_parameters" xreflabel="Parameters">
          <title>Parameters</title>
      
          <programlisting>
            <![CDATA[
<nmwg:parameters xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="parameters1">

  <nmwg:parameter />

</nmwg:parameters>
            ]]>
          </programlisting>

          <table frame="all" align="center" halign="center" width="80%"  id="table.messages_response_analysis_parameters">
            <title>Parameters Element Requirements</title>
            <tgroup cols="1" align="left" colsep="1" rowsep="1">
              <colspec colnum="1" colname="c1" width="30%"/>
              <colspec colnum="2" colname="c2" width="70%"/>
              <tbody>
                <row>
                  <entry><command>localname</command></entry>
                  <entry>parameters</entry>
                </row>
                <row>
                  <entry><command>namespaces</command></entry>
                  <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                </row>
                <row>
                  <entry><command>attributes</command></entry>
                  <entry>id</entry>
                </row>
                <row>
                  <entry><command>nested elements</command></entry>
                  <entry>parameter</entry>
                </row>
                <row>
                  <entry><command>required</command></entry>
                  <entry>no</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
       
          <para>
            The parameters element is normally only present if there was a
            corresponding element in
            <xref linkend="messages_response_analysis_message" />, although it
            can be used by services to relay back other forms of information.
            As in <xref linkend="messages_response_analysis_parameters" />, it
            encloses a series of parameter elements that.  This element serves
            merely as a container for the
            <xref linkend="messages_response_analysis_parameter" /> elements
            that will populate it.  The single available attribute is described
            first:
          </para>

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>id</command> - Identifying attribute that can be
              used to track state.</para>
            </listitem>
          </itemizedlist>

          <para>
            There is only one available element, although it can be used
            multiple times.
          </para> 
      
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>Parameter</command> - Described in
              <xref linkend="messages_response_analysis_parameter" /></para>
            </listitem>
          </itemizedlist>

        </section>

        <section id="messages_response_analysis_parameter" xreflabel="Parameter">
          <title>Parameter</title>
      
          <programlisting>
            <![CDATA[
<nmwg:parameter xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                name="NAME">VALUE</nmwg:parameter>

<!-- OR -->

<nmwg:parameter xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                name="NAME" value="VALUE" />
            ]]>
          </programlisting>

          <table frame="all" align="center" halign="center" width="80%"  id="table.messages_response_analysis_parameter">
            <title>Parameter Element Requirements</title>
            <tgroup cols="1" align="left" colsep="1" rowsep="1">
              <colspec colnum="1" colname="c1" width="30%"/>
              <colspec colnum="2" colname="c2" width="70%"/>
              <tbody>
                <row>
                  <entry><command>localname</command></entry>
                  <entry>parameter</entry>
                </row>
                <row>
                  <entry><command>namespaces</command></entry>
                  <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                </row>
                <row>
                  <entry><command>attributes</command></entry>
                  <entry>name, value</entry>
                </row>
                <row>
                  <entry><command>nested elements</command></entry>
                  <entry>text</entry>
                </row>
                <row>
                  <entry><command>required</command></entry>
                  <entry>yes</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
       
          <para>
            The parameter element features a generic structure that allows it to
            easily adapt to the needs of a particular schema.  Possible names
            and values will not be enumerated here, but will be done both at the
            protocol extension and service level.  
          </para>    

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>name</command> - Generically specify the name
              of some variable value</para>
            </listitem>
            <listitem>
              <para><command>value</command> - Can be used instead a text
              element to set the value of the <emphasis>name</emphasis></para>
            </listitem>
          </itemizedlist>

          <para>
            In lieu of the <emphasis>value</emphasis> attribute, a text element
            may be used for the same purpose.  This is the only element that is
            allowed for this instantiation of the parameters element.
          </para> 

        </section>

        <section id="messages_response_analysis_metadata" xreflabel="Metadata">
          <title>Metadata</title>
      
          <programlisting>
            <![CDATA[
<nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
               id="metadata2" metadataIdRef="metadata1" />
            ]]>
          </programlisting>

          <table frame="all" align="center" halign="center" width="80%"  id="table.messages_response_analysis_metadata">
            <title>Metadata Element Requirements</title>
            <tgroup cols="1" align="left" colsep="1" rowsep="1">
              <colspec colnum="1" colname="c1" width="30%"/>
              <colspec colnum="2" colname="c2" width="70%"/>
              <tbody>
                <row>
                  <entry><command>localname</command></entry>
                  <entry>metadata</entry>
                </row>
                <row>
                  <entry><command>namespaces</command></entry>
                  <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                </row>
                <row>
                  <entry><command>attributes</command></entry>
                  <entry>id, metadataIdRef</entry>
                </row>
                <row>
                  <entry><command>nested elements</command></entry>
                  <entry>undefined</entry>
                </row>
                <row>
                  <entry><command>required</command></entry>
                  <entry>yes</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
       
          <para>
            The metadata element in the response is normally an exact copy of
            the sent <xref linkend="messages_response_analysis_metadata" />.
            We leave the description of what is possible inside of a metadata
            blank, and use vague schema language that allows for
            <emphasis>any</emphasis> reasonable XML to be contained within.
          </para> 

          <para>
            There are two attributes possible.  These are used to both track
            state, possibly back to the sent
            <xref linkend="messages_response_analysis_metadata" />.  A detailed
            description follows:
          </para>

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>id</command> - Identifying attribute that can be
              used to track state.</para>
            </listitem>
            <listitem>
              <para><command>metadataIdRef</command> - Identifying attribute
              that can be used to track state.</para>
            </listitem>
          </itemizedlist>

        </section>

        <section id="messages_response_analysis_data" xreflabel="Data">
          <title>Data</title>
      
          <programlisting>
            <![CDATA[
<nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
           id="data2" metadataIdRef="metadata2" />
            ]]>
          </programlisting>

          <table frame="all" align="center" halign="center" width="80%"  id="table.messages_response_analysis_data">
            <title>Data Element Requirements</title>
            <tgroup cols="1" align="left" colsep="1" rowsep="1">
              <colspec colnum="1" colname="c1" width="30%"/>
              <colspec colnum="2" colname="c2" width="70%"/>
              <tbody>
                <row>
                  <entry><command>localname</command></entry>
                  <entry>data</entry>
                </row>
                <row>
                  <entry><command>namespaces</command></entry>
                  <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                </row>
                <row>
                  <entry><command>attributes</command></entry>
                  <entry>id, metadataIdRef</entry>
                </row>
                <row>
                  <entry><command>nested elements</command></entry>
                  <entry>undefined</entry>
                </row>
                <row>
                  <entry><command>required</command></entry>
                  <entry>yes</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
       
          <para>
            The data element will contain results and is usually not not empty
            like the trigger that is used in
            <xref linkend="messages_response_analysis_data" />.  We leave the
            description of what is possible inside of a data blank, and use
            vague schema language that allows for <emphasis>any</emphasis>
            reasonable XML to be contained within.
          </para> 

          <para>
            There are two attributes possible.  These are used to both track
            state inside of a response message.  A detailed description follows:
          </para>

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>id</command> - Identifying attribute that can be
              used to track state.</para>
            </listitem>
            <listitem>
              <para><command>metadataIdRef</command> - used to link data to
              metadata.</para>
            </listitem>
          </itemizedlist>

        </section>

      </section>
      
      <section id="messages_response_example" xreflabel="Response Message Example">
        <title>Response Message Example</title>
    
        <para>
          The following examples demonstrate some of the possible uses and
          layouts of response messages in the base protocol.  These examples are
          not an attempt to be exhaustive and are <emphasis>NOT</emphasis>
          indicative of a particular service. 
        </para>

        <para>
          The first example is the most common form of response message
          containing a single metadata and data pair.  This would be indicitive
          of success.
        </para>

        <programlisting>
          <![CDATA[
            <inlinexml file="examples/response1.xml"/>
          ]]>
        </programlisting> 
        
        <para> 
          The second example is similar, although it features two pairs.
        </para>

        <programlisting>
          <![CDATA[
            <inlinexml file="examples/response2.xml"/>
          ]]>
        </programlisting> 

        <para> 
          The final example demonstrates an error condition.  Note that this
          may contain multiple pairs if sent, and it may be possible to have
          sucess for some, and errors for others.
        </para>

        <programlisting>
          <![CDATA[
            <inlinexml file="examples/response3.xml"/>
          ]]>
        </programlisting> 

      </section>

    </section>

  </section>

  <section id="result_codes" xreflabel="Result Codes">
    <title>Result Codes</title>
    
    <para>
      There are currently two hierarchical systems in use to return status
      information about services.  Each of these approaches takes into account
      the facts that there are many diverse services as well as different
      status messages that may be returned, but the newer of the approaches
      also allows for versioning and backwards compatibility that the original
      attempt did not consider.  The original system <command>must</command>
      continue to be supported by all services for the foreseeable future, while
      a slow phase in of the latest eventTypes is attempted.  
    </para>

    <para>
      The original system, currently used by all
      <emphasis>perfSONAR</emphasis> services and explained in
      <citation>Result Codes</citation>, relies on a static tree of status
      information that is branched first by general features (i.e. 
      <emphasis>success</emphasis>, <emphasis>error</emphasis>) and later
      by more specific characteristics such as service and error type.  This
      hierarchy is however missing the ability to offer versions of different
      codes that would have the ability to become forward or backwards
      compatible and is not in the well known URI format used by other
      eventTypes.
    </para>        

    <programlisting>
      <![CDATA[
success.
        ls.
           something
           something_else
        ma.
           something
error.
      ls.
         something
      ma.
         something
         something_else                      
      ]]>
    </programlisting>  

    <para>  
      The most recent description of this status paradigm follows the URI
      syntax already in use by other eventTypes and does allow version numbers
      to be assigned to the various messages.  This will allow services to
      pick and choose which versions they may support more readily.  
    </para>

    <programlisting>
      <![CDATA[
http://schemas.perfsonar.net/status/
                                    success/
                                            ls/
                                               something/
                                                         1.0
                                               something_else/
                                                              1.0
                                                              1.1
                                            ma/
                                               something/
                                                         1.0
                                    error/
                                          ma/
                                             something/
                                                       1.0
                                                       1.1
                                             something_else/
                                                            1.0                                               
      ]]>
    </programlisting>  

  </section>

  <section id="extension" xreflabel="Extension">
    <title>Extension</title>
    
    <para>
      This document <emphasis>must</emphasis> become the basis for all extension
      protocols in the perfSONAR framework.  As a demonstration we include two 
      protocols that should be implemented by all perfSONAR services: 
      <xref linkend="extension_echo" /> and <xref linkend="extension_aa" />.
      These protocols will incorporate the preceding work to eliminate
      duplication as much as possible, only specifying parts that are necessary
      for clarification.  Each extension may be treated as a separate work, and
      will include the necessary schema, analysis, and example sections.
    </para>

    <section id="extension_echo" xreflabel="Echo Protocol">
      <title>Echo Protocol</title>
    
      <para>
        The sole purpose of certain <emphasis>perfSONAR</emphasis> services is
        to aid in the discovery and protection of the enterprise.  The tasks
        undertaken by these critical components also require sound communication
        protocols based on the same <citation>XML</citation> formats used to
        exchange and store measurement data as defined by the
        <citation>NM-WG</citation> in the <citation>OGF</citation>.
      </para>

      <para>
        The <emphasis>Echo Protocol</emphasis> is currently used by client
        applications as well as other services to ascertain the
        <emphasis>liveness</emphasis> of a given <emphasis>perfSONAR</emphasis>
        service instance.  A well formatted <command>EchoRequest</command>
        message, when sent to any <emphasis>perfSONAR</emphasis> service, should
        trigger a similar <command>EchoResponse</command>.  This interaction
        allows a client or service to gauge the responsiveness of a service; the
        potential to learn more information is also available for services who
        wish to provide it.  
      </para>

      <para>
        The core functionality of the <emphasis>Echo Protocol</emphasis> is to 
        provide a simple <emphasis>request</emphasis> and
        <emphasis>response</emphasis> message set capable of delivering
        rudimentary status information.  This protocol for exchange is similar to 
        other types of communication, notably <xref linkend="ping" />. While this
        protocol may seem to be a reinvention of existing tooling, the 
        extension possibility far outweighs the duplication of functionality.
      </para>
    
      <para>
        We present an overview of the messages used in this protocol, including
        both schematic designs and examples for the 
        <xref linkend="extension_echo_request_message" /> and
        <xref linkend="extension_echo_response_message" />.  
        We conclude with a brief description of where extensions are 
        possible followed by some current examples in 
        <xref linkend="extension_echo_protocol_extension" />.  
      </para>
    
      <para>  
        The remainder of this section will explain the origins of this command
        protocol in <xref linkend="extension_echo_architecture" />, detailed
        descriptions regarding syntax and semantics in
        <xref linkend="extension_echo_request_message" /> and
        <xref linkend="extension_echo_response_message" />, an overview of
        status in
        <xref linkend="extension_echo_result_codes" />, and finally points of
        extension will be discussed in
        <xref linkend="extension_echo_protocol_extension" />.
      </para>

      <section id="extension_echo_architecture" xreflabel="Architecture">
        <title>Architecture</title>
    
        <para>
          To ensure availability, each <emphasis>perfSONAR</emphasis> service
          <command>must</command> be able to respond to simple queries regarding
          status.  Services that fail to answer a direct question may be
          experiencing difficulty, and therefore may not be able to complete
          interaction with interested parties.  Client applications, services, or
          external monitoring tools (such as <citation>SmokePing</citation>) can
          use this simple method to quickly come to conclusions regarding framework
          availability.  
        </para>
    
        <para>
          All perfSONAR services must contain the ability to respond to the most 
          basic of <emphasis>Echo Protocol</emphasis> messages as described by this
          document.  The minimum requirement of an
          <emphasis>Echo Protocol</emphasis> exchange is simply responding to a
          properly encoded request.  <emphasis>Echo Protocol</emphasis> extensions
          may be built from this general protocol to elicit additional functionality
          on a service by service basis to do tasks such as test the capabilities of
          the service, receive statistics, or monitor erroneous behavior.  The
          assignment of these other tasks within an <command>EchoRequest</command>
          message is valid provided that the basic structure is not compromised.
        </para>

      </section>


      <section id="extension_echo_request_message" xreflabel="Request Message">
        <title>Request Message</title>
    
        <para>
          The <command>EchoRequest</command> message can be initiated by a
          client application or service wanting to know the availability of some
          other service.  The format of this message is minimal with respect to
          other protocol messages as the input is rather simple.  
        </para>
      
        <para>
          All protocols used within <emphasis>perfSONAR</emphasis> are based on
          recommendations from the <emphasis>OGF</emphasis>'s
          <emphasis>NM-WG</emphasis>, and have been initially described
          in <citation>Zurawski06Scalable</citation>.  The basic format described
          in this work for measurements has been adapted as a template for use in
          service communication as well, keeping the concept of 
          <xref linkend="metadata" /> and <xref linkend="data" /> intact.  
        </para>

        <section id="extension_echo_request_schema" xreflabel="Request Message Schema">
          <title>Request Message Schema</title>
    
          <para>
            <emphasis>NM-WG</emphasis> schemata is always expressed in terms of
            the RELAX-NG schema language.  This tool, unlike similar XML schema 
            languages, does not utilize XML markup.  The syntax is similar 
            to that of a regular language, and allows for a rather compact 
            description.  The following describes the 
            <command>EchoRequest</command> schema.  Note that this 
            <command>will</command> only validate
            <emphasis>EchoRequest</emphasis> messages.
          </para>

          <programlisting>
            <![CDATA[
              <inlineschema file="schema/echo_request.rnc"/>
            ]]>
          </programlisting> 

        </section>
    
        <section id="extension_echo_request_analysis" xreflabel="Request Message Analysis">
          <title>Request Message Analysis</title>
    
          <para>
            The following is a breakdown of the elements featured in the schema.
          </para>

          <section id="extension_echo_request_analysis_message" xreflabel="Message">
            <title>Message</title>
      
            <programlisting>
              <![CDATA[
<nmwg:message  xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
               type="EchoRequest"
               id="STRING">

  <nmwg:metadata />

  <nmwg:data />

</nmwg:message>
              ]]>
            </programlisting>

            <table frame="all" align="center" halign="center" width="80%"  id="table.extension_echo_request_analysis_message">
              <title>Message Element Requirements</title>
              <tgroup cols="1" align="left" colsep="1" rowsep="1">
                <colspec colnum="1" colname="c1" width="30%"/>
                <colspec colnum="2" colname="c2" width="70%"/>
                <tbody>
                  <row>
                    <entry><command>localname</command></entry>
                    <entry>message</entry>
                  </row>
                  <row>
                    <entry><command>namespaces</command></entry>
                    <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                  </row>
                  <row>
                    <entry><command>attributes</command></entry>
                    <entry>id, type</entry>
                  </row>
                  <row>
                    <entry><command>nested elements</command></entry>
                    <entry>metadata, data</entry>
                  </row>
                  <row>
                    <entry><command>required</command></entry>
                    <entry>yes</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>
              This appears the same was as it does in
              <xref linkend="messages_request_analysis_message" />, the only
              notable exception is a requirement that
              <emphasis>type</emphasis> attribute contain the values
              <command>EchoRequest</command> or
              <command>http://schemas.perfsonar.net/messages/EchoRequest/1.0</command>.
            </para>

          </section>
            
          <section id="extension_echo_request_analysis_metadata" xreflabel="metadata">
            <title>Metadata</title>
      
            <programlisting>
              <![CDATA[
<nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="STRING">

   <nmwg:eventType />

</nmwg:metadata>
              ]]>
            </programlisting>

            <table frame="all" align="center" halign="center" width="80%"  id="table.extension_echo_request_analysis_metadata">
              <title>Metadata Element Requirements</title>
              <tgroup cols="1" align="left" colsep="1" rowsep="1">
                <colspec colnum="1" colname="c1" width="30%"/>
                <colspec colnum="2" colname="c2" width="70%"/>
                <tbody>
                  <row>
                    <entry><command>localname</command></entry>
                    <entry>metadata</entry>
                  </row>
                  <row>
                    <entry><command>namespaces</command></entry>
                    <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                  </row>
                  <row>
                    <entry><command>attributes</command></entry>
                    <entry>id, metadataIdRef</entry>
                  </row>
                  <row>
                    <entry><command>nested elements</command></entry>
                    <entry>eventType</entry>
                  </row>
                  <row>
                    <entry><command>required</command></entry>
                    <entry>yes</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>
              This appears the same was as it does in
              <xref linkend="messages_request_analysis_metadata" />, the only
              notable exception is specifying that 
              <xref linkend="extension_echo_request_analysis_eventtype" /> can be
              the only child.
            </para>

          </section>

          <section id="extension_echo_request_analysis_eventtype" xreflabel="EventType">
            <title>EventType</title>
      
            <programlisting>
              <![CDATA[
<nmwg:eventType xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
  http://schemas.perfsonar.net/tools/admin/echo/2.0
</nmwg:eventType>
              ]]>
            </programlisting>

            <table frame="all" align="center" halign="center" width="80%"  id="table.extension_echo_request_analysis_eventtype">
              <title>EventType Element Requirements</title>
              <tgroup cols="1" align="left" colsep="1" rowsep="1">
                <colspec colnum="1" colname="c1" width="30%"/>
                <colspec colnum="2" colname="c2" width="70%"/>
                <tbody>
                  <row>
                    <entry><command>localname</command></entry>
                    <entry>eventType</entry>
                  </row>
                  <row>
                    <entry><command>namespaces</command></entry>
                    <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                  </row>
                  <row>
                    <entry><command>attributes</command></entry>
                    <entry>N/A</entry>
                  </row>
                  <row>
                    <entry><command>nested elements</command></entry>
                    <entry>text</entry>
                  </row>
                  <row>
                    <entry><command>required</command></entry>
                    <entry>yes</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>
              The <emphasis>eventType</emphasis> element is normally used to
              specify an action for a service or measurement.  We utilize it for
              this role in the <emphasis>Echo Protocol</emphasis> by specifying
              the <emphasis>action</emphasis> of responding to an 
              <command>EchoRequest</command>.  There are no attributes permitted
              for this element, and only text can be used as a child, specifically
              text reporting 
              <command>http://schemas.perfsonar.net/tools/admin/echo/2.0</command>.
            </para>
          
            <para>
              Because this element is currently well defined into a specific role
              and purpose, the eventType is non-negotiable.  Extensions, as 
              discussed in <xref linkend="extension_echo_protocol_extension" />,
              may be employed on a service by service basis to expand this basic
              specification, as long as the role is preserved.  
            </para>        

          </section>
            
          <section id="extension_echo_request_analysis_data" xreflabel="Data">
            <title>Data</title>
      
            <programlisting>
              <![CDATA[
<nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
           id="STRING" 
           metadataIdRef="STRING" />
              ]]>
            </programlisting>

            <table frame="all" align="center" halign="center" width="80%"  id="table.extension_echo_request_analysis_data">
              <title>Data Element Requirements</title>
              <tgroup cols="1" align="left" colsep="1" rowsep="1">
                <colspec colnum="1" colname="c1" width="30%"/>
                <colspec colnum="2" colname="c2" width="70%"/>
                 <tbody>
                  <row>
                    <entry><command>localname</command></entry>
                    <entry>data</entry>
                  </row>
                  <row>
                    <entry><command>namespaces</command></entry>
                    <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                  </row>
                  <row>
                    <entry><command>attributes</command></entry>
                    <entry>id, metadataIdRef</entry>
                  </row>
                  <row>
                    <entry><command>nested elements</command></entry>
                    <entry>N/A</entry>
                  </row>
                  <row>
                    <entry><command>required</command></entry>
                    <entry>yes</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>
              This appears the same was as it does in
              <xref linkend="messages_request_analysis_data" />.
            </para>

          </section>            
            
        </section>
      
        <section id="extension_echo_request_example" xreflabel="Request Message Example">
          <title>Request Message Example</title>
    
           <para>
            The first example shows a correct configuration for an
            <emphasis>EchoRequest</emphasis> message.
          </para>

          <programlisting>
            <![CDATA[
              <inlinexml file="examples/echo1.xml"/>
            ]]>
          </programlisting> 
            
          <para>
            The final example shows two incorrect items: the message type
            and eventType are both wrong.  This would be rejected by a
            service.
          </para>

          <programlisting>
            <![CDATA[
              <inlinexml file="examples/echo2.xml"/>
            ]]>
          </programlisting> 

        </section>

      </section>

      <section id="extension_echo_response_message" xreflabel="Response Message">
        <title>Response Message</title>
    
        <para>
          The <command>EchoResponse</command> message is a reply to a given
          <command>EchoRequest</command> message from a client application or
          service.  Like the <command>EchoRequest</command> the format is
          kept very simple, exposing only a selection of the
          <emphasis>NM-WG</emphasis> work with respect to other
          <emphasis>perfSONAR</emphasis> services.  This simplicity does however
          allow for limited extension, as discussed in 
          <xref linkend="extension_echo_protocol_extension" />.  As discussed in 
          <xref linkend="extension_echo_request_message" />, this response message is also 
          based on recommendations from the <emphasis>NM-WG</emphasis>.
        </para>

        <section id="extension_echo_response_schema" xreflabel="Response Message Schema">
          <title>Response Message Schema</title>
    
          <para>
            <emphasis>NM-WG</emphasis> schemata is always expressed in terms of
            the RELAX-NG schema language.  This tool, unlike similar XML schema 
            languages, does not utilize XML markup.  The syntax is similar 
            to that of a regular language, and allows for a rather compact 
            description.  Similar to the <command>EchoRequest</command> RELAX-NG 
            description, this schema fragment offers only the bare essentials
            for validating this message type.
           </para>

          <programlisting>
            <![CDATA[
              <inlineschema file="schema/echo_response.rnc"/>
            ]]>
          </programlisting> 

        </section>
    
        <section id="extension_echo_response_analysis" xreflabel="Response Message Analysis">
          <title>Response Message Analysis</title>
    
          <para>
            The following is a breakdown of the elements featured in the schema.
          </para>

          <section id="extension_echo_response_analysis_message" xreflabel="Message">
            <title>Message</title>
      
            <programlisting>
              <![CDATA[
<nmwg:message  xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
             type="EchoResponse"
             id="STRING">

  <nmwg:metadata />

  <nmwg:data />

</nmwg:message>
              ]]>
            </programlisting>

            <table frame="all" align="center" halign="center" width="80%"  id="table.extension_echo_response_analysis_message">
              <title>Message Element Requirements</title>
              <tgroup cols="1" align="left" colsep="1" rowsep="1">
                <colspec colnum="1" colname="c1" width="30%"/>
                <colspec colnum="2" colname="c2" width="70%"/>
                <tbody>
                  <row>
                    <entry><command>localname</command></entry>
                    <entry>message</entry>
                  </row>
                  <row>
                    <entry><command>namespaces</command></entry>
                    <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                  </row>
                  <row>
                    <entry><command>attributes</command></entry>
                    <entry>id, type</entry>
                  </row>
                  <row>
                    <entry><command>nested elements</command></entry>
                    <entry>metadata, data</entry>
                  </row>
                  <row>
                    <entry><command>required</command></entry>
                    <entry>yes</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>
              This appears the same was as it does in
              <xref linkend="messages_response_analysis_message" />, the only
              notable exception is a requirement that
              <emphasis>type</emphasis> attribute contain the values
              <command>EchoResponse</command> or
              <command>http://schemas.perfsonar.net/messages/EchoResponse/1.0</command>.
            </para>

          </section>
            
          <section id="extension_echo_response_analysis_metadata" xreflabel="metadata">
            <title>Metadata</title>
      
            <programlisting>
              <![CDATA[
<nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="STRING">

   <nmwg:eventType />

</nmwg:metadata>
              ]]>
            </programlisting>

            <table frame="all" align="center" halign="center" width="80%"  id="table.extension_echo_response_analysis_metadata">
              <title>Metadata Element Requirements</title>
              <tgroup cols="1" align="left" colsep="1" rowsep="1">
                <colspec colnum="1" colname="c1" width="30%"/>
                <colspec colnum="2" colname="c2" width="70%"/>
                <tbody>
                  <row>
                    <entry><command>localname</command></entry>
                    <entry>metadata</entry>
                  </row>
                  <row>
                    <entry><command>namespaces</command></entry>
                    <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                  </row>
                  <row>
                    <entry><command>attributes</command></entry>
                    <entry>id, metadataIdRef</entry>
                  </row>
                  <row>
                    <entry><command>nested elements</command></entry>
                    <entry>eventType</entry>
                  </row>
                  <row>
                    <entry><command>required</command></entry>
                    <entry>yes</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>
              This appears the same was as it does in
              <xref linkend="messages_response_analysis_metadata" />, the only
              notable exception is specifying that 
              <xref linkend="extension_echo_response_analysis_eventtype" /> can be
              the only child.
            </para>

          </section>

          <section id="extension_echo_response_analysis_eventtype" xreflabel="EventType">
            <title>EventType</title>
      
            <programlisting>
              <![CDATA[
<nmwg:eventType xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
  http://schemas.perfsonar.net/tools/admin/echo/2.0
</nmwg:eventType>
              ]]>
            </programlisting>

            <table frame="all" align="center" halign="center" width="80%"  id="table.extension_echo_response_analysis_eventtype">
              <title>EventType Element Requirements</title>
              <tgroup cols="1" align="left" colsep="1" rowsep="1">
                <colspec colnum="1" colname="c1" width="30%"/>
                <colspec colnum="2" colname="c2" width="70%"/>
                <tbody>
                  <row>
                    <entry><command>localname</command></entry>
                    <entry>eventType</entry>
                  </row>
                  <row>
                    <entry><command>namespaces</command></entry>
                    <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                  </row>
                  <row>
                    <entry><command>attributes</command></entry>
                    <entry>N/A</entry>
                  </row>
                  <row>
                    <entry><command>nested elements</command></entry>
                    <entry>text</entry>
                  </row>
                  <row>
                    <entry><command>required</command></entry>
                    <entry>yes</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>
              The <emphasis>eventType</emphasis> element is normally used to
              specify an action for a service or measurement.  We utilize it for
              this role in the <emphasis>Echo Protocol</emphasis> by specifying
              the <emphasis>action</emphasis> of a response to an 
              <command>EchoRequest</command>.  There are no attributes permitted
              for this element, and only text can be used as a child, specifically
              text reporting the status of the transaction. A complete list of
              <emphasis>available</emphasis> status strings is availble in
              <xref linkend="extension_echo_result_codes" />.
            </para>    

          </section>
            
          <section id="extension_echo_response_analysis_data" xreflabel="Data">
            <title>Data</title>
      
            <programlisting>
              <![CDATA[
<nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
           id="STRING" 
           metadataIdRef="STRING" />
              ]]>
            </programlisting>

            <table frame="all" align="center" halign="center" width="80%"  id="table.extension_echo_response_analysis_data">
              <title>Data Element Requirements</title>
              <tgroup cols="1" align="left" colsep="1" rowsep="1">
                <colspec colnum="1" colname="c1" width="30%"/>
                <colspec colnum="2" colname="c2" width="70%"/>
                <tbody>
                  <row>
                    <entry><command>localname</command></entry>
                    <entry>data</entry>
                  </row>
                  <row>
                    <entry><command>namespaces</command></entry>
                    <entry>http://ggf.org/ns/nmwg/base/2.0/</entry>
                  </row>
                  <row>
                    <entry><command>attributes</command></entry>
                    <entry>id, metadataIdRef</entry>
                  </row>
                  <row>
                    <entry><command>nested elements</command></entry>
                    <entry>datum</entry>
                  </row>
                  <row>
                    <entry><command>required</command></entry>
                    <entry>yes</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>
              This appears the same was as it does in
              <xref linkend="messages_response_analysis_data" /> with the 
              exception of allowing
              <xref linkend="extension_echo_response_analysis_datum" /> as a child
              element.
            </para>

          </section>   
 
          <section id="extension_echo_response_analysis_datum" xreflabel="Datum">
            <title>Datum</title>
      
            <programlisting>
              <![CDATA[
<nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0">
  TEXT
</nmwgr:datum>

<!-- OR -->

<nmwg:datum xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
  TEXT
</nmwg:datum>
              ]]>
            </programlisting>

            <table frame="all" align="center" halign="center" width="80%"  id="table.extension_echo_response_analysis_datum">
              <title>Datum Element Requirements</title>
              <tgroup cols="1" align="left" colsep="1" rowsep="1">
                <colspec colnum="1" colname="c1" width="30%"/>
                <colspec colnum="2" colname="c2" width="70%"/>
                <tbody>
                  <row>
                    <entry><command>localname</command></entry>
                    <entry>datum</entry>
                  </row>
                  <row>
                    <entry><command>namespaces</command></entry>
                    <entry>http://ggf.org/ns/nmwg/result/2.0/, http://ggf.org/ns/nmwg/base/2.0/</entry>
                  </row>
                  <row>
                    <entry><command>attributes</command></entry>
                    <entry>value</entry>
                  </row>
                  <row>
                    <entry><command>nested elements</command></entry>
                    <entry>text</entry>
                  </row>
                  <row>
                    <entry><command>required</command></entry>
                    <entry>yes</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>
              The <emphasis>datum</emphasis> element describes measurements in
              most circumstances; the intent in the
              <emphasis>Echo Protocol</emphasis> is to report back a human
              readable status message.  There is only one possible attribute
              accepted for this element, <emphasis>value</emphasis>, and it may be
              used in place of an enclosed text element.  The text could be
              any message the service wishes to return.
            </para>

          </section>              
            
        </section>
      
        <section id="extension_echo_response_example" xreflabel="Response Message Example">
          <title>Response Message Example</title>
    
          <para>
            The first example shows a correct configuration for an
            <emphasis>EchoResponse</emphasis> message.
          </para>

          <programlisting>
            <![CDATA[
              <inlinexml file="examples/echo3.xml"/>
            ]]>
          </programlisting> 
            
          <para>
            The final example shows two incorrect items: the message type
            and eventType are both wrong.  This would be rejected by a
            service.
          </para>

          <programlisting>
            <![CDATA[
              <inlinexml file="examples/echo4.xml"/>
            ]]>
          </programlisting> 

        </section>

      </section>

      <section id="extension_echo_result_codes" xreflabel="Result Codes">
        <title>Result Codes</title>
    
        <para>
          The following new result codes can be incorporated into the echo
          protocol based on <xref linkend="result_codes" />.  We will introduce
          these into both styles to allow for backwards compatibility.  The
          original style is presented first:
        </para>

        <programlisting>
          <![CDATA[
success.
        echo
error.
      echo                   
          ]]>
        </programlisting>  
        
        <para>
          We can express the same information using the new URI style:
        </para>

        <programlisting>
          <![CDATA[
http://schemas.perfsonar.net/status/
                                    success/
                                            echo/
                                                 1.0
                                    error/
                                          echo/
                                               1.0                                           
          ]]>
        </programlisting> 

      </section>
      
      <section id="extension_echo_protocol_extension" xreflabel="Protocol Extension">
        <title>Protocol Extension</title>
    
        <para>
          There are two avenues for extension within the 
          <emphasis>Echo Protocol</emphasis> as described in this document.  It 
          is possible to manipulate the values contained within the
          <emphasis>eventType</emphasis> to advance functionality, or through
          schema modification it is possible to add additional elements capable
          of handling a wider range of actions.  Extensions that modify the schema
          for a given service should be careful to not change the themes presented
          in this protocol specification.  It is imperative that all services
          respect the basic functionality in their quest to add new features.
        </para>
      
        <section id="extension_echo_protocol_extension_eventType" xreflabel="eventType Extension">
          <title>eventType Extension</title>
      
          <para>
            The current accepted <emphasis>eventType</emphasis> for the 
            <emphasis>Echo Protocol</emphasis>'s <command>EchoRequest</command> 
            message is 
            <command>http://schemas.perfsonar.net/tools/admin/echo/2.0</command>.
            This action must be accepted by all services.  By adding additional
            <emphasis>eventType</emphasis>s with the same format it is possible to
            extract additional information via a service.
          </para>
        
          <para>
            Consider  simple service <command>X</command>.  The designer of this
            service wishes to create a special behaviour for specific
            <emphasis>eventType</emphasis>s.  The following new
            <emphasis>eventType</emphasis>s are added to his service code (and to
            his implementation of the schema):
          </para>
        
          <itemizedlist mark='opencircle'>
            <listitem>
              <para>
                <command>http://schemas.perfsonar.net/tools/admin/echo/X/2.0</command> - 
                Allows service contact information to be returned via 
                <emphasis>nmwgr:datum</emphasis>
              </para>
              <para>
                <command>http://schemas.perfsonar.net/tools/admin/echo/X/contact/2.0</command> - 
                Allows service contact information to be returned via 
                <emphasis>nmwgr:datum</emphasis>
              </para>
              <para>
                <command>http://schemas.perfsonar.net/tools/admin/echo/X/stats/2.0</command> - 
                Allows service usage statistics to be returned via 
                <emphasis>nmwgr:datum</emphasis>
              </para>
              <para>
                <command>http://schemas.perfsonar.net/tools/admin/echo/X/db/2.0</command> - 
                Allows a basic database test to be performed, the results of which
                are returned via <emphasis>nmwgr:datum</emphasis>
              </para>
            </listitem>
          </itemizedlist>  
        
          <para>
            By simply allow some additional string matching to occur in the
            <emphasis>eventType</emphasis> it is now possible to receive additional
            data to check the health of the system.  
          </para>

        </section>       

        <section id="extension_echo_protocol_extension_other" xreflabel="Other Extensions">
          <title>Other Extensions</title>
      
          <para>
            Similar to the above approach, it is possible to extend the schema
            by adding additional elements to increase functionality.  Individuals
            pursuing this route should be comfortable with schema design in 
            general and the layout of the <emphasis>NM-WG</emphasis> schema
            descriptions specifically.
          </para>

          <para>
            A simple extension involves allowing the commonly used 
            <emphasis>parameters</emphasis> structure to reside in the
            <xref linkend="extension_echo_request_analysis_message" /> of the
            <command>EchoRequest</command> message.  This modification is
            presented below.
          </para>

          <programlisting>
            <![CDATA[
              <inlineschema file="schema/echo_ext.rnc"/>
            ]]>
          </programlisting> 

          <para>
            Building on the example in 
            <xref linkend="extension_echo_protocol_extension_eventType" />, the following example
            message shows how to ask for similar information as previously
            described.
          </para>
        
          <programlisting>
            <![CDATA[
<nmwg:message type="http://schemas.perfsonar.net/messages/EchoRequest/1.0"
              id="message.96587"
              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
 
  <nmwg:metadata id="metadata.21324">
    <nmwg:eventType>
    http://schemas.perfsonar.net/tools/admin/echo/2.0
    </nmwg:eventType>
    <nmwg:parameters>
      <nmwg:parameter name="status" />
    </nmwg:parameters>
  </nmwg:metadata>
 
  <nmwg:data id="data.54365" metadataIdRef="metadata.21324"/>
 
</nmwg:message>
            ]]>
          </programlisting>         
        
          <para>
            While this method does require some additional schema modification, 
            the result produced is the same as described in 
            <xref linkend="extension_echo_protocol_extension_eventType" />.  An important
            consideration is the inclusion of <emphasis>parameters</emphasis>
            in an <command>EchoRequest</command> 
          </para>
        
        </section>  
    
        <para>
          It is important to note that the extension methods proposed here
          preserve the underlying base protocol completely.  Existing services
          that provide strict validation may reject messages that do not fit this
          standard explicitly, so be sure to design client applications
          appropriately.  
        </para>

      </section>

    </section>

    <section id="extension_aa" xreflabel="Authentication and Authorization Protocol">
      <title>Authentication and Authorization Protocol</title>
    
      <para>
        TBD
      </para>

    </section>

  </section>

  <section id="conclusion" xreflabel="Conclusion">
    <title>Conclusion</title>
    
    <para>
      Using the protocol and schema presented in this work, perfSONAR services
      now have a clear wary forward with regards to documentation.  Services
      documentation is now able to:
    </para>

    <itemizedlist mark='opencircle'>
      <listitem>
        <para>Choose at least one <emphasis>protocol extension</emphasis>, 
        based on this document
      </para></listitem>
      <listitem>
        <para>Choose at least one (or create one)
        <emphasis>schema profile</emphasis>, based on
        <citation>Measurement Schema</citation></para>
      </listitem>
    </itemizedlist>
    
    <para>
      Using these as building blocks, a truly unified communication protocol
      is possible.
    </para>
    
  </section>

  <glossary id="glossary">
    <title>Terms</title>

    <glossdiv id="A">
      <title>A</title>    
    </glossdiv> 
    
    <glossdiv id="B">
      <title>B</title>    
    </glossdiv> 
    
    <glossdiv id="C">
      <title>C</title>  
      <glossentry id="characteristic" xreflabel="characteristics"><glossterm>characteristic</glossterm>
        <glossdef>
          <para>Taken on the context of networking, these describe the 
          intrinsic properties of a portion of the network that are related 
          to the performance and reliability of the network.  See 
          <ulink url="http://www.ggf.org/documents/GFD.23.pdf">http://www.ggf.org/documents/GFD.23.pdf</ulink> 
          for more information.</para>
        </glossdef>
      </glossentry>   
    </glossdiv> 
    
    <glossdiv id="D">
      <title>D</title>   
      <glossentry id="data"><glossterm>data</glossterm>
        <glossdef>
          <para>An <xref linkend="NMWG" /> XML block used 
          to store dynamic information, such as the results of a measurement.</para>
        </glossdef>
      </glossentry>  
    </glossdiv> 
    
    <glossdiv id="E">
      <title>E</title>    
    </glossdiv> 
    
    <glossdiv id="F">
      <title>F</title>        
    </glossdiv> 
    
    <glossdiv id="G">
      <title>G</title>    
    </glossdiv> 
    
    <glossdiv id="H">
      <title>H</title>           
    </glossdiv> 
    
    <glossdiv id="I">
      <title>I</title>   
      <glossentry id="ICMP"><glossterm>ICMP</glossterm>
        <glossdef>
          <para>
            The Internet Control Message Protocol (ICMP) is a communications
            protocol used in computer networking. The main use of this format
            is by networked devices to send error and status messages.
          </para>
        </glossdef>
      </glossentry>         
    </glossdiv> 
    
    <glossdiv id="J">
      <title>J</title>    
    </glossdiv> 
    
    <glossdiv id="K">
      <title>K</title>    
    </glossdiv> 
    
    <glossdiv id="L">
      <title>L</title>    
    </glossdiv> 
    
    <glossdiv id="M">
      <title>M</title>  
      <glossentry id="metadata"><glossterm>metadata</glossterm>
        <glossdef>
          <para>An <xref linkend="NMWG" /> XML block used 
          to store static information, such as the specific parameters of a 
          measurement.</para>
        </glossdef>
      </glossentry>        
    </glossdiv> 
    
    <glossdiv id="N">
      <title>N</title>
      <glossentry id="NMWG"><glossterm>NM-WG</glossterm>
        <glossdef>
          <para>The performance of most grid applications is dependent on the 
          performance of the networks forming the grid. The Network 
          Measurements Working Group (NMWG) identifies network metrics 
          (aka <xref linkend="characteristic" />) useful to grid applications 
          and middleware, and develops standard mechanisms to describe and 
          publish these characteristics to the Grid.</para>
        </glossdef>
      </glossentry>     
    </glossdiv> 
    
    <glossdiv id="O">
      <title>O</title>    
    </glossdiv> 
    
    <glossdiv id="P">
      <title>P</title>       
      <glossentry id="ping"><glossterm>ping</glossterm>
        <glossdef>
          <para>
            Computer network tool used to test whether a particular host is 
            reachable across an IP network. It works by sending 
            <xref linkend="ICMP" /> "echo request" packets to the target 
            host and listening for <xref linkend="ICMP" /> "echo response" 
            replies. 
          </para>
        </glossdef>
      </glossentry>    
    </glossdiv>
    
    <glossdiv id="Q">
      <title>Q</title>    
    </glossdiv> 
    
    <glossdiv id="R">
      <title>R</title>  
    </glossdiv> 
    
    <glossdiv id="S">
      <title>S</title>          
    </glossdiv> 
    
    <glossdiv id="T">
      <title>T</title>     
    </glossdiv> 
    
    <glossdiv id="U">
      <title>U</title>   
    </glossdiv> 
    
    <glossdiv id="V">
      <title>V</title>    
    </glossdiv> 
    
    <glossdiv id="W">
      <title>W</title>    
    </glossdiv> 
    
    <glossdiv id="X">
      <title>X</title>  
    </glossdiv> 
    
    <glossdiv id="Y">
      <title>Y</title>    
    </glossdiv> 
    
    <glossdiv id="Z">
      <title>Z</title>    
    </glossdiv>
     
  </glossary>

  <bibliography id="bibliography">
    <title>References</title>

    <biblioentry xreflabel="Measurement Schema">
      <abbrev>Measurement Schema</abbrev>
      <title>
        <ulink url="https://forge.gridforum.org/sf/docman/do/downloadDocument/projects.nm-wg/docman.root.working_drafts/doc15119">Measurement Schema</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="NM-WG">
      <abbrev>NM-WG</abbrev>
      <title>
        <ulink url="http://nmwg.internet2.edu">Network Measurements Working Group</ulink>
      </title>
    </biblioentry>
    
    <biblioentry xreflabel="perfSONAR">
      <abbrev>perfSONAR</abbrev>
      <title>
        <ulink url="http://www.perfsonar.net">perfSONAR</ulink>
      </title>
    </biblioentry>  
    
    <biblioentry xreflabel="XML">
      <abbrev>XML</abbrev>
      <title>
        <ulink url="http://www.w3.org/XML">Extensible Markup Language (XML)</ulink>
      </title>
    </biblioentry>
    
    <biblioentry xreflabel="OGF">
      <abbrev>OGF</abbrev>
      <title>
        <ulink url="http://www.ogf.org/">(Global|Open) Grid Forum</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="RELAX-NG">
      <abbrev>RELAX-NG</abbrev>
      <title>
        <ulink url="http://relaxng.org/">RELAX-NG Schema Language</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="Trang">
      <abbrev>Trang</abbrev>
      <title>
        <ulink url="http://www.thaiopensource.com/relaxng/trang.html">Multi-format schema converter based on RELAX NG</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="Multi-Schema XML Validator">
      <abbrev>MSV</abbrev>
      <title>
        <ulink url="https://msv.dev.java.net/">Sun Multi-Schema XML Validator (MSV)</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="XSD">
      <abbrev>XSD</abbrev>
      <title>
        <ulink url="http://www.w3.org/XML/Schema">XML Schema</ulink>
      </title>
    </biblioentry> 

    <biblioentry xreflabel="SmokePing">
      <abbrev>SmokePing</abbrev>
      <title>
        <ulink url="http://oss.oetiker.ch/smokeping/">SmokePing latency measurement tool</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="Result Codes">
      <abbrev>Result Codes</abbrev>
      <title>
        <ulink url="http://wiki.perfsonar.net/jra1-wiki/index.php/Result_codes">Result Codes</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="A Scalable Framework for Representation and Exchange of Network Measurements">
      <abbrev>Zurawski06Scalable</abbrev>
      <title>A Scalable Framework for Representation and Exchange of Network Measurements</title>
      <authorgroup>
        <author><personname>
          <firstname>J.</firstname><surname>Zurawski</surname>
        </personname></author>
        <author><personname>
          <firstname>M.</firstname><surname>Swany</surname>
        </personname></author>
        <author><personname>
          <firstname>D.</firstname><surname>Gunter</surname>
        </personname></author>
      </authorgroup>
      <confgroup>
        <confdates>March, 2006</confdates>
        <conftitle>2nd International IEEE/Create-Net Conference on Testbeds and Research Infrastructures for the Development of Networks and Communities</conftitle>
        <address>Barcelona, Spain</address>
        <confsponsor>IEEE/Create-Net</confsponsor>
      </confgroup>
    </biblioentry>

  </bibliography>

</article>
