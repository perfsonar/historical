= Measurement Archive (MA) API ==

 * [APIMA#Introduction Introduction]
 * [APIMA#Availability Availability]
 * [APIMA#Functions Functions]
   * [APIMA#new new]
   * [APIMA#setInstance setInstance]
   * [APIMA#metadataKeyRequest metadataKeyRequest]
   * [APIMA#dataInfoRequest dataInfoRequest]
   * [APIMA#setupDataRequest setupDataRequest]
 * [APIMA#Example_Use Example Use]
 
== Introduction ==

The Measurement Archive (MA) API is designed to be _extremely_ generic: it does not offer sophisticated primitives for any one specific sort of measurement instead relying on raw XML to power the functions.  Over time we anticipate that this API will be depreciated as new APIs for specific services become available.  The following descriptions will be made as general as possible and will provide examples for different MA instances to remain relevant. 

== Availability ==

This API is available in perfSONAR-PS releases, and can be included as such:

{{{
use perfSONAR_PS::Client::MA;
}}}

== Functions ==

The following functions may be used from this library.  Please see the perldoc internal to the library for a complete listing of functionality.  Unlisted functions should be viewed as internal to the module.  

=== new ===

This function will invoke a new object.  It has only one optional parameter:

 * _*MA Instance*_ - URI of MA instance to interact with.  

The object itself is returned on exit.  Example of use:

{{{
my $ma = new perfSONAR_PS::Client::MA( { instance => "http://localhost:8080/perfSONAR_PS/services/snmpMA" } );
}}}

=== setInstance ===

Sets (or re-sets) the URI of an MA for an already created object.  This can be used instead of setting in [APIMA#new new].  One parameter is required:

 * _*MA Instance*_ - URI of MA instance to interact with. 

Example use:

{{{
my $ma = new perfSONAR_PS::Client::MA();
$ma->setInstance( { instance => "http://localhost:8080/perfSONAR_PS/services/snmpMA" } );
}}}

=== metadataKeyRequest ===

The _!MetadataKeyRequest_ is a message that is used to gauge the availability of specific information from a service, and also receive a _key_ that can be used to retrieve information repeatedly.  This API call has several potential useful input parameters:

 * _*subject*_ - This required element is raw xml that describes the subject _metadata_ you are looking for from a service.  Check individual service documentation for further examples.  Examples from the perfSONAR-BUOY service (BWCTL data):
   {{{
    my $subject = "<iperf:subject xmlns:iperf= \"http://ggf.org/ns/nmwg/tools/iperf/2.0/\" id=\"s-in-iperf-1\">\n";
    $subject .= "  <nmwgt:endPointPair xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $subject .= "    <nmwgt:src type=\"ipv4\" value=\"198.32.8.190\" />\n";
    $subject .= "    <nmwgt:dst type=\"ipv4\" value=\"198.32.8.174\" />\n";
    $subject .= "  </nmwgt:endPointPair>\n";
    $subject .= "</iperf:subject>\n";
   }}}
   
   An example from the perfSONAR-BUOY service (OWAMP data):
   
   {{{
    my $subject = "<owamp:subject xmlns:owamp=\"http://ggf.org/ns/nmwg/tools/owamp/2.0/\" id=\"subject-1\">\n";
    $subject .= "  <nmwgt:endPointPair xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $subject .= "    <nmwgt:src type=\"ipv4\" value=\"207.75.165.145\" />\n";
    $subject .= "    <nmwgt:dst type=\"ipv4\" value=\"207.75.165.145\" />\n";
    $subject .= "  </nmwgt:endPointPair>\n";
    $subject .= "</owamp:subject>\n";
   }}}

   An example from the SNMP MA service (Utilization data):

   {{{
    my $subject = "<netutil:subject xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\" id=\"s-in-netutil-1\">\n";
    $subject .= "  <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $subject .= "    <nmwgt:ifAddress type=\"ipv4\">127.0.0.1</nmwgt:ifAddress>\n";
    $subject .= "    <nmwgt:hostName>localhost</nmwgt:hostName>\n";
    $subject .= "    <nmwgt:direction>in</nmwgt:direction>\n";
    $subject .= "  </nmwgt:interface>\n";
    $subject .= "</netutil:subject>\n";
   }}}
   
 * _*eventTypes*_ - This is a required element, and should be supplied as an array reference of strings.  It is used to specify the _eventType_ that is paired with the previously described subject element; it may be any _eventType_ that is recognized by a specific service (check service documentation for availability).  Examples:
   * perfSONAR-BUOY (BWCTL data) - http://ggf.org/ns/nmwg/tools/iperf/2.0
   * perfSONAR-BUOY (OWAMP data) - http://ggf.org/ns/nmwg/tools/owamp/2.0
   * SNMP MA (Utilization data) - http://ggf.org/ns/nmwg/characteristic/utilization/2.0
   * SNMP MA (Errors data) - http://ggf.org/ns/nmwg/characteristic/errors/2.0
 
 * _*parameters*_ - This optional element is a hash reference consisting of name value pairs; they are paired with the required _subject_ and _eventType_ to form a complete metadata.  This can be used to specify additional details about a measurement, when available.  Example using perfSONAR-BUOY (BWCTL data):
   {{{
   my %parameters = (
       windowSize => "2m",
       protocol => "TCP"
   );
   }}}

 * _*start*_ - This optional parameter has a specific use: to describe the start time of a measurement request and build this directly into the returned key.  This may be supplied as a string, and in the time format the service is familiar with accepting (N.B. consult service documentation - epoch time is the most common use case).  

 * _*end*_ - This optional parameter has a specific use: to describe the end time of a measurement request and build this directly into the returned key.  This may be supplied as a string, and in the time format the service is familiar with accepting (N.B. consult service documentation - epoch time is the most common use case).  

 * _*resolution*_ - This optional parameter has a specific use: to describe the resolution of a measurement request and build this directly into the returned key.  This may be supplied as a string, and is only useful for services that use an RRD backend (e.g. the SNMP MA).    

 * _*consolidationFunction*_ - This optional parameter has a specific use: to describe the consolidationFunction of a measurement request and build this directly into the returned key.  This may be supplied as a string, and is only useful for services that use an RRD backend (e.g. the SNMP MA).    

The returned value from this function is a structured result that _*may*_ contain:

 * _*metadata*_ an array reference of metadata elements (in raw XML format) as returned by the service.
 * _*data*_ an array reference data elements (in raw XML format) as returned by the service.
 
As both returned values are XML, be prepared to parse these with [http://search.cpan.org/dist/XML-LibXML/ XML::LibXML] or a similar parsing library.  An example on how to call this function:

{{{
use XML::LibXML;
use perfSONAR_PS::Common qw( extract find );

my $ma = new perfSONAR_PS::Client::MA( { instance => "http://localhost:8080/perfSONAR_PS/services/snmpMA"} );

my $subject = "    <netutil:subject xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\" id=\"s-in-16\">\n";
$subject .= "      <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
$subject .= "        <nmwgt:hostName>nms-rexp.salt.net.internet2.edu</nmwgt:hostName>\n";
$subject .= "        <nmwgt:ifName>eth0</nmwgt:ifName>\n";
$subject .= "        <nmwgt:direction>in</nmwgt:direction>\n";
$subject .= "      </nmwgt:interface>\n";
$subject .= "    </netutil:subject>\n";

my @eventTypes = ("http://ggf.org/ns/nmwg/characteristic/utilization/2.0");

my %parameters = ();
$parameters{"supportedEventType"} = "http://ggf.org/ns/nmwg/characteristic/utilization/2.0";

my ( $sec, $frac ) = Time::HiRes::gettimeofday;

my $result = $ma->metadataKeyRequest( { 
    consolidationFunction => "AVERAGE", 
    resolution => 30,
    start => ($sec-300), 
    end => $sec, 
    subject => $subject, 
    eventTypes => \@eventTypes, 
    parameters => \%parameters } 
);

if ( exists $result->{"metadata"} and exists $result->{"data"} ) {
    my $parser = XML::LibXML->new();
    foreach my $m ( @ { $result->{"metadata"} } ) {
        my $metadata = $parser->parse_string( $m );
        print "metadata: " , $metadata->toString , "\n";
    }
    print "\n\n";
    foreach my $d ( @ { $result->{"data"} } ) {
        my $data = $parser->parse_string( $d );
        my $key = extract( find( $data->getDocumentElement, ".//nmwg:parameter[\@name=\"maKey\"]", 1 ), 0 );
        print "\tkey: " , $key , "\n" if $key;
    }
}
else {
    print "failure\n";
}
}}}

=== dataInfoRequest ===

This API call is similar to [APIMA#metadataKeyRequest metadataKeyRequest] in that it is possible gauge the availability of specific information from a service, and also receive a _key_ , but the returned key _cannot_ be used to retrieve data over time.  This returned key is in _native_ format meaning it has specifics about the nature of the stored data including:

 * storage information such as file location or database and table name
 * information regarding time and data range

N.B. that this call is not available in all services, check documentation for use.  This API call has several potential useful input parameters:

 * _*subject*_ - This required element is raw xml that describes the subject _metadata_ you are looking for from a service.  Check individual service documentation for further examples.  Examples from the perfSONAR-BUOY service (BWCTL data):
   {{{
    my $subject = "<iperf:subject xmlns:iperf= \"http://ggf.org/ns/nmwg/tools/iperf/2.0/\" id=\"s-in-iperf-1\">\n";
    $subject .= "  <nmwgt:endPointPair xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $subject .= "    <nmwgt:src type=\"ipv4\" value=\"198.32.8.190\" />\n";
    $subject .= "    <nmwgt:dst type=\"ipv4\" value=\"198.32.8.174\" />\n";
    $subject .= "  </nmwgt:endPointPair>\n";
    $subject .= "</iperf:subject>\n";
   }}}
   
   An example from the perfSONAR-BUOY service (OWAMP data):
   
   {{{
    my $subject = "<owamp:subject xmlns:owamp=\"http://ggf.org/ns/nmwg/tools/owamp/2.0/\" id=\"subject-1\">\n";
    $subject .= "  <nmwgt:endPointPair xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $subject .= "    <nmwgt:src type=\"ipv4\" value=\"207.75.165.145\" />\n";
    $subject .= "    <nmwgt:dst type=\"ipv4\" value=\"207.75.165.145\" />\n";
    $subject .= "  </nmwgt:endPointPair>\n";
    $subject .= "</owamp:subject>\n";
   }}}

   An example from the SNMP MA service (Utilization data):

   {{{
    my $subject = "<netutil:subject xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\" id=\"s-in-netutil-1\">\n";
    $subject .= "  <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $subject .= "    <nmwgt:ifAddress type=\"ipv4\">127.0.0.1</nmwgt:ifAddress>\n";
    $subject .= "    <nmwgt:hostName>localhost</nmwgt:hostName>\n";
    $subject .= "    <nmwgt:direction>in</nmwgt:direction>\n";
    $subject .= "  </nmwgt:interface>\n";
    $subject .= "</netutil:subject>\n";
   }}}
   
 * _*eventTypes*_ - This is a required element, and should be supplied as an array reference of strings.  It is used to specify the _eventType_ that is paired with the previously described subject element; it may be any _eventType_ that is recognized by a specific service (check service documentation for availability).  Examples:
   * perfSONAR-BUOY (BWCTL data) - http://ggf.org/ns/nmwg/tools/iperf/2.0
   * perfSONAR-BUOY (OWAMP data) - http://ggf.org/ns/nmwg/tools/owamp/2.0
   * SNMP MA (Utilization data) - http://ggf.org/ns/nmwg/characteristic/utilization/2.0
   * SNMP MA (Errors data) - http://ggf.org/ns/nmwg/characteristic/errors/2.0
   
 * _*parameters*_ - This optional element is a hash reference consisting of name value pairs; they are paired with the required _subject_ and _eventType_ to form a complete metadata.  This can be used to specify additional details about a measurement, when available.  Example using perfSONAR-BUOY (BWCTL data):
   {{{
   my %parameters = (
       windowSize => "2m",
       protocol => "TCP"
   );
   }}}

The returned value from this function is a structured result that _*may*_ contain:

 * _*metadata*_ an array reference of metadata elements (in raw XML format) as returned by the service.
 * _*data*_ an array reference data elements (in raw XML format) as returned by the service.
 
As both returned values are XML, be prepared to parse these with [http://search.cpan.org/dist/XML-LibXML/ XML::LibXML] or a similar parsing library.  An example on how to call this function:

{{{
use XML::LibXML;

my $ma = new perfSONAR_PS::Client::MA( { instance => "http://localhost:8080/perfSONAR_PS/services/snmpMA"} );

my $subject = "    <netutil:subject xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\" id=\"s-in-16\">\n";
$subject .= "      <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
$subject .= "        <nmwgt:hostName>nms-rexp.salt.net.internet2.edu</nmwgt:hostName>\n";
$subject .= "        <nmwgt:ifName>eth0</nmwgt:ifName>\n";
$subject .= "        <nmwgt:direction>in</nmwgt:direction>\n";
$subject .= "      </nmwgt:interface>\n";
$subject .= "    </netutil:subject>\n";

my @eventTypes = ("http://ggf.org/ns/nmwg/characteristic/utilization/2.0");

my %parameters = ();
$parameters{"supportedEventType"} = "http://ggf.org/ns/nmwg/characteristic/utilization/2.0";

my ( $sec, $frac ) = Time::HiRes::gettimeofday;

my $result = $ma->dataInfoRequest( { 
    subject => $subject, 
    eventTypes => \@eventTypes, 
    parameters => \%parameters } 
);

if ( exists $result->{"metadata"} and exists $result->{"data"} ) {
    my $parser = XML::LibXML->new();
    foreach my $m ( @ { $result->{"metadata"} } ) {
        my $metadata = $parser->parse_string( $m );
        print "metadata: " , $metadata->toString , "\n";
    }
    print "\n\n";
    foreach my $d ( @ { $result->{"data"} } ) {
        my $data = $parser->parse_string( $d );
        print "data: " , $data->toString , "\n";
    }
}
else {
    print "failure\n";
}
}}}

=== setupDataRequest ===

The _!SetupDataRequest_ is different from the [APIMA#metadataKeyRequest metadataKeyRequest] and [APIMA#dataInfoRequest dataInfoRequest] calls: it delivers measurement data from the service.  This service accepts the same arguments as [APIMA#metadataKeyRequest metadataKeyRequest], and allows _keys_ retrieved from this call to be used as subjects to this one.  This API has the following parameters:

 * _*subject*_ - This required element is raw xml that describes the subject _metadata_, or key, you are looking for from a service.  Check individual service documentation for further examples.  An Example of a plain key:  
   {{{
    my $subject = "<nmwg:key id=\"k-in-netutil-3\">\n";
    $subject .= "  <nmwg:parameters id=\"pk-in-netutil-3\">\n";
    $subject .= "    <nmwg:parameter name=\"maKey\">a63b47372a944d040d41d9fefdab7082</nmwg:parameter>\n";
    $subject .= "  </nmwg:parameters>\n";
    $subject .= "</nmwg:key>\n";
   }}}
 
   Examples from the perfSONAR-BUOY service (BWCTL data):

   {{{
    my $subject = "<iperf:subject xmlns:iperf= \"http://ggf.org/ns/nmwg/tools/iperf/2.0/\" id=\"s-in-iperf-1\">\n";
    $subject .= "  <nmwgt:endPointPair xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $subject .= "    <nmwgt:src type=\"ipv4\" value=\"198.32.8.190\" />\n";
    $subject .= "    <nmwgt:dst type=\"ipv4\" value=\"198.32.8.174\" />\n";
    $subject .= "  </nmwgt:endPointPair>\n";
    $subject .= "</iperf:subject>\n";
   }}}
   
   An example from the perfSONAR-BUOY service (OWAMP data):
   
   {{{
    my $subject = "<owamp:subject xmlns:owamp=\"http://ggf.org/ns/nmwg/tools/owamp/2.0/\" id=\"subject-1\">\n";
    $subject .= "  <nmwgt:endPointPair xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $subject .= "    <nmwgt:src type=\"ipv4\" value=\"207.75.165.145\" />\n";
    $subject .= "    <nmwgt:dst type=\"ipv4\" value=\"207.75.165.145\" />\n";
    $subject .= "  </nmwgt:endPointPair>\n";
    $subject .= "</owamp:subject>\n";
   }}}

   An example from the SNMP MA service (Utilization data):

   {{{
    my $subject = "<netutil:subject xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\" id=\"s-in-netutil-1\">\n";
    $subject .= "  <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
    $subject .= "    <nmwgt:ifAddress type=\"ipv4\">127.0.0.1</nmwgt:ifAddress>\n";
    $subject .= "    <nmwgt:hostName>localhost</nmwgt:hostName>\n";
    $subject .= "    <nmwgt:direction>in</nmwgt:direction>\n";
    $subject .= "  </nmwgt:interface>\n";
    $subject .= "</netutil:subject>\n";
   }}}
   
 * _*eventTypes*_ - This is a required element, and should be supplied as an array reference of strings.  It is used to specify the _eventType_ that is paired with the previously described subject element; it may be any _eventType_ that is recognized by a specific service (check service documentation for availability).  Examples:
   * perfSONAR-BUOY (BWCTL data) - http://ggf.org/ns/nmwg/tools/iperf/2.0
   * perfSONAR-BUOY (OWAMP data) - http://ggf.org/ns/nmwg/tools/owamp/2.0
   * SNMP MA (Utilization data) - http://ggf.org/ns/nmwg/characteristic/utilization/2.0
   * SNMP MA (Errors data) - http://ggf.org/ns/nmwg/characteristic/errors/2.0
 
 * _*parameters*_ - This optional element is a hash reference consisting of name value pairs; they are paired with the required _subject_ and _eventType_ to form a complete metadata.  This can be used to specify additional details about a measurement, when available.  Example using perfSONAR-BUOY (BWCTL data):
   {{{
   my %parameters = (
       windowSize => "2m",
       protocol => "TCP"
   );
   }}}

 * _*start*_ - This optional parameter has a specific use: to describe the start time of a measurement request and limit the returned data set.  This may be supplied as a string, and in the time format the service is familiar with accepting (N.B. consult service documentation - epoch time is the most common use case).  

 * _*end*_ - This optional parameter has a specific use: to describe the end time of a measurement request and limit the returned data set.  This may be supplied as a string, and in the time format the service is familiar with accepting (N.B. consult service documentation - epoch time is the most common use case).  

 * _*resolution*_ - This optional parameter has a specific use: to describe the resolution of a measurement request and limit the returned data set.  This may be supplied as a string, and is only useful for services that use an RRD backend (e.g. the SNMP MA).    

 * _*consolidationFunction*_ - This optional parameter has a specific use: to describe the consolidationFunction of a measurement request and limit the returned data set.  This may be supplied as a string, and is only useful for services that use an RRD backend (e.g. the SNMP MA).    

The returned value from this function is a structured result that _*may*_ contain:

 * _*metadata*_ an array reference of metadata elements (in raw XML format) as returned by the service.
 * _*data*_ an array reference data elements (in raw XML format) as returned by the service.
 
As both returned values are XML, be prepared to parse these with [http://search.cpan.org/dist/XML-LibXML/ XML::LibXML] or a similar parsing library.  An example on how to call this function:

{{{
use XML::LibXML;
use perfSONAR_PS::Common qw( extract find );

my $key = "some key";
my $ma = new perfSONAR_PS::Client::MA( { instance => "http://localhost:8080/perfSONAR_PS/services/snmpMA"} );

my $subject = "  <nmwg:key id=\"key-1\">\n";
$subject .= "    <nmwg:parameters id=\"parameters-key-1\">\n";
$subject .= "      <nmwg:parameter name=\"maKey\">" . $key . "</nmwg:parameter>\n";
$subject .= "    </nmwg:parameters>\n";
$subject .= "  </nmwg:key>  \n";

my @eventTypes = ("http://ggf.org/ns/nmwg/characteristic/utilization/2.0");

my ( $sec, $frac ) = Time::HiRes::gettimeofday;

my $result = $ma->setupDataRequest( { 
    consolidationFunction => "AVERAGE", 
    resolution => 30,
    start => ($sec-300), 
    end => $sec, 
    subject => $subject, 
    eventTypes => \@eventTypes } 
);

my $parser = XML::LibXML->new();
my $doc = $parser->parse_string( $result->{"data"}->[0] );
my $datum = find( $doc->getDocumentElement, "./*[local-name()='datum']", 0 );

foreach my $dt ( $datum1->get_nodelist ) {
    print $dt->getAttribute("timeValue") ,  " - " , eval( $dt->getAttribute("value") , "\n";
}
}}}

== Example Use ==

The following example shows how to retrieve SNMP utilization data from an SNMP MA for a given start time and resolution:

{{{
#!/usr/bin/perl

use CGI;
use CGI::Carp qw(fatalsToBrowser);
use XML::LibXML;

use lib "/home/jason/perfSONAR-PS/lib";

use perfSONAR_PS::Client::MA;
use perfSONAR_PS::Common qw( extract find );

my $cgi = CGI->new();
print $cgi->header();

my $service = "http://sc-monitor.internet2.edu:2008/perfSONAR_PS/services/snmpMA";

my $ma = new perfSONAR_PS::Client::MA( { instance => $service } );

my $subject = "<netutil:subject xmlns:netutil=\"http://ggf.org/ns/nmwg/characteristic/utilization/2.0/\" id=\"s-in-netutil-1\">\n";
$subject .= "  <nmwgt:interface xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
$subject .= "    <nmwgt:ifName>so-0/1/0.110</nmwgt:ifName>\n";
$subject .= "    <nmwgt:hostName>core-rtr-2.sc08.org</nmwgt:hostName>\n";
$subject .= "    <nmwgt:direction>in</nmwgt:direction>\n";
$subject .= "  </nmwgt:interface>\n";
$subject .= "</netutil:subject>\n";

my @eventTypes = ("http://ggf.org/ns/nmwg/characteristic/utilization/2.0");

my $end = "1227220000";
my $result = $ma->setupDataRequest( { 
    consolidationFunction => "AVERAGE", 
    resolution => 1800,
    start => ($end-18000), 
    end => $end, 
    subject => $subject, 
    eventTypes => \@eventTypes } 
);
print "<h2>service \"".$service."\"</h2><br>";
if ( exists $result->{"data"} ) {
    my $parser = XML::LibXML->new();
    my $doc = $parser->parse_string( $result->{"data"}->[0] );
    my $datum = find( $doc->getDocumentElement, "./*[local-name()='datum']", 0 );

    print "<table border=1>";
    print "<tr><th>time</th><th>value</th></tr>";
    foreach my $dt ( $datum->get_nodelist ) {
        print "<tr><td>" . $dt->getAttribute("timeValue") . "</td><td>" . eval( $dt->getAttribute("value") ) . "</td></tr>";
    }
    print "</table>";
}
else {
    die "fetch error\n";
}
}}}

Using the same basic template, we can achieve a similar result from a perfSONAR-BUOY service:

{{{
#!/usr/bin/perl

use CGI;
use CGI::Carp qw(fatalsToBrowser);
use XML::LibXML;

use lib "/home/jason/perfSONAR-PS/lib";

use perfSONAR_PS::Client::MA;
use perfSONAR_PS::Common qw( extract find );

my $cgi = CGI->new();
print $cgi->header();

my $service = "http://ps1.jp.apan.net:8085/perfSONAR_PS/services/perfSONARBUOY";

my $ma = new perfSONAR_PS::Client::MA( { instance => $service } );

my $subject = "<iperf:subject xmlns:iperf= \"http://ggf.org/ns/nmwg/tools/iperf/2.0/\" id=\"s-in-iperf-1\">\n";
$subject .= "  <nmwgt:endPointPair xmlns:nmwgt=\"http://ggf.org/ns/nmwg/topology/2.0/\">\n";
$subject .= "    <nmwgt:src type=\"ipv4\" value=\"203.181.248.70\" />\n";
$subject .= "    <nmwgt:dst type=\"ipv4\" value=\"203.181.249.197\" />\n";
$subject .= "  </nmwgt:endPointPair>\n";
$subject .= "</iperf:subject>\n";

my %parameters = (
    interval => 2,
    timeDuration => 60,
    windowSize => "15m"
);
   
my @eventTypes = ("http://ggf.org/ns/nmwg/tools/iperf/2.0");

my ( $sec, $frac ) = Time::HiRes::gettimeofday;

my $result = $ma->setupDataRequest( { 
    start => ($sec-86400), 
    end => $sec, 
    subject => $subject, 
    parameters => \%parameters,
    eventTypes => \@eventTypes } 
);

print "<h2>service \"".$service."\"</h2><br>";
if ( exists $result->{"data"} ) {
    my $parser = XML::LibXML->new();
    my $doc = $parser->parse_string( $result->{"data"}->[0] );
    my $datum = find( $doc->getDocumentElement, "./*[local-name()='datum']", 0 );

    print "<table border=1>";
    print "<tr><th>time</th><th>value</th><th>jitter</th></tr>";
    foreach my $dt ( $datum->get_nodelist ) {
        print "<tr><td>" . $dt->getAttribute("timeValue") . "</td><td>" . eval( $dt->getAttribute("throughput") ) . "</td><td>" . $dt->getAttribute("jitter") . "</td></tr>";
    }
    print "</table>";
}
else {
    die "fetch error\n";
}
}}}

== Last Updated ==

$Id$
