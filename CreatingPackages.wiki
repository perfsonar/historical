#summary Creating perfSONAR-PS Packages: A How-To for perfSONAR-PS Developers

<wiki:toc max_depth="6" />

== Introduction ==

This guide can be used to aid perfSONAR-PS developers in creating packages.  These packages can then be converted into other forms of automated packages (specifically RPMs). The move to the RPM based distribution system will allow easy building of Performance Node related packages (e.g. Live CD, Site Install) as well as serve as an easier distribution and installation mechanism. 

The packages provided will be self-contained. This means that the package live in their own directories, and do not install any files (except init scripts) into the _common_ linux directories (e.g. _*/usr/lib*_, _*/usr/bin*_).  Dynamically generated files, including logs and process information, will still exist within the filesystem.  This approach allows users to upgrade services independently without breaking the other services. 

== Instructions ==

Read each section first before proceeding.  These instructions are based on a skeleton package that can be used as the template to get the job started.  

=== Package Skeleton and Preliminaries === 

 # The perfSONAR-PS subversion contains a package _skeleton_ to help all developers get started.  It can be found in 
{{{
trunk/perfSONAR_PS-Skeleton
}}}
 # Using this as a starting point, rename _*perfSONAR_PS-Skeleton*_ to _*perfSONAR_PS-SERVICE_NAME*_ (e.g. _*perfSONAR_PS-LSRegistrationDaemon*_)
 # Edit the file named _*Makefile*_
   * Change references of _*skeleton*_ and _*Skeleton*_ as necessary
   * Ensure the rest of the file makes sense
 # The remaining contents of the skeleton are as follows:

|| *File/Directory Name* || *Purpose* ||
|| _MANIFEST_ || List of all files in this package ||
|| _Makefile_ || Build instructions used to create the tar.gz package. This tar.gz file will be distributed as the package tarball as well as used to build the RPM. ||
|| _bin/_ || Scripts and executable files - treat this much like _*/usr/local/bin*_ or similar on the final installed system ||
|| _doc/_ || Documentation related to the released package ||
|| _doc/Changes_ || Change log for the service; update this for each release ||
|| _doc/LICENSE_ || File containing license information ||
|| _doc/README_ || Installation instructions or other notes ||
|| _etc/_ || Configuration files, templates, or other non-executable additions to this package ||
|| _lib/_ || Library files (modules) ||
|| _perl-perfSONAR_PS-Skeleton.spec_ || Instructions for building the RPM ||
|| _scripts/_ || Normally used for _*init.d*_ scripts or other automated _helper_ aspects of the packaged service. ||

=== Choosing What to Include === 

 # The first step is to identify the *_service module_*, this is the primary _*pm*_ file that the daemon is aware of.  It should be placed in the _*lib*_ path.  
 # Add this file to the _*MANIFEST*_, be sure to include the entire path name.  
 # Generate the dependencies with:
{{{
perl trunk/package_dependencies.pl
}}}
   * This script will create symbolic links in the perfSONAR_PS, OWP and IEPM modules from the root lib directory of the repository and modify the _*MANIFEST*_ to include these files.
   * This script will also create a _*dependencies*_ file containing the other required perl modules (this will be used later)
     * *NOTE:* If a given module in the root lib is used solely by this package, consider moving it into directly to a service to avoid cluttering the common area.
 # There are basic directories included in the skeleton that can be used to organize package contents:
   * _bin_ - Place service executable files and scripts here.  Examples include the daemon, client applications, web content, etc.
   * _doc_ - Place any and all documentation here.  Man pages as well as installation instructions are candidates. 
   * _etc_ - Anything that is not executable, but still necessary for service for service functionality.  Candidates include configuration files or templates.  
   * _lib_ - Library information; these are identified in the previous step for the service but additional libs may be added
   * _scripts_ - Helper scripts for service operation, init.d scripts or other tools useful for service installation and operation should go here.
 # After placing (or linking) content into these directories be sure to update the *_MANIFEST_* file to include all necessary packaged files.  RPM packaging may fail if the scripts are not identified here.
 # Check to be sure all files in the _*MANIFEST*_ and *_dependencies_* are valid.  Add anything that may be missing.

=== Choosing File Paths ===

The file paths in _*all*_ files need to be the standard perfSONAR-PS paths listed below, or if this is a special case, whatever the decided upon paths are.

  * _Package Locations:_ All packages should be installed in _*/opt/perfsonar_ps/SERVICE_NAME*_. The service name should be in all lower-case.
  * _Log File Locations:_ All log files should be in _*/var/log/perfsonar/SERVICE_NAME*_. The service name should be the same as above.
  * _Data File Locations:_ All data files should be in _*/var/lib/perfsonar/SERVICE_NAME*_. The service name should be the same as above.

=== Finalizing the Package === 

 # Run the following to ensure that the _*MANIFEST*_ is correct:
{{{
perl trunk/package_findunpackaged.pl
}}}

== RPM Packages ==

=== Constructing the RPM ===

 # Change the name of the _*.spec*_ file to mimic the name of the directory.  
 # Edit the _*.spec*_ file:
   * Add the contents of the _*dependencies*_ file.  When done remove this file and ensure that it is not in the _*MANIFEST*_
   * Change all references to _*skeleton*_ and _*Skeleton*_
   * Change references to _*init*_ scripts where approrpriate
   * Verify that _*install_base*_ is valid for the target systems
   * Add any additional instructions or documentation to this file:
     * Versions
     * Authors
     * Special scripts or instructions regarding system use (usernames, groups)

=== Spec Tricks ===

The spec file has several behaviours that annoying at a minimum.  Here are some things to note as you develop the spec file:

 * If the specfile complains that you have not handled certain files in the package (e.g. if you package the actual specfile or the dependencies) you may still allow the rpm to build correctly using this directive:
{{{
%define _unpackaged_files_terminate_build      0
}}}
 * There are dynamic tricks to locate the perl version - these fail depending on your build and target system.  It is safer to use a simple require:
{{{
#Requires:       perl(:MODULE_COMPAT_%(eval "`%{__perl} -V:version`"; echo $version))
Requires:       perl
}}}
 * XML::LibXML is old on RHEL and CentOS systems.  We have a custom built version, and the spec file should ensure that only _new_ libs are used.  Also note that 1.6 is not the same as 1.60:
{{{
Requires:		perl(XML::LibXML) >= 1.60
}}}
 * Run _*chkconfig*_ for services in the _post_ section:
{{{
%post

# ... other stuff ...

/sbin/chkconfig --add XXX
}}}
 * Be sure to uninstall the _*chkconfig*_ items when needed:
{{{
%preun
if [ $1 -eq 0 ]; then
    /sbin/chkconfig --del XXX
    /sbin/service XXX stop
fi
}}}
 * To disable RPM checking for dependencies (e.g. searching all perl and lib files for _*use*_ statements, etc.) use the following line.  Do note that you should check (and double check) that everything required is manually specified:
{{{
Autoreq: 0 
}}}

=== Building ===

 # To build RPMs start with a Redhat based system (e.g. Fedora, CentOS, RHEL, White Box, Scientific)
 # Install the following packages:
    * build-essential - Contains tools like make and compilers
    * rpmbuild - a package that contains the RPM build tools
 # In your home directory create a directory _*rpmbuild*_, your RPM activities will take place here.  
 # In your home directory create a file _*.rpmmacros*_, it should contain:
{{{
%_topdir   /YOUR/HOME/DIR/rpmbuild
%_tmppath  /YOUR/HOME/DIR/rpmbuild/tmp
user: perfSONAR-PS
email: i2-perfsonar@internet2.edu
%_signature    gpg
%_gpg_name perfSONAR-PS
}}}
 # Acquire the perfSONAR-PS singing keys (ask a member of the release team for these)
   * Import the key _*gpg --import KEYNAME*_
 # From inside your package, run _*make dist*_ 
 # The result of the previous step should be a _*tar.gz*_ package.  Copy this to _*/YOUR/HOME/rpmbuild/SOURCES*_
 # Run _*rpmbuild -ba --sign PACKAGENAME.spec*_ from this same directory.
   * Watch for any build errors and correct as needed.
 # The finished RPM will be placed in:
   * _*/YOUR/HOME/rpmbuild/RPMS*_
   * _*/YOUR/HOME/rpmbuild/SRPMS*_

=== Testing ===

Depending on which system used to build and test the RPM package, testing it on other flavors is a good idea.  For example, a Fedora 10 system may contain different paths and libraries than a CentOS 5 system. The package produced should work on any Linux system. If the constructed package does not appear to work on all flavors, note these in the release documentation.  If one or more external packages are required on a certain flavor, either provide those packages needed or make a note where the end user can get that package.

== Tarball Packages ==

To allow distribution of these services as tarballs, you should include scripts to do everything that the RPM does (creating paths, adding users, creating databases, etc). Your documentation should then tell users to run these script when they do a tarball install. 

=== Install Dependencies ===

This method will vary depending on the machine on which the tool is installed, and what dependencies need to be installed. It can be used to:

 * Download, compile, and install rrdtool
 * Use freebsd ports to install tools
 * Use CPAN to install dependencies
 * Other use cases

The following simple example just installs the dependencies from CPAN. It could probably be smarter and check the error codes from CPAN, and exit on error.  This script is *_scripts/install_dependencies.sh_* from the *_perfSONAR_PS-LookupService_* package.

{{{
#!/bin/bash

MAKEROOT=""
if [[ $EUID -ne 0 ]];
    MAKEROOT="sudo "
fi

for i in `cat ../dependencies`
do
    $MAKEROOT cpan $i
done
}}}

=== Preparing The User Environment ===

This step prepares the environment for the package. This include making sure that the correct users are added, that the paths exist and that the files are owned by the appropriate files. Aspects of preparation may be highly dependent on which OS the script is being run on, so an eye should be placed toward cross-platform compatibility.

The following example is from the Topology Service. The script would likely only work on Linux machines so that needs to be fixed. This script is *_scripts/prepare_environment.sh_* in the *_perfSONAR_PS-TopologyService_* package.

{{{
#!/bin/bash

MAKEROOT=""
if [[ $EUID -ne 0 ]]; then
    MAKEROOT="sudo "
fi

$MAKEROOT /usr/sbin/groupadd perfsonar 2> /dev/null || :
$MAKEROOT /usr/sbin/useradd -g perfsonar -s /sbin/nologin -c "perfSONAR User" -d /tmp perfsonar 2> /dev/null || :

$MAKEROOT mkdir -p /var/log/perfsonar
$MAKEROOT chown perfsonar:perfsonar /var/log/perfsonar

$MAKEROOT mkdir -p /var/lib/perfsonar/topology_service
if [ ! -f /var/lib/perfsonar/topology_service/DB_CONFIG ]; then
    $MAKEROOT `dirname $0`/../scripts/psCreateTopologyDB --directory /var/lib/perfsonar/topology_service
fi
$MAKEROOT chown -R perfsonar:perfsonar /var/lib/perfsonar

$MAKEROOT mkdir -p /var/lib/perfsonar/topology_service
$MAKEROOT chown perfsonar:perfsonar /var/lib/perfsonar/topology_service
}}}

=== Building The Tarball ===

Add the script(s) constructed above to the MANIFEST. Running *_make dist_* will then build the appropriate package.

=== Testing ===

Since this is the fallback option, you should make sure that the *_prepare environment_* and *_install dependencies_* scripts run on as many types of hosts as possible. If possible, detecting known good systems and warning users who run it on other systems would be good.

The systems tested on should be noted in the documentation where you tell users to run the scripts. The documentation should inform them exactly what is happening as well, or inform them which files they can read if they'd like to try the steps manually.

It would be good to include a list of steps that would need to be taken to allow them to run the service from wherever they untarred it.

== CPANSPEC Packages ==

[http://cpanspec.sourceforge.net/ Cpanspec] is a tool that reads the contents of CPAN packages and generates an RPM spec file.  This file is then used with the source to create an RPM for distribution.

=== Use ===

The tool may be used as such:

 # Download the CPAN package, I will use Net-IPTrie for this example:
{{{
wget -c http://search.cpan.org/CPAN/authors/id/C/CV/CVICENTE/Net-IPTrie-v0.4.tar.gz
}}}
 # Run cpanspec on the package:
{{{ 
cpanspec --packager="Jason Zurawski" --old Net-IPTrie-v0.4.tar.gz
}}}
 # Copy the package to the RPM build environment
{{{
cp Net-IPTrie-v0.4.tar.gz ~/rpmbuild/SOURCES/
}}}
 # Build the RPM:
{{{
rpmbuild -ba --sign perl-Net-IPTrie.spec
}}}
 # If succesfull, copy the resulting Spec File into svn and commit:
{{{
cp perl-Net-IPTrie.spec branches/RELEASE-_3.1/Shared/spec
svn add perl-Net-IPTrie.spec
svn commit
}}}
 # 

=== Spec Format ===

The automatically generated spec file makes some interesting decissions, here are some notes on customizations that may make things easier:

 * Add this:
{{{
Requires:       perl
}}}
 * Delete the _*BuildRequires*_ lines, these are not necessary but are helpful if you are going for absolute compatibility.  
 * Alter the Build/Install Path.  There are several reasons for this, namely to ensure that the installed modules end up in the perl @INC by default.  If left to the auto selection, the result will be deep in the _*vendor*_ area, and may get glossed over on some machines due to versions.
   * Set the build string (Module::Build) to:
{{{
%{__perl} Build.PL install_base=/usr
}}} 
   * Set the build string (Make::Maker) to:
{{{
%{__perl} Makefile.PL INSTALL_BASE=/usr
}}}
   * Change the install path (after _*%files*_, _*%defattr*_, and _*%doc*_):
{{{
%files
%defattr(-,root,root,-)
%doc README
/usr/*
}}} 

== FAQ ==

None Currently.

== Last Updated ==

$Id$
