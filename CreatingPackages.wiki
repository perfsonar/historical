= Creating perfSONAR-PS Packages: A How-To for perfSONAR-PS Developers  =

 # [CreatingPackages#Introduction Introduction]
 # [CreatingPackages#Instructions Instructions]
   # [CreatingPackages#Package_Skeleton_and_Preliminaries Package Skeleton and Preliminaries]
   # [CreatingPackages#Choosing_What_to_Include Choosing What to Include]
   # [CreatingPackages#Choosing_File_Paths Choosing File Paths]
   # [CreatingPackages#Finalizing_the_Package Finalizing the Package]
   # [CreatingPackages#Constructing_the_RPM Constructing the RPM]
   # [CreatingPackages#Building Building]
   # [CreatingPackages#Testing Testing]
 # [CreatingPackages#FAQ FAQ]

== Introduction ==

This guide can be used to aid perfSONAR-PS developers in creating packages.  These packages can then be converted into other forms of automated packages (specifically RPMs). The move to the RPM based distribution system will allow easy building of Performance Node related packages (e.g. Live CD, Site Install) as well as serve as an easier distribution and installation mechanism. 

The packages provided will be self-contained. This means that the package live in their own directories, and do not install any files (except init scripts) into the _common_ linux directories (e.g. _*/usr/lib*_, _*/usr/bin*_).  Dynamically generated files, including logs and process information, will still exist within the filesystem.  This approach allows users to upgrade services independently without breaking the other services. 

== Instructions ==

Read each section first before proceeding.  These instructions are based on a skeleton package that can be used as the template to get the job started.  

=== Package Skeleton and Preliminaries === 

 # The perfSONAR-PS subversion contains a package _skeleton_ to help all developers get started.  It can be found in _*trunk/modules/perfSONAR_PS-Skeleton/*_
 # Using this as a starting point, rename _perfSONAR_PS-Skeleton_ to _perfSONAR_PS-SERVICE_NAME_ (e.g. _*perfSONAR_PS-LSRegistrationDaemon*_)
 # Edit the file named _*Makefile*_
   * Change references of _*skeleton*_ and _*Skeleton*_ as necessary
   * Ensure the rest of the file makes sense
 # The remaining contents of the skeleton are as follows:

|| *File/Directory Name* || *Purpose* ||
|| _MANIFEST_ || List of all files in this package ||
|| _Makefile_ || Build instructions used to create the tar.gz package. This tar.gz file will be distributed as the package tarball as well as used to build the RPM. ||
|| _bin/_ || Scripts and executable files - treat this much like _*/usr/local/bin*_ or similar on the final installed system ||
|| _doc/_ || Documentation related to the released package ||
|| _doc/Changes_ || Change log for the service; update this for each release ||
|| _doc/LICENSE_ || File containing license information ||
|| _doc/README_ || Installation instructions or other notes ||
|| _etc/_ || Configuration files, templates, or other non-executable additions to this package ||
|| _lib/_ || Library files (modules) ||
|| _perl-perfSONAR_PS-Skeleton.spec_ || Instructions for building the RPM ||
|| _scripts/_ || Normally used for _*init.d*_ scripts or other automated _helper_ aspects of the packaged service. ||

=== Choosing What to Include === 

 # The first step is to identify the *_service module_*, this is the primary _*pm*_ file that the daemon is aware of.  It should be placed in the _*lib*_ path.  
 # Add this file to the _*MANIFEST*_, be sure to include the entire path name.  
 # Generate the dependencies with _*perl trunk/modules/package_dependencies.pl*_
   * This script will create symbolic links in the perfSONAR_PS, OWP and IEPM modules from the root lib directory of the repository and modify the _*MANIFEST*_ to include these files.
   * This script will also create a _*dependencies*_ file containing the other required perl modules (this will be used later)
   * *NOTE:* If a given module in the root lib is used solely by this package, consider moving it into directly to a service to avoid cluttering the common area.
 # There are basic directories included in the skeleton that can be used to organize package contents:
   * _bin_ - Place service executable files and scripts here.  Examples include the daemon, client applications, web content, etc.
   * _doc_ - Place any and all documentation here.  Man pages as well as installation instructions are candidates. 
   * _etc_ - Anything that is not executable, but still necessary for service for service functionality.  Candidates include configuration files or templates.  
   * _lib_ - Library information; these are identified in the previous step for the service but additional libs may be added
   * _scripts_ - Helper scripts for service operation, init.d scripts or other tools useful for service installation and operation should go here.
 # After placing (or linking) content into these directories be sure to update the *_MANIFEST_* file to include all necessary packaged files.  RPM packaging may fail if the scripts are not identified here.
 # Check to be sure all files in the _*MANIFEST*_ and *_dependencies_* are valid.  Add anything that may be missing.

=== Choosing File Paths ===

The file paths in _*all*_ files need to be the standard perfSONAR-PS ones listed below, or if this is a special case, whatever the decided upon paths are.

  * _Package Locations:_ All packages should be installed in _*/opt/perfsonar_ps/SERVICE_NAME*_. The service name should be in all lower-case.
  * _Log File Locations:_ All log files should be in _*/var/log/perfsonar/SERVICE_NAME*_. The service name should be the same as above.
  * _Data File Locations:_ All data files should be in _*/var/lib/perfsonar/SERVICE_NAME*_. The service name should be the same as above.

=== Finalizing the Package === 

 # Run _*perl trunk/modules/package_findunpackaged.pl*_ to ensure that the _*MANIFEST*_ is correct

=== Constructing the RPM ===

 # Change the name of the _*.spec*_ file to mimic the name of the directory.  
 # Edit the _*.spec*_ file:
   * Add the contents of the _*dependencies*_ file.  When done remove this file and ensure that it is not in the _*MANIFEST*_
   * Change all references to _*skeleton*_ and _*Skeleton*_
   * Change references to _*init*_ scripts where approrpriate
   * Verify that _*install_base*_ is valid for the target systems
   * Add any additional instructions or documentation to this file:
     * Versions
     * Authors
     * Special scripts or instructions regarding system use (usernames, groups)

=== Building === 

 # To build RPMs start with a Redhat based system (e.g. Fedora, CentOS, RHEL, White Box, Scientific)
 # Install the following packages:
    * build-essential - Contains tools like make and compilers
    * rpmbuild - a package that contains the RPM build tools
 # In your home directory create a directory _*rpmbuild*_, your RPM activities will take place here.  
 # In your home directory create a file _*.rpmmacros*_, it should contain:
   {{{
    %_topdir   /YOUR/HOME/DIR/rpmbuild
    %_tmppath  /YOUR/HOME/DIR/rpmbuild/tmp
    user: perfSONAR-PS
    email: i2-perfsonar@internet2.edu
    %_signature    gpg
    %_gpg_name perfSONAR-PS
}}}
 # Acquire the perfSONAR-PS singing keys (ask a member of the release team for these)
   * Import the key _*gpg --import KEYNAME*_
 # From inside your package, run _*make dist*_ 
 # The result of the previous step should be a _*tar.gz*_ package.  Copy this to _*/YOUR/HOME/rpmbuild/SOURCES*_
 # Run _*rpmbuild -ba --sign PACKAGENAME.spec*_ from this same directory.
   * Watch for any build errors and correct as needed.
 # The finished RPM will be placed in:
   * _*/YOUR/HOME/rpmbuild/RPMS*_
   * _*/YOUR/HOME/rpmbuild/SRPMS*_
    
=== Testing ===

Depending on which system used to build and test the RPM package, testing it on other flavors is a good idea.  For example, a Fedora 10 system contains many different paths and libraries than a CentOS 5 system. The package produced should work on any Linux system. If the constructed package does not appear to work on all flavors, note these in the release documentation.  If one or more external packages are required on a certain flavor, either provide those packages needed or make a note where the end user can get that package.

== FAQ ==

None Currently.

== Last Updated ==

$Id$