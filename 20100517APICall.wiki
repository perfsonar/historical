#summary 5/17/2010 API Conference Call

= May 17th 2010 API Conference Call 5:00 p.m. EDT/2:00 p.m. PDT =

<wiki:toc max_depth="6" />

== Attendees ==

 * Attending:
   * Maxim
   * Andy
   * Jason
   * Aaron
   * Ezra
   * Martin
   * Dan
   * Jeff
   * Marcos
   * Kavitha

== Agenda ==

 # Introductions and reason for interest
 # Discussion of desired scope and result of effort
 # Discussion of near-term roadmap
 # Volunteers for material for the next telecon

=== Background Info ===

 * [http://psps.perfsonar.net/client-doc.html Some existing documentation for writing clients with the current PERL code]
 * Dan G.'s related project, _globus.org_: [http://globus.org/service/ sales pitch] and [https://docs.google.com/Doc?docid=0ATOd-XAIhc_vZGd0bjdzM3dfMTFneDk5bWJjcQ&hl=en more details].
 
== Minutes ==
 
 # Introductions and reason for interest
   * Dan starts us off, wants to know why people are here.  He is involved with the CEDPS project (see http://www.cedps.net/).  Specifically the monitoring - wants to pS but discovered there is not an easy way to get information.  Can go the long way, wants to see an API.  
   * Ezra doesn't want to deal with the low level knowledge since not always using perl (e.g. using Java, etc.).  Wants access to the information without having to know about structure of XML, etc. 
   * Maxim is doing ecenter.  Talks about PingER APIs and how the current APIs are just crude wrappers around XML generation (used in CGIs etc)
   * Andy wants to continue the work talked about at JTs to implement APIs for client/application developers
   * Aaron works more on the server side of things.  We always talk about wanting to provide the information, just not how it will be used or how to use it.  
   * Marcos wants to make it easier on the end user.  
 # Discussion of desired scope and result of effort
   * Dan gets into the scope.  Wants to avoid touching the protocol and service aspects for the API if we can.  
   * Maxim mentions REST and the work he has done ([http://xenmon.fnal.gov:10010/ecenter/service]).  Dan doesn't want to exclude things like REST, but is more interested in capturing things like the _basic workflow_ of a client, to see what they are doing now and try to tailor the API to the needs.  Need to worry about things like how the IS fits in (answer questions automatically).  
   * Aaron goes into how we have approached this before, e.g. High Level = _I want to know information x_, Lower Levels = simple questions that can proceed in a series of atomic steps.  Dan states we should narrow our work to that top level, and if we have ideas on how to solve that now.  
   * Jeff sees a goal of making it easier for people to program clients.  E.g. our first goal should be establishing a minimal set of instructions based on the questions that are going to be asked.      
   * Dan muses on the axis of questions that can be asked:
     * _Get Throughput Data_ or _Get Latency Data_
     * What do we get back (in terms of a return value).  
     * How are time ranges handled
     * Does this function cover multiple points?
     * Do we care about tools or just characteristics?
   * Jeff and Jason explain how the mapping of characteristics and tools work
     * Services encode their metadata with different eventTypes to describe the underlying data.  For example bwctl running an iperf test:
       * http://ggf.org/ns/nmwg/tools/iperf/2.0
       * http://ggf.org/ns/nmwg/characteristics/bandwidth/achievable/2.0
     * Information registered to the LS.  
     * Users would be able to search on either, and the data is found
     * Dan: what happens if they don't do this, is it _invalid_?.  JZ: No, just won't find it.  We don't mandate what people should/should not encode data.  JB: there are also a small number of services now so its not a big problem.  Can also have a companion API for the LS - force you to register data in several ways.    
     * Dan: Question on how we know things are equal.  JZ: can use the LS to find things that are stored together.  Also have the long standing idea of some sort of central registry.  
   * Dan: Based on the above, the API needs to make it easier - the API should maintain a mapping for the eventTypes to something simple like _getThroughput_
     * Start of an argument about the value of characteristics vs tools
       * Dan sees value in only exposing things that we know will be easy to use and be used.  Doesn't want to give people lots of half measures that we dont feel we can support, because they will use them
       * Dan thinks _getThroughput_ or _getLatency_ is the way to go - concise description of what you are going to get
       * Jason doesn't agree - just as valuable to want to use _getIperf_ in a situation like that.  Also doesn't want to see _getThroughput_ and would rather see _getCharacteristic(throughput_ to make it general. 
       * Some confusion on what is being asked - Jeff thinks that since all eventTypes are URIs, we should be able to just plug in what we want, e.g. doesn't want to see _getThroughput_
     * Start of an argument about the value of _getThroughput_ vs _getCharacteristic(throughput)_
       * Trade-offs:
         * API space
         * explicit use
         * Readability
         * Usability
         * Functionality
       * Dan also doesn't want to see people entering URIs into a function - could use enumerated types to make it easier.  Still run into problems (e.g. available vs achievable bandwidth)
   * Dan comes back to the Information Services steps.  Should this be explicit/implicit when using them?  Aaron claims clients may not care where the data comes from, just want to see it. Could argue there are times when it matters (data provenance).  
   * Jason explains how the gLS Discovery API works, and how it may be used currently.  
   * Dan states that simplicity from the client would be not needing extra LS steps - do it automatically.  No one disagrees.  
 # Discussion of near-term roadmap
   * Use Cases
   * V1 of the Proposed API
 # Volunteers for material for the next telecon
   * API
     * Dan
     * Aaron
     * Andy
     * Martin
   * Use Cases
     * Everyone else
   
=== Actions ===

 * _*ACTION*_: V1 Of the API
 * _*ACTION*_: Use Cases

== Where ==

 * Dial-in numbers:
   * +1-734-615-7474 (Please use if you do not pay for Long Distance)
   * +1-866-411-0013 (toll free US/Canada Only)
 * Access code:	0125784