== Architecture ==

There are 5 key components involved in circuit monitoring. A description of the circuit that clients can use to figure out what to query for. Topology lookup infrastructure to allow clients to lookup the circuit description. There is an agent, either programmatic or human, that, using knowledge about the domain's monitoring infrastructure, produces a description of their domain's segment of the circuit that clients can use to monitor the circuits. There is the monitoring infrastructure that measures the circuit statistics, via active or passive measurements. The lookup service infrastructure ties all these moving pieces together, allowing users to lookup these decentralized bits of information to construct the status of their circuits.

The full infrastructure working together would work like the following:

[http://packrat.internet2.edu/~aaron/circuit_monitoring_architecture.png]

  # The IDC tells the Notification Broker about a new circuit it allocated
  # The Notification Broker alerts an agent who is listening for circuit requests
  # The agent connects to one or more performance collectors and tells them which elements to start monitoring
  # The performance collectors start collecting status and performance data from the routers/switches, and storing them into a measurement archive
  # The measurement archive registers that it has data about the circuit with the Lookup Service
  # The agent registers a description of the domain's circuit segment with a Topology Service
  # The Topology Service registers that it has the description of the circuit segment
  # The client takes a circuit segment identifier and asks the Lookup Service which Topology Service has it
  # The client then retrieves the circuit segment descriptor from the Topology Service
  # The client then asks the Lookup Service which Measurement Archives have data on each element in the circuit segment
  # The client then contacts each MA asking for data about the elements it knows about
  # The client displays the results to the end user.

=== Circuit Description ===

The circuit description consists of a descriptor of the end-to-end circuit itself. This includes things like the circuit name, which can be anything, bandwidth, source, destination, and any other information specific to the end-to-end circuit. The circuit description also includes the path traversed by the end-to-end circuit. This path, however, is a high-level path containing pointers to the per-domain descriptions of their segment of the circuits. 

Each domain publishes a segment description that provides as much information about the circuit as the network would like to provide. This information can be used by clients to lookup measurements related to the circuit.

=== The Circuit Description Agent ===

Each domain needs to construct their segment description, and one domain needs to construct the circuit description. For this task, there's a "circuit description" agent defined in the architecture. This agent's purpose is to create the segment description, and, for the 'source' domain, the circuit description.

Since each domain is creating their own segment description in parallel, and the circuit description needs to know how to refer to the segment descriptions, there are rules for creating the identifier for the circuit description. The identifier for each segment is "urn:ogf:network:[domain name]:[circuit name]". 

The actual contents of the circuit description are up to the domain. They can include an in depth description of all the network elements that the circuit traverses, or a high-level view of just the circuit itself. The only requirement is that the elements in the description be usable by clients to query for the circuit statistics.

The agent is then responsible for registering the segment and circuit descriptions into the topology lookup infrastructure.

The description may be programmatically generated by the agent, or could be done manually by a person.

A proposed information model is available [CircuitMonitoring here].

=== Monitoring Infrastructure ===

The monitoring infrastructure needs to be able to measure the statistics of the circuit. This can be accomplished through via constant collection, on-demand collection or some combination. 

It may be reasonable to monitor certain network elements whether circuits are enabled or not. For example, the Ciena CoreDirector will only have certain elements configured when a circuit is enabled. If monitoring is constantly looking for these elements, and measuring them when available, the collector can run constantly without negatively impacts. A downside to this approach is that the monitoring may not be specific to a given circuit, necessitating that the Circuit Description Agent know the metadata associated with this collection.

Some administrators may not wish to have a collector constantly polling all elements of a given type from their hosts. In these cases, an agent will need to be constructed that enables monitoring when a circuit is brought up, and disables that monitoring when the circuit is brought down. In this case, the domain will need to have an agent, possibly human, that can enable monitoring of the appropriate network elements when a circuit is brought up. If this agent is programmatic, it will likely need the ability to convert the IDC's topological information about the circuit into the appropriate network elements to monitor. 

Constant monitoring and on-demand monitoring could be combined to allow certain elements to be monitored constantly, while others are only measured on-demand. As long as the agent that enables monitoring knows which network elements to instantiate monitoring on, and the segment description agents knows how to construct the description such that it combines the static and dynamic aspects, this hybrid monitoring is feasible.

The monitoring infrastructure needs to support registering this information in the Lookup Service infrastructure so that clients can discover it.

=== Topology Lookup Infrastructure ===

The circuit description and segment descriptions all need to be loaded into an infrastructure that allows clients to find them. The topology lookup infrastructure needs to work with the Lookup Service infrastructure to allow clients to discover where they can query for the circuit or segment descriptions. By working with the Lookup Service infrastructure, this topology lookup infrastructure can be centralized, decentralized or a hybrid.

The topology service infrastructure allows clients to lookup the circuit and segment descriptions, and, if allowed by the domains, each domain's topology as well.

A centralized approach to topology infrastructure would have a single topology service that all participating domains register their segment descriptions, circuit descriptions and network topologies with. This would provide a single point of failure for the participating domains, but would ease administrative burden.

A completely decentralized approach would have each domain provide their own instance of a topology service. They would register their segment and circuit descriptions as well as their topologies with their domain's topology service instance. Clients would query the lookup service to discover each domain's topology service. This increases the administrative overhead, but increases the scalability of the overall system while removing any single point of failure.

There are numerous gradiations between the completely centralized approach, and the completely decentralized. For example, only certain domains could deploy topology service infrastructure, and the other domains could simply piggy-back off either a centralized topology service, or another domain's topology service. 

=== Lookup Service Infrastructure ===

The lookup service infrastructure ties this system together. This infrastructure allows clients to discover the services providing all the various bits of information, without requiring them to maintain a static list of services. Similar to the Topology Lookup Infrastructure, the Lookup Service Infrastructure can be both centralized or decentralized, with a similar of upsides and downsides for each.

== Implemented So Far ==

We've implemented the Lookup Service Infrastructure, and the Topology Service Infrastructure, and they are being used in a production setting for the dynamic circuit network as well as perfSONAR.

There are rudimentary pieces completed for the monitoring infrastructure. There's a TL1 Collector that is being used by Internet2 to constantly poll the Ciena network, and grab the statistics for all circuits. ESnet is using an SNMP poller written by Jon Dugan to poll all the circuit statistics for their domain. There are other, more static, SNMP pollers like MRTG and Cacti which could be used by networks to provide more coarse-grained views of their circuit segments' statistics.

For the circuit/segment description agent, Internet2 has some code that can produce a description of their segment of the circuits. It would be easy to modify this code to have it register this information in the Topology Service.
