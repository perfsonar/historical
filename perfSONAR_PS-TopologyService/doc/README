Topoloy Service Daemon README File
==================================

Description
-----------

The Topology Service allows clients to store and query for topological data.
A summary of this data can be registered with a Lookup Service, allowing
interested parties to locate the topology.

Installation
------------

    1. Become root.
    2. Run "scripts/install_dependencies.sh"
    3. Run "make install"
    4. Run "scripts/prepare_environment.sh"

Configuration
-------------

    1. Edit "/opt/perfsonar_ps/topology_service/etc/daemon.conf"
    2. Change the "external_address" variable to the IP or hostname that
       can be used to get to the machine.
    3. Change the "site_name" variable to your organization's name
    4. Change the "site_location" variable to the city/state/country of the server
    5. Set the "ls_instance" variable if you'd like to register with a specific Lookup Service

Starting The Daemon
-------------------
  Installation from RPM:

    1. Start the daemon with "/etc/init.d/topology_service start"

  Installation from Tarball:

    1. Start the daemon with "/opt/perfsonar_ps/topology_service/scripts/topology_service start"

Example Requests
----------------
  The "doc/requests" directory has some sample requests for adding, updating
  and querying topologies. You can test them against your local service by
  running:

  bin/client.pl http://localhost:8012/perfSONAR_PS/services/topology /path/to/request.xml. 

Topology Descriptions
---------------------
  The accepted topologies are somewhat flexible to be able to handle the DCN
  schema, as well as other schemas users might want to develop. There are 7
  broad elements that the service understands: domains, nodes, ports, links,
  paths and networks. These elements are structured hierarchically with
  domains, paths and networks at the top-level. Inside of domains can exist
  nodes, links, paths and networks. Ports exist inside nodes, and links can
  exist inside of ports. 

  Every element in the hierarchy has an “id” attribute. The ID takes the value
  of a Uniform Resource Name (URN) that contains not only an ID for the element
  defining it, but also its parent elements. This type of identifier is referred
  to as a fully-qualified identifier.  These IDs always begin with the prefix
  “urn:ogf:network:”. This prefix is followed by a colondelimited list of
  identifiers appropriate for that hierarchical level. For example, a
  fully-qualified port ID contains a domain ID, a node ID, and the port ID. The
  hierarchical level of each portion is indicated by either a
  “domain=”,"network=","path=",”node=”, “port=”, or “link=” prefix. Examples of
  different fully-qualified link ID types from the example topology files that
  come with the software are shown below:

  domain ID: urn:ogf:network:domain=blue.pod.lan
  node ID: urn:ogf:network:domain=blue.pod.lan:node=vlsr1
  port ID: urn:ogf:network:domain=blue.pod.lan:node=vlsr1:port=3
  link ID: urn:ogf:network:domain=blue.pod.lan:node=vlsr1:port=3:link=11.2.1.2

  When topology is added to the service, it is normalized into a hierarchy that
  matches that of the identifiers. This is done to ensure that it is feasible
  to construct queries no matter how the data was added to the service.

  Every topology sent to or received from the server will be wrapped in a
  <topology> element. This element is simply a wrapper containing one or more
  topological elements.

  The above restrictions are the only restrictions placed on the elements. If
  users want to add their own attributes to the various elements or otherwise
  extend the schema, the Topology Service will store and make available that
  data, as long as it matches the above schema.

  An example of this schema can be seen in the file "doc/example_topology.xml".
  The topology is the DCN topology of the Internet2 network as used by OSCARS.

Copyright (c) 2004-2009, Internet2 and the University of Delaware

All rights reserved.
