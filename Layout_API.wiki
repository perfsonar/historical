=Current Structure=

|| Directory || Purpose ||
|| Client || Holds all client libraries (Echo, LS, etc) ||
|| Client/Status || Holds the two L2 Status clients (local interaction, remote interaction) ||
|| Client/Topology || Holds the two Topology clients (local interaction, remote interaction) ||
|| Client/LS || Holds the old LS client (Jason is writing a new one) ||
|| Collectors || Holds modules used by the perfsonar-collector.pl. These are used to perform periodic measurement collection ||
|| Collectors/LinkStatus || Holds modules used by the link status collector ||
|| Collectors/LinkStatus/Agent || Holds the LinkStatus agents used by the link status collector ||
|| DataModels || Perl data structures representation of the perfSONAR schemas ||
|| Datatypes || XML to Perl objects data binding based on DataModels ||
|| DB || Holds modules for interacting with databases ||
|| DB/SQL || Holds the modules for interacting with databases with QueryBuilder brought up from RoseDB ||
|| Error || Holds the modules for exceptions in yee's framework ||
|| MP || Not sure it's used anymore. Appears to be a holdover from before 'Collectors' ||
|| OWP || Holds perfSONARBUOY utility functions ||
|| Services || Holds modules that register with the daemon to provide an external interface ||
|| Services/LS || Holds the modules for the lookup service ||
|| Services/MA || Holds the MA modules ||
|| Services/MP || Holds the MP modules ||
|| Services/MP/Agents || Actual measurement agent and data collector for specific MP ||
|| Services/MP/Config || parsing/loading configuration for specific MP ||
|| Status || Holds modules used by the Status MA and clients ||
|| Topology || Holds modules used by both the Topology Service and its clients ||
|| XML || Holds modules for producing XML ||


|| Module || Purpose ||
|| Common.pm || Hodge-podge of functions metadata merging, remapping, config merging, etc. ||
|| Error_compat.pm || Aaron's Exception Framework. Used by many modules. ||
|| Error.pm || Yee's Exception Base. Used by many modules. ||
|| EventTypeEquivalenceHandler.pm || 'utilization' and *http://ogf.org/.../utilization/1.0* are the "same" event type, so we have a handler to  alow modules to encode this information. Used by daemon. ||
|| Messages.pm || An API for creating message elements (e.g. startMessage, startMetadata, addParameter, etc). Used by Jason's/Aaron's services and the daemon. ||
|| NetLogger.pm || Module to provide formatting output according to the NetLogger schema ||
|| OSCARS.pm || Module to interact with the OSCARS IDC ||
|| owdb.pm || Module for interacting with OWAMP databases ||
|| OWP.pm || A set of utility functions used by perfSONARBUOY ||
|| ParameterValidation.pm || A wrapper for the *Params::Validate* that turns off validation when *--verbose* mode is off ||
|| RequestHandler.pm || Forms the core of the daemon. Allows modules to register message, metadata and equivalence handlers. Parses and properly redirects requests ||
|| Request.pm || Object that represents the incoming soap request ||
|| SNMPWalk.pm || A simple API that allows one to perform an SNMP walk of a router ||
|| Time.pm || A simple object to represent time (point or range) ||
|| Transport.pm || An object for sending requests and receiving responses from services ||

=Proposed Structure (updated version)=

==Directory structure requirements:==

 * each top level dir MUST have README file with detailed explanation of underlying  tree structure
 * every service MUST have a link to particular tagged XML schema location it implements (message  wise)

|| Directory || Purpose ||
|| / || root of the API, no standalone modules are allowed here ||
|| Config/ || root dir for ps-ps administration duties - webadmin, command line interfaces, parsing/loading config files, any extra functionality can be added as subdir name ||
|| Config/CGI/ || web based admin - CGI flavor ||
|| Config/mod_perl || web based admin - mod_perl ||
|| Config/CLI/ || command line based admin ||
|| Config/File/ || modules related to loading/parsing any config files ||
|| Services/ || root dir for all services ||
|| Services/Client/ || root dir for service clients ||
|| Services/MA/ || root dir for any service MA ||
|| Services/MP/ || root dir for any service MP ||
|| Services/Collector/ || root dir for any collector which gathers data from remote MAs ||
|| Logger/ || root dir for any kind of logging/reporting ||
|| Logger/Error/ || Yee's error module probably goes here and any other error reporting framework, Error_compat.pm should go here as well. ||
|| Logger/NetLogger/ || logging/reporting formatted for netlogger ||
|| UI/ || user interface related modules ||
|| UI/CGI ||  CGI UI scripts  ( gmaps for example ) |
|| UI/mod_perl ||  mod_perl based ||
|| Transport/ ||  this dir is covering any module related to anything before the XML payload parsing or after it was processed ||
|| Transport/Response/ || root dir for response handling ||
|| Transport/Request/ || root dir for request handling ||
|| Transport/HTTP/ ||  root dir for http content processing ||
|| Transport/HTTP/Server || standalone perl http server is here ||
|| DB/ || root dir for any DB helper/wrapper framework ||
|| DB/SQL/ || root dir for sql db frameworks ||
|| DB/XML/ || root dir for xmldb framework and other helper modules ||
|| Datatypes/ || root dir for any XML -> Perl object data binding framework. For example Datatypes/EventTypes/ is handling eventTypes binding. 
Basically, if there is a need for abstration layer around any XML entity then it should go here. ||
|| DataModels/ || root dir for any metadata/data model descriptive framework ||
|| DataModels/RelaxNG || any relaxng(compact) based descriptive data models ||
|| DataModels/XML || any XML schema descriptive data models (  module which uses perl data structures to represent XML schema) ||
|| Utils || root dir for anything else ( SNMPWalk.pm would go there) ||
|| Utils/Time || root dir for time related utilities ||
|| Utils/XML || root dir for some auxiliary XML printing/parsing utilities ( Messages.pm should be placed here ) ||
 
*_Some notes:_*

*_Status_* dir might be  moved under *_Response_* dir. In this case any service logging or response messaging will go there.

Subdirectory structure should be clear enough in order to distinguish between generic modules and MA/MP specific modules, either 
by including extra layer - for example - Services/Client/MA/  or by naming it properly - Services/Client/SNMP_MA.pl. 
If the client is generic one then Services/Client/SNMP.pm is more than enough. 
I am open to any suggestions.


 * *Aaron:* The Status directory seems odd to me since NetLogger and Logging don't seem to me to be related to Exception handling. 
Would Error/Logging be a better set of directories? ... What is the difference between an MP and a Collector
such that they are separate directories (this is probably a bigger discussion question in general)? 
You have SNMP_MA.pl as an example. Will script files be in these directories or just libraries? Currently, 
request/response handling is done a few files (Request.pm, RequestHandler.pm and EventTypeEquivalence.pm)
which I'm not sure splits up nicely between Request/Response directories.

 * *Maxim:* they report some status and not specifally error. So I cant agree on this one. Collector is some kind of aggregation agent which
 can get some info from the LS or Topology service and then gather some data from remote MAs. I suggest for scripts we need just bin directory in the trunk.

For request/response I can suggest  to add Transport dir and then Transport/Request and Transport/Response. Where the Trnasport will signify anything 
related to HTTP/SOAP and prior the XML parsing. If  EventTypeEquivalence.pm is about XML then it should probably go into Datatypes or Utils/XML.

Or may be Interfaces dir ? Then Interfaces/Response(Request) would make sense and any future web additions like visualization would end up in the
 Interface/UI or Interfaces/CGI ?

 * *Jeff:* I would prefer to remove the MP/MA level. Just give the service name. If it implements the MA protocol and MP protocol both - fine. 
It might make sense to put an MA/MP (or other protocols) under a protocols directory and put the Request/Response stuff in there as well. 
I would move Agents and Config out from Services (make them top level dirs parallel with Services - then have specific things to individual 
services under that with the same names as the corresponding service under Services).

 * *Maxim:* yes you can replace Services with Protocols but keep underlying structure the same. Then with Interfaces dir  it will look 
almost as the structure of the required docs for the MDM release :-)

MA and MP level is already  introduced throught the API and that will involve a lot of refactoring in order to provide unique names for the classes. 
 We can add Services/Measurement and put agent there or keep Agent as a subdir name if you prefer this name. 

 * *Jason:* I am not particularly fond of 'Client' being under services. There is a blurry line right now separating MPs and MAs and other services, 
do we want to stick with this level of indirection (i.e. stick what it is or isn't directly into the PM name?). Do Request/Response need their 
own directories? Wouldn't something more generic (including Message.pm) be more sensible?

 * *Maxim:*  Message.pm serves purely utility function. What is wrong with moving it under Utils/XML. The whole idea is to have very explicit 
API and move few generic "god modules" into the one location. I dont like to see many such modules because its extremely hard to reuse those 
and they polluting the API namespace.

Anyone else ?
