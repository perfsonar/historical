#summary December 13, 2011 Conference Call

=  December 13, 2011 Conference Call 12:00 p.m. EDT =

== Agenda/Minutes ==
  * Attendees: Brian, Eric, Sowmya, Joe, Jeff, Nils, Kavitha, Aaron, Martin
   * Excused: Jason
  * Present proposed LS design changes (Sowmya)
   * Introduction (Brian)
    * Goal is to focus on high-level design, not implementation details
    * Review of issues related to current LS.
    * Slides list some scalability requirements
    * Reviewed some non-requirements
     * Don't register metadat
     * OSCARS firendly name support. can be in topology
     * No XQuery support.
    * Jeff: General statement that we need a requirements document. Overview is good start, but need more specifics.
    * Joe: We need to make sure we understand how we re-design affects overall perfsonar architecture document.
     * Brian: Suspect it hasn't changed but we need to review. Also need to determine which document contains architecture details, and what it contains.
     * *Action:* Find and review LS architecture document. Decide how its changed. 
   * Design Overview (Eric)
    * Going to go over some general questions
    * Has a layered design similar to most modern cloud/distributed services:
     * Infrastructure layer - messaging, failure detection, security
     * Data layer - service registration, query processing
    * Infrastructure layer
     * Needs to support load requirements highlighted earlier
     * Constraints include that we have community based deployment (no central organization), worldwide availability, want highly available, and want some security
     * Jeff: In some ways there is a centralized organization in the form of the perfsonar collaboration
      * Discussion revolved around what it means to be centralized, and whether it was requirement
      * Brian/Eric: Design does not necessarily prevent us from having a centralized cloud service. 
     * Aaron: For security,really the main issue is how does the "client" verify the data is good.
    * P2P Model
     * Multi-organization, volunteer-based resources
    * Joe: Can we look at what services are?
    * Eric skipped to Data layer slides
    * Nils: What problems are we trying to solve?
    * Joe: What's in a service?
    * Joe: We need to figure out what we no longer are able to handle, how else we are handling it or does it need to be handled.
    * Service Records
     * Set of key/value pairs
     * A few required keys: name, type, url, domain
     * Aaron: What happens if topology has multiple domains? 
     * Jeff: Addressed similar concern to Aaron about domains 
      * Andy: One key thing is that we are using the word "domain" tomean a lot of different things. In the LS context it means "where do I store this", that's it. Should have other parameters to indicate things like "i host topologies X, Y, and Z"
     * Jeff: Also need to address the security issues
        * Andy: See slide later
     * Infrastructure
      * There is a ring 
    * Dan: Why do we need a ring if everyone has same routing table?
    * Martin: For security, you may just have a known CA that if a node has cert from then allowed to join
     * Eric: Implementation decision
    * Aaron: I bring up a new domain, where do I register?
     * Eric: You register with a ring
     * Andy: More specifically, you register with any node, the node forwards it to the right place
     * Eric/Brian/Sowmya: Assumes that at least one node stores wildcard. Once stored the routing table is updated with new domain
     * Caching node
      * Cache node keeps updated results of a specific query
      * API to query cache the same
     * Martin: Caching stuff is right on with what we were thinking for indexing service
      * *Action:* Martin will send out document on dLS
     * Eric: We may have more interesting ways to find caches
     * Aaron: Are there two types of caches? Ones that pre-fetch specific queries, and ones that cache as queries come in.
      * Eric: yes.
     * Dan: You don't need caches for this to work. You can build ring and add those later.
      * Eric: Yes
     * Security
      * Infrastructure: Want to limit who can join the ring 
      * Data Layer: 
       * Write protection. Service records cannot be modified by rogue client.
       * No read protection
      * Jeff: There are distributed hashtables like BigTable and Cassandra. Have we evaluated just using those or another existing p2p system?
       * Eric: Looked a lot at DHT, wrote one in a previous life. Need to do some more research, but most systems out there almost too-generic and make assumptions that don't apply. A lot of them are not stable yet either.
       * Dan: There's a lot of stuff out there, a lot of them fall flat on there face when it comes to security
     * Data Distribution (Sowmya)
      * Data is stored in ring based on "domain"
       * Aaron: One problem with querying based on domain is tha will stil have queries like "give me all pingers in world"
        * Andy: Can't avoid that. That's why we added the caches to deal with those.
        * Eric: Could store on multiple keys. This may mean we have to store a service multiple times.
       * Jeff: This is why we need a requirements document. So we can evaluate things like this better. Pointed out some use cases that are not clear given current information.
        * Nils: It'd be nice to explicitly have requirements defined that allow us to show quantifiable improvement
        * Joe: I agree. Requirements should be 50% of the work. We haven't written that down yet.
        * Brian: We've been discussing these problems for years. Need to collect together so improvement clear. 
      * How services are registered.
        * Client registers with any node in ring, ring forwards it toright place where it gets stored
        * Renewals with reg key
      * Security (Andy)
       * Up to clients to decide what service it trusts
       * Martin: Signing services similar to stuff presented for ls in the past
       * May be able to say if you are a guest/unauthenticated user, can only register specific keys and values
         * Andy: This will work, but if you start trying to limits when fields are non-null then problem gets much harder
       * Need to determine what can an anonymous person do
       * Need requirements to talk about security issues.
      * Next steps
       * One main one is need requirements document
        * Need more people beyond this call to buy-in for this to be successful
        * Document needs to also explciitly states what it fixes
        * Need to write why an existing solution does not meet needs
        * Cloud services
         * Its ok if individual domain wants to run ls on cloud service
         * If only commercial services allowed, then that likely will now work
       * Another meeting about requirements document in January
       
== Actions  ==
 * Generate a requirements document 
    * Schedule meeting about requirements document
 * Group will find and review original LS architecture document. Should determine how its changed.
 * Martin will send out document on dLS
 
== Where ==
ESnet conference bridge:

 * GDS: 00113498555555
 * Direct Dial: mcu1.es.net then down-arrow to meeting 555555 (or if your first, create it...)
 * phone: 1-510-423-9220 then 8555555# at the prompt.


== Last Updated ==

$Id$
