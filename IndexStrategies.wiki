#summary Integrating an Index Service and indexing strategies into the pSPS Framework

<wiki:toc max_depth="6" />

== Introduction ==

Indexing key pieces of frequently used information can result in a substantial 
performance gains for client applications and GUIS.  The pSPS framework has 
approached the problem of creating and caching this information in two different 
ways:

 * Running a script to query the gLS and hLS layer of the perfSONAR information services and build a local index.
   * _*PRO:*_:
     * Establishes the complete set of perfSONAR services
     * Can be run under local control (as often or infrequent as necessary)
   * _*CON*_: 
     * As more people implement this, load to Information Services grows
     * Does not feature an API - reusing proprietary cache file format
 * Centrally running the same script, and exposing the end result as a download.  Interested tools may then retrieve this copy at will.
   * _*PRO:*_:
     * Establishes the complete set of perfSONAR services
     * Reduces the load on Information Services    
   * _*CON*_: 
     * Adds a central component to perfSONAR framework, in addition to the existing Information Services
     * Does not use perfSONAR protocols to transmit the index
     * Does not feature an API - reusing proprietary cache file format

Indexed information represents a key use case for perfSONAR clients and
services.  The following sections describe some of the use cases and proposed
solutions.  

== Brainstorming ==

Ideas for the Index Service are below.  Expect these to change as we converge on a design

=== Desired Information ===

The index service should feature, or have the ability to calculate/find, the following:

 * Services
   * Names
   * Locations
   * Data Capabilities (eventTypes)
   * Domain Summary
   * IP Address Summary
   * Keyword Summary (TBD)
 * Data Organization
   * eventType
   * IP Address
   * Domain
 * Authority
   * Does a specific LS speak for a given domain?
   * Does a domain span several LSs?
 * Keywords
   * Note that keywords are tied to the _*data*_ currently (e.g. an interface may have a keyword associated with it, this is registered to the LS) - not a service
     * Need a way to map all of the keywords for a service back to the service      
   * _Density_ of a keyword (how often is a keyword used vs. how infrequently)
   * _Span_ of a keyword, e.g. see how this relates to a given IP Range/Domain
   
=== Architecture ===

Some general architectural considerations:

 * How to get the information - push vs. pull
 * push
   * need subscription to do this?
   * Modifications to the gLS required.  Would need to push out the updates, and would need more info in the summary set from the hLSs (e.g. individual service stats)
 * pull
   * No subscription, but still need modified summary set from the hLSs so the gLS is more complete
 * Summary set needs more information.  Currently hLS does not send information on individual services
 * New message format?  Would tie into API development
 * 

Could design the end result in one of two ways:

 * Standalone Service
   * Would deploy _anywhere_ and could function independently (as current IS infrastructure does)
   * May run into problem similar to original caching - too many index services will drive up load
   * Own messages in the protocol to exchange information between gLS/hLS.  Also messages for clients.  
 * Extension to Existing Information Services
   * Create new information set at the gLS level (new database collection)
   * implement new messages the same as a standalone service
   * easier to get necessary information (no synchronization steps needed as in a standalone)
     
== Last Updated ==

$Id$

