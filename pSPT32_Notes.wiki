#summary Plans for the pS-Performance Toolkit 3.2 Release

= Plans for the pS-Performance Toolkit 3.2 Release =

<wiki:toc max_depth="6" />

== Goals ==

  * A different base Linux version to replace the current Knoppix base
  * Multiple installation possibilities
    * A LiveCD version of the toolkit that functions similar to the current Knoppix-based version
    * A kickstart file to enable end users install their own version of the toolkit
    * A CD that users can boot and install the toolkit onto their hard drive
  * A method for upgrading existing systems to the new version
    * including saving existing configuration and data

== Base ==

The pS-Performance Toolkit 3.2 release will be based on CentOS 5.5. There are a
number of reasons behind why CentOS 5.5 was selected as opposed to some other
version of Linux.

  * _*Widely Used*_: A large number of our end users are using CentOS or RedHat Enterprise Linux 5.x. They're comfortable with that versioning, and in some cases, the fact that we would be modifying CentOS makes security clearances and the like much easier.
  * _*Freely Available*_: Anyone is able to download, use and redistribute CentOS without needing to get specific licenses. The ability to redistribute is what allows us to make available the toolkit without having to go through a number of lawyers figuring out what's needed.
  * _*Stability*_: The CentOS 5.X series will be supported until 2014. Other distributions may or may not have long term support, and may not make package stability the highest priority (e.g. [http://lwn.net/Articles/377930/ Fedora])
  * _*Existing Packages*_: The perfSONAR-PS group has made all of their tools and services available as RPMs. The use of CentOS allows us to make use of the work that MCNC has done in packaging things like Web100 and NDT.
  * _*Various Installation Options*_: Once we have produced a kickstart installation routine for the toolkit, there are a number of utilities available that will allow us to use slightly modified versions of those kickstart files to produce things like bootable live CDs, installation CDs, etc. It also allows us to setup a repository allowing people to install the various utilities on their pre-existing CentOS or RedHat systems.

== Upgrade Path ==
=== Configuration ===
  * NDT/NPAD: We'll need to recreate the .html files (possibly to new location).
  * bwctl: copy the old bwctld.conf/bwctld.keys/bwctld.limits (possibly to new location).
  * owamp: copy the old owampd.conf/owampd.pfs/owampd.limits (possibly to new location).
  * perfSONARBUOY: reread the old configuration, and rewrite it (possibly in a new location)
  * PingER: reread the old configuration, and rewrite it (possibly in a new location)
  * ntp: copy old ntp.conf and known server list (possibly to new location)
  * passwd: make a list of all the system accounts on the knoppix version, pull anything that's not in that last, and add it to the new passwd file.
  * administrative info: copy the old data to the new
  * enabled services: copy the old data to the new

=== Data ===
  * NDT/NPAD: It might be reasonable to just lose the old data as most folks don't seem to care about the tests. This would need to be something that we make clear to users. If someone wants to save the data, we could possibly come up with a workaround.
  * PingER: mysql may need to upgrade the tables if the version of MySQL is upgraded.
  * perfSONARBUOY: mysql may need to upgrade the tables if the version of MySQL is upgraded.
  * cacti: mysql may need to upgrade the tables if the version of MySQL is upgraded. The RRD files should be in the "correct" location. The location may need moved if desired.

== LiveCD Version ==
=== Ramdisk ===

By default, all LiveCDs utilize a ramdisk to allow writes to the filesystem. There are two issues with this situation:

  * Ramdisk memory limitations: All the CDs that I've seen use a form of Ramdisk that does not allocate physical memory to support the size of the ramdisk. This means that if either memory or the ramdisk fill up, the ramdisk can no longer accept writes, and the OOM killer will start trying to kill random processes to reclaim space.
  * Use of RAM to store temporary files: We could fix the ramdisk limitations above by fixing the size of the ramdisk to something less than ram size, and pre-allocating RAM to support it. However, that has two downsides: it wastes RAM, and it limits the size of the writeable area to some percentage of the size of RAM.

Some LiveCD implementations offer the ability to have all writes go to disk (e.g. RedHat/CentOS or Ubuntu). On reboot, those changes are overlayed over the information on the ISO. This has the downside of making it significantly more difficult to handle upgrades. In the current toolkit, we whitelist what gets saved instead of saving everything. This makes upgrades significantly more tractable because we know exactly what is being saved, instead of having everything saved (which could include changes to binary files and the like).

In the current toolkit, we overlay the ramdisk with a file on disk (/mnt/store/NPTools/scratch) which forces all writes to go to the disk instead of the ramdisk which works around the two issues above. The scratch file gets re-initialized each time so that we throw away the old data. 

The current toolkit uses a "feature" of aufs, the module that provides the overlays, that allows us to overlay the ramdisk with the file on disk. Unfortunately, that feature is not possible in the new version of aufs, and it won't work with the CentOS live cd. 

Possible new version: the initrd.img file contains the init scripts that setup the ramdisk and the like. It might make sense to try and mount the backing store inside the initrd, and then setup the overlay to use the scratch file on disk if it exists. This would be more difficult than just adding a new RPM since we'd have to specifically modify the initrd, but it is likely cleaner, and may be the only way possible.

=== Saving Configuration ===

The current iteration of the toolkit whitelists a handful of files and directories, and saves those files. These files are stored in a tarball on the backing store (/mnt/store/configs.tbz2), and are saved on shutdown, and once an hour (so that if a user makes changes, the files get saved).

Saved configuration can complicate upgrades. If an upgrade needs to make changes to existing configuration (e.g. the perfSONAR logging options change), an upgrade script needs to be written which updates this data. The difficulty can lie with configuration files which get saved which may have strange side-effects. For example, in the current toolkit, all of /etc and /usr/local/etc are saved. If a user modifies some random file in there (e.g. /etc/profile), it may have unintended side effects during the transition to a new version of the LiveCD. One trick we currently use to minimize these issues is to only save configuration files that have changed. The script that saves the configuration files compares each file to its analog on the CD, and if they're the same, it does not save the file. Longer term, though, there are other files (e.g. /etc/passwd) that will change, and we may need to look into a more selective approach to saving existing configuration.

=== Saving Data ===

The current iteration of the toolkit whitelists a handful of directories as data directories. On initial bootup, a set of directories are created on the backing store, one for each of the data directories, and the contents of the ISO's version of the data is copied over. At startup, these directories get overlaid using bind mounts. This ensures that all data is written directly to disk.

Saved data complicates upgrades. If an upgrade needs to make changes to information in the data directories (e.g. upgrading cacti may need to make changes to the cacti database), an upgrade script needs to be written which updates this data.

== Last Modified ==

$Id$
