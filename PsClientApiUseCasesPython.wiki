#summary Python mockups of ps client API use-cases

= Introduction =

Python mockups of perfSONAR client API use-cases (see PsClientApiUseCases).

Using specification in PsClientApi.

*Contents:*
<wiki:toc max_depth="1" />

= Use-cases =

{{{
"""
ps API Use-cases

"""

# Import the perfSONAR API mockup
from psapi import *

## Possible extensions to the API

# Standard parameters
P_RESOLUTION = 'resolution'

class Duration:
    def __init__(self, dur):
        """
        Duration such as '10m' or '1h 3m', decoded
        into number of seconds.
        """
        pass

## ----------------------------------------------------------
## Use-cases
## ----------------------------------------------------------

def use_case_1():
    """
    Return throughput/latency results between two endpoints in certain
    time period.
    """
    client = Client()
    endpoints = EndpointPair("foo.org", "bar.com")
    timerange = TimeRange(start="2010-01-01", end="2010-03-01")
    dataset = client.get_data(datatype="bwctl",
                              subject=endpoints,
                              timerange=timerange)

def use_case_2():
    """
    List all endpoints with throughput/latency data available
    """
    client = Client()
    # XXX: Does no subject imply that we want a list of subjects?!
    # XXX: Seems like it would be much clearer to say 'get_subjects()'
    dataset = client.get_data(datatype="bwctl")

def use_case_3():
    """
    Return X minute average utilization for Y time period on interface.
    """
    client = Client()
    interface = Interface(host="foo.org",
                          interface_name="if0",
                          interface_addr="111.222.333.444")
    timerange = TimeRange(start="2010-01-01", end="2010-03-01")
    # XXX: Should 'resolution' have a standard keyword?
    # XXX: Should a time duration be a standard data type?
    param = { P_RESOLUTION : Duration('5m') }
    data = client.get_data("utilization",
                           subject=interface, 
                           timerange=timerange,
                           param=param)

def use_case_4():
    """
    List all router interfaces with collected SNMP data
    """
    client = Client()
    # XXX: Same issue as for use_case_2().
    # XXX: In addition, how to say "SNMP data", is that one
    # XXX: datatype or a namespace, or a pattern or what?
    data = client.get_data("snmp")

def use_case_5():
    """
    Trigger bwctl test via a web GUI.
    
    To only present in the GUI options that are supported by that MA,
    query for metadata saying if a bwctl MP supports UDP, max rate, etc.
    """
    #XXX: Not clear how many queries this entails..
    pass

def main():
    use_case_1()
    use_case_2()
    use_case_3()
    use_case_4()
    use_case_5()
    return(0)

if __name__ == '__main__':
    import sys
    sys.exit(main())

}}}

= API =

{{{
"""
Mock-up of perfSONAR client API in Python.

Created: 1 August 2010
Author: Dan Gunter <dkgunter@lbl.gov> (dang)
"""

HINTS_ROOT = "http://www.perfsonar.net/gls.root.hints"

class Client:
    def __init__(self, 
                 gls_hints_file="",
                 gls_urls=[],
                 hls_urls=[],
                 service_urls=[]):
        """
        Construct and initialize a new client. 
        """
        pass

    def get_data(self,
                 datatype=None,
                 subject=None,
                 param={},
                 timerange=None):
          """
          Fetch and return data.

          Return: 
             DataSet object
          """
          pass

## Data classes


class TimeRange:
      """
      Start and/or end time.
      """
      def __init__(self, start=None, end=None):
            pass

ALL_TIMES = TimeRange()

class Data:
      """
      Summarized or "raw" measurement or other result values.
      """
      def __init__(self, 
                   time_range=ALL_TIMES,
                   summ_type="",
                   header=[],
                   values=[],
                   param={}):
            pass

class DataSet:
      """
      One or more Data items, and associated metadata (subject and
      parameters), if different from the containing DataSet metadata.
      """
      def __init__(self, 
                   service_url=None, 
                   datatype=None, 
                   subject=None, 
                   param=None, 
                   data=[]):
            pass

## Topology classes

class Subject:
      """
      Abstract perfSONAR Subject.
      """
      def __init__(self):
          pass

class NetworkElement(Subject):
      """
      Abstract Topology schema element.
      """
      def __init__(self):
          Subject.__init__(self)

class EndpointPair(NetworkElement):
      """
      Subclass of NetworkElement for 2 endpoint pairs.
      """
      def __init__(self, source, destination):
          NetworkElement.__init__(self)
          pass

class Interface(NetworkElement):
      """
      Subclass of NetworkElement for host interfaces 
      """
      def __init__(self, 
                   host=None,
                   host_address=None,
                   interface_name=None,
                   interface_addr=None):
          NetworkElement.__init__(self)
          pass

}}}