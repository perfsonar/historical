== Assumptions ==
Assumptions about Domains:

  * There is not necessarily a single source of topology information for a domain
  * There is not necessarily a single source of measurement information about a given domain
  * Domains may want to provide somewhere on a gradient from very little information about their network to in depth information

Assumptions about Clients:

  * Clients may not know where to obtain topology and measurement archives in a domain
  * Clients may want to obtain as much information about a circuit as possible
  * Clients may not know how to interpret device specific information
  * Clients may want to get at device specific information

Assumptions about Circuits:

  * They may be setup dynamically or statically
  * They may traverse a variety of device architectures

== High-Level Overview ==

Each circuit has a circuit descriptor containing pointers to each domain's
segment of the circuit. Each domain then publishes a descriptor of its
segment of the circuit. This segment descriptor can be as detailed as the
domain is willing to provide to end users. The segment descriptors will contain
pointers to the hardware elements traversed by their segment of the circuit.

The monitoring infrastructure can be relatively static or relatively dynamic,
depending on the specifics of the domain. A domain whose monitoring is
relatively static, might deploy monitoring software that constantly monitors
only the high-level hardware (e.g. the whole port instead of just a single
vlan). The descriptors that that domain would construct would then include
pointers to this monitoring data.

A dynamic monitoring domain might have infrastructure allowing it to
selectively monitor the portion of the hardware that a circuit traverses. As
part of the circuit creation process, the domain would have its monitoring
infrastructure start monitoring the individual pieces of the circuit. They
would then construct their circuit descriptor with pointers to that data
instead of the statically configured instances.

The client lookup phase would then proceed as follows. The client would have an
identifier for a given circuit. It would do a search in the lookup service to
find the topology service that had the circuit descriptor for that circuit.
Once found, the client could use the Lookup Service to look up the Topology
Services contain the descriptors for each of the domain segments. With that
information in hand, it could then consult the Lookup Service to find out what
monitoring data is available about each piece of each circuit segment. It could
then contact the various Measurement Archives containing data about the
circuit. To speed up recurring requests, the client could cache the address for
each measurement archive.


== The Overall Topology Architecture ==

As part of the circuit creation process, a circuit descriptor is created that
describes, from a very high level, the path that the circuit is taking.

{{{
<link id="urn:nml:internet2.edu:gri123456_downstream">
  <source>urn:nml:internet2.edu:hostA_eth0</source> <!-- the source can be a URN or a full description of a domain, node, port or link -->
  <destination>urn:nml:es.net:hostZ_eth1</destination> <!-- the destination can be a URN or a full description of a domain, node, port or link -->

  <!-- Name of the Circuit. Specified as GRI, but could be a human-readable one -->
  <name>gri123456</name>

  <!-- Human-Readable Description of the Circuit -->
  <description>Phoebus Circuit</description>

  <!-- Capacity of the circuit in bps. --> 
  <capacity>1000000000</capacity>  <!-- 1Gbps -->

  <!-- Period when the circuit will be active for -->
  <lifetime>
     <start>1234177754</start>
     <end>1234567890</end>
  </lifetime>

  <reverse-link>urn:nml:internet2.edu:gri123456_upstream</reverse-link>

  <relation type="over">
      <path>
          <hop id="internet2">
              <linkIdRef>urn:nml:internet2.edu:gri123456_downstream_segment</linkIdRef>
              <nextHop>esnet</nextHop>
          </hop>
          <hop id="esnet">
              <linkIdRef>urn:nml:es.net:gri123456_downstream_segment</linkIdRef>
          </hop>
      </path>
  </relation>
</link>

<link id="urn:nml:internet2.edu:gri123456_upstream">
  <source>urn:nml:internet2.edu:hostA_eth0</source> <!-- the source can be a URN or a full description of a domain, node, port or link -->
  <destination>urn:nml:es.net:hostZ_eth1</destination> <!-- the destination can be a URN or a full description of a domain, node, port or link -->
  <!-- Name of the Circuit. Specified as GRI, but could be a human-readable one -->
  <name>gri123456</name>

  <!-- Human-Readable Description of the Circuit -->
  <description>Phoebus Circuit</description>

  <!-- Capacity of the circuit in bps. --> 
  <capacity>1000000000</capacity>  <!-- 1Gbps -->

  <!-- Period when the circuit will be active for -->
  <lifetime>
     <start>1234177754</start>
     <end>1234567890</end>
  </lifetime>

  <reverse-link>urn:nml:internet2.edu:gri123456_downstream</reverse-link>

  <relation type="over">
      <path>
          <hop id="internet2">
              <linkIdRef>urn:nml:internet2.edu:gri123456_upstream_segment</linkIdRef>
              <nextHop>esnet</nextHop>
          </hop>
          <hop id="esnet">
              <linkIdRef>urn:nml:es.net:gri123456_upstream_segment</linkIdRef>
          </hop>
      </path>
  </relation>
</link>
}}}

During the circuit creation process, each domain SHOULD setup their monitoring
services to respond to requests for the ID specified for their domain. For
example, the status MA for Internet2 could be setup to respond to requests for
"urn:nml:internet2.edu:gri123456_segment", and have it return the up/down
status of the circuit. This would, obviously, only make sense for the monitored
properties that span the entire circuit like up/down status, packets/s,
bytes/s, etc. The monitored data SHOULD correspond to just those
counters/status for the circuit.

However, a domain can also choose to provide clients with more information.
They could create a descriptor for their segment of the circuit. The level of
detail provided would be up to the individual domain. They would then register
this descriptor with a Topology Service. Interested clients could then use the
segment identifier given in the circuit descriptor to look up the segment
descriptor.

An example is provided in Figure 2 that looks similar to the circuit identifier
given above in so far as its a path with element identifiers in each hop.
Unlike the circuit descriptor, this segment descriptor contains hops for each
port and link. The port and link ids in this descriptor might correspond to
physical elements OR they might reference virtual elements created during
circuit creation. Internet2 could configure its monitoring services to return
information for each identifier inside its segment descriptor.

{{{
<link id="urn:nml:internet2.edu:gri123456_segment">
  <relation type="over">
      <bidirectionalPath>
          <path direction="downstream">
              <hop id="0">
                  <portIdRef>urn:nml:internet2.edu:port_packrat_eth0</portIdRef>
                  <nextHop>1</nextHop>
              </hop>
              <hop id="1">
                  <portIdRef>urn:nml:internet2.edu:port_packrat_eth1</portIdRef>
                  <nextHop>2</nextHop>
              </hop>
              <hop id="2">
                  <linkIdRef>urn:nml:internet2.edu:link_packrat_newy</portIdRef>
                  <nextHop>3</nextHop>
              </hop>
              <hop id="3">
                  <portIdRef>urn:nml:internet2.edu:port_newy_1-A-4-1</portIdRef>
                  <nextHop>4</nextHop>
              </hop>
	      <!-- there's a psuedo-"link" between these two hops, the
		   cross-connect. It's ommitted here for brevity, but could be
		   added in for completeness. -->
              <hop id="4">
                  <portIdRef>urn:nml:internet2.edu:port_newy_1-A-4-5</portIdRef>
              </hop>
          </path>

          <path direction="upstream" />
      </bidirectionalPath>
  </relation>
</link>
}}}

If Internet2 wished to make even more information available to a client, it
could create descriptors of each of the elements and register those into a
Topology Service. Its other option would be to include those descriptors in
place of the identifiers. Even if it were to include them, the domain should
register them into the Topology Service. An example of this form is available
in Figure 3. Here, the path is identical to what it was in the previous segment
identifier, but the elements are now fleshed out some.

{{{
<link id="urn:nml:internet2.edu:gri123456_segment">
  <relation type="over">
      <bidirectionalPath>
          <path direction="downstream">
              <hop id="0">
                  <port id="urn:nml:internet2.edu:port_packrat_eth0">
			<name>eth0</name>
			<address type="ipv4">207.75.164.10</address>
			<description>Commodity connection</description>
                  </port>
                  <nextHop>1</nextHop>
              </hop>
              <hop id="1">
                  <port id="urn:nml:internet2.edu:port_packrat_eth1">
			<name>eth1</name>
			<address type="ipv4">207.75.164.8</address>
			<description>Connection to NEWY Switch</description>
                  </port>

                  <nextHop>2</nextHop>
              </hop>
              <hop id="2">
                  <link id="urn:nml:internet2.edu:link_packrat_newy">
			<name>PACKRAT_NEWY-1</name>
			<capacity>1000000000</capacity>
			<description>Link connecting Packrat to the NEWY Router</description>
		  </link>
                  <nextHop>3</nextHop>
              </hop>
              <hop id="3">
                  <port id="urn:nml:internet2.edu:port_newy_1-A-4-1">
			<relation type="management">
				<address type="dns">mss.newy32aoa.net.internet2.edu</address>
			</relation>
			<name>1-A-4-1</name>
			<description>Connection to Packrat</description>
                  </port>
                  <nextHop>4</nextHop>
              </hop>
	      <!-- there's a psuedo-"link" between these two hops, the
		   cross-connect. It's ommitted here for brevity, but could be
		   added in for completeness. -->
              <hop id="4">
                  <port id="urn:nml:internet2.edu:port_newy_1-A-4-5">
			<relation type="management">
				<address type="dns">mss.newy32aoa.net.internet2.edu</address>
			</relation>
			<name>1-A-4-5</name>
			<description>Connection to ESnet</description>
                  </port>
              </hop>
          </path>

          <path direction="upstream" />
      </bidirectionalPath>
  </relation>
</link>
}}}

=== Virtual Elements ===

During circuit creation, the domain might create virtual elements that
correspond to just that subsegment of a port or link that is traversed by the
circuit. These elements SHOULD be "over" physical hardware. If the domain makes
status, counters or other information available corresponding to these
elements, they SHOULD correspond to just those portions used by the circuit.

{{{
<layer2:link id="urn:nml:internet2.edu:gri123456_segment_0">
  <vlan>3000</vlan>

  <relation type="over">
      <linkIdRef>urn:nml:internet2.edu:link_packrat_to_CHIC</linkIdRef>
  </relation>

  <relation type="upstreamPort">
      <portIdRef>urn:nml:internet2.edu:port_packrat_eth0.3000</portIdRef>
  </relation>
  <relation type="downstreamPort">
      <portIdRef>urn:nml:internet2.edu:port_NEWY_eth3.3000</portIdRef>
  </relation>
</layer2:link>

<layer2:port id="urn:nml:internet2.edu:port_packrat_eth0.3000">
  <name>eth0.3000</name>
  <relation type="over">
      <portIdRef>urn:nml:internet2.edu:port_eth0</portIdRef>
  </relation>

  <relation type="child">
      <linkIdRef>urn:nml:internet2.edu:link_WASH_TO_NEWY</linkIdRef>
  </relation>

  <relation type="parent">
      <nodeIdRef>urn:nml:internet2.edu:node_packrat</nodeIdRef>
  </relation>
</layer2:port>
}}}

The domain can provide even more information, if desired, by adding their
static hardware definitions into a Topology Service. This hardware should also
be monitored so that users can query the element's state independent of any
circuits traversing it.

{{{
<link id="urn:nml:internet2.edu:link_packrat_to_CHIC">
  <relation type="parent">
      <portIdRef>urn:nml:internet2.edu:port_packrat_eth0</portIdRef>
  </relation>
  <name>The Link From Washington D.C. to New York</name>
</link>

<layer2:port id="urn:nml:internet2.edu:port_packrat_eth0">
  <name>eth0</name>
  <address type="mac">00:11:43:34:E0:23</address>
  <relation type="under">
      <portIdRef>urn:nml:internet2.edu:port_2001:468:1420:0:211:43ff:fe34:e023</portIdRef>
      <portIdRef>urn:nml:internet2.edu:port_207.75.164.10</portIdRef>
  </relation>
  <relation type="parent">
      <nodeIdRef>urn:nml:internet2.edu:node_packrat</nodeIdRef>
  </relation>

  <relation type="child">
      <linkIdRef>urn:nml:internet2.edu:link_WASH_TO_NEWY</linkIdRef>
  </relation>
</layer2:port>

<layer3:port id="urn:nml:internet2.edu:port_207.75.164.10">
  <address type="ipv4">207.75.164.10</address>
  <relation type="sibling">
      <portIdRef>urn:nml:internet2.edu:port_2001:468:1420:0:211:43ff:fe34:e023">
  </relation>
  <relation type="over">
      <portIdRef>urn:nml:internet2.edu:node_packrat_eth0</portIdRef>
  </relation>
  <relation type="parent">
      <nodeIdRef>urn:nml:internet2.edu:node_packrat</nodeIdRef>
  </relation>
</layer3:port>

<layer3:port id="urn:nml:internet2.edu:port_2001:468:1420:0:211:43ff:fe34:e023">
  <address type="ipv6">2001:468:1420:0:211:43ff:fe34:e023</address>
  <relation type="sibling">
      <portIdRef>urn:nml:internet2.edu:port_207.75.164.10</portIdRef>
  </relation>
  <relation type="over">
      <portIdRef>urn:nml:internet2.edu:node_packrat_eth0</portIdRef>
  </relation>
  <relation type="parent">
      <nodeIdRef>urn:nml:internet2.edu:node_packrat</nodeIdRef>
  </relation>
</layer3:port>

<layer3:port id="urn:nml:internet2.edu:port_packrat_lo">
  <name>lo</name>
  <address type="ipv4">127.0.0.1</address>

  <relation type="parent">
      <nodeIdRef>urn:nml:internet2.edu:node_packrat</nodeIdRef>
  </relation>
</layer3:port>

<base:node id="urn:nml:internet2.edu:node_packrat">
  <name>packrat</name>

  <relation type="child">
      <portIdRef>urn:nml:internet2.edu:port_207.75.164.10</portIdRef>
      <portIdRef>urn:nml:internet2.edu:port_2001:468:1420:0:211:43ff:fe34:e023">
      <portIdRef>urn:nml:internet2.edu:port_packrat_eth0</portIdRef>
      <portIdRef>urn:nml:internet2.edu:port_packrat_lo</portIdRef>
  </relation>
</base:node>

}}}


== How Status Is Obtained ==

The interested client starts off with the Circuit Descriptor. The client looks
up any desired status or monitored values (if applicable) using the
domain-specific segment IDs. If the desired information is not available, or
the client desires greater granularity. It
can look up the Circuit Segment Descriptor for each of the domains by
consulting the Lookup Service to find the relevant Topology Service for each
domain. If this information is not available, the client is done. If the
topological information is available, the client repeats the lookup, checking
if there is the desired monitored information about the desired circuit links.
If the information about a given element is not available, but there is an
"over" field pointing to a lower layer segment, it can (in parallel), start
checking the lower levels for status information. The client can determine the
level of granularity he will be getting by checking the "sibling" relation. If
a given level has multiple siblings, he can assume that the information found
at the level below will be less granular than any information he can get about
the elements at this level.



== Roadmap from Where We Are Today To The Above ==

=== Step 1 ===

Start off with the highest level of granularity. There are no Segment
Descriptors, each domain makes available information for their circuit segment.
The domain SHOULD provide status information.

A gui would be written to either find or take a circuit descriptor and
lookup status or other information. A domain that does not provide status
information will be listed as "unknown". Due to the time required to perform
these lookups and find this information, this gui would need to cache this
information. It would likely be best if it were a web frontend like E2EMon so
that the user doesn't have substantial lag when they click a link.

=== Step 2 ===

Either each domain deploys its own TS or a central one could be provided by
Internet2. Each domain could register a segment descriptor for their segment.
The depth of these circuits would be as detailed as that domain wanted to be.
If a domain did not register the sement descriptor, it would simply be viewed
as opaque by the gui.

The gui would be modified to lookup the segment descriptors in the TS. It
would then allow users to click on segments that have a corresponding segment
descriptor. The user would be taken to a page containing status.

=== Step 3 ===

Software would be written (or reused) to collect and make available any
available counters. This would include TL1 or SNMP.

The gui would be modified to collect this information when available.

=== Step 4 ===

The above software would be deployed on the various domains, and configured.

=== Step 5 ===

An agent would be written that would listen to OSCARS NB events. This agent
would construct the segment descriptors for a given domain, and an end-to-end
segment descriptor using the naming convention used in the above examples.

Initially, it would only work with predefined physical hardware that is always
being monitored.

=== Step 6 ===

The agent and monitoring software so that the agent could signal the monitoring
software to start collecting information about a given circuit's virtual links.
It would then make a circuit descriptor consisting of these virtual links.