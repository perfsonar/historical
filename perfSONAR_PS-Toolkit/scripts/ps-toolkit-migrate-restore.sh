#!/bin/bash
#########################################################################################
# ps-toolkit-migrate-restore.sh <backup-tarball>
# 
# This script reads in a tarball file generated by "ps-toolkit-migrate-backup" and places
# the files it contain at their required location. This includes creating UNIX user 
# accounts and rebuilding database data.
#
# WARNING: This script may overwrite data on the target system. It is expected this script
# will be run on a freshly installed machine with no non-root users or existing data. 
# Also, in its current form, running it multiple times may result in the same user and 
# groups being created multiple times. Use in the above cases at your own risk as you may
# lose  data or get unexpected results.
#########################################################################################

TEMP_BAK_NAME=ps-toolkit-migrate-backup
TEMP_RST_NAME=ps-toolkit-migrate-restore
TEMP_RST_DIR="/tmp/$TEMP_RST_NAME"

#Check options
if [ -z "$1" ]; then
    echo "Usage: $0 <tar-file>"
    echo "Missing path to tar file in options list"
    exit 1
fi


#Create temp directory
rm -rf $TEMP_RST_DIR
mkdir $TEMP_RST_DIR
if [ "$?" != "0" ]; then
    echo "Unable to create temp directory"
    exit 1
fi

#Unpack back up files
if [ -f "$1" ]; then
    tar -xzf $1 -C $TEMP_RST_DIR
else
    echo "File $1 does not exist"
    exit 1
fi

#get users
EXISTING_USERS=`awk -v LIMIT=500 -F: '($3>=LIMIT) && ($3!=65534)' /etc/passwd`
if [ -n "$EXISTING_USERS" ]; then
    echo "WARN: Looks like non-root user accounts were created prior to running this script. Skipping user account restoration to avoid conflicts"
else
    printf "Restoring users..."
    if [ -f "$TEMP_RST_DIR/$TEMP_BAK_NAME/etc/passwd" ]; then
        cat $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/passwd >> /etc/passwd 
        if [ "$?" != "0" ]; then
            echo "Unable to restore /etc/passwd"
            exit 1
        fi
        awk -F: '{ print $6 }' $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/passwd | xargs mkdir
    fi
    printf "[SUCCESS]"
    echo ""

    #get groups
    printf "Restoring groups..."
    if [ -f "$TEMP_RST_DIR/$TEMP_BAK_NAME/etc/group" ]; then
        cat $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/group >> /etc/group
        if [ "$?" != "0" ]; then
            echo "Unable to restore /etc/group"
            exit 1
        else
            #finish setting permission on home directories now that groups are created
            awk -F: '{ system("chown "$1":"$1" "$6) }' $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/passwd
        fi
    fi
    printf "[SUCCESS]"
    echo ""

    #get shadow file
    printf "Restoring passwords..."
    if [ -f "$TEMP_RST_DIR/$TEMP_BAK_NAME/etc/shadow" ]; then
        cat $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/shadow >> /etc/shadow 
        if [ "$?" != "0" ]; then
            echo "Unable to restore /etc/shadow"
            exit 1
        fi
    fi
    printf "[SUCCESS]"
    echo ""

    #restore administrator users
    printf "Restoring administrative users..."
    ADMIN_USER_ERROR=""
    if [ -f "$TEMP_RST_DIR/$TEMP_BAK_NAME/etc/wheel_users" ]; then
        ADMIN_USERS=`cat $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/wheel_users`
        if [ -n "$ADMIN_USERS" ]; then
            ADMIN_USERS_ARR=($ADMIN_USERS)
            for admin_user in "${ADMIN_USERS_ARR[@]}"
            do
                /usr/sbin/usermod -a -Gwheel $admin_user
                if [ "$?" != "0" ]; then
                    ADMIN_USER_ERROR="${ADMIN_USER_ERROR}Unable to add user $admin_user to wheel. "
                fi
            done
        fi
    fi
    if [ -z "$ADMIN_USER_ERROR" ]; then
        printf "[SUCCESS]"
        echo ""
    else
        printf "[WARN]"
        echo ""
        echo " - $ADMIN_USER_ERROR"
    fi
fi

#get administrative info
printf "Restoring administrative info..."
#maintain version information
SITE_PROJ_TK_VERS=`grep "site_project=pS-NPToolkit-" /opt/perfsonar_ps/toolkit/etc/administrative_info`
if [ -n "$SITE_PROJ_TK_VERS" ]; then
    echo $SITE_PROJ_TK_VERS >> $TEMP_RST_DIR/$TEMP_BAK_NAME/opt/perfsonar_ps/toolkit/etc/administrative_info
fi
cp $TEMP_RST_DIR/$TEMP_BAK_NAME/opt/perfsonar_ps/toolkit/etc/administrative_info /opt/perfsonar_ps/toolkit/etc/administrative_info 
if [ "$?" != "0" ]; then
    echo "Unable to restore /opt/perfsonar_ps/toolkit/etc/administrative_info"
    exit 1
fi
printf "[SUCCESS]"
echo ""

#get bwctl files
printf "Restoring bwctld files..."
cp $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/bwctld/bwctld.conf  /etc/bwctld/bwctld.conf
if [ "$?" != "0" ]; then
    echo "Unable to restore /etc/bwctld/bwctld.conf"
    exit 1
fi
#set iperf ports to defaults in firewall doc if not already set
BWCTLD_IPERFPORTS=`egrep -i "^iperf_port" /etc/bwctld/bwctld.conf`
if [ -z "$BWCTLD_IPERFPORTS" ]; then
    echo "" >> /etc/bwctld/bwctld.conf
    echo "iperf_port 5001-5200" >> /etc/bwctld/bwctld.conf
fi
#set iperf ports to defaults in firewall doc if not already set
#BWCTLD_THRULAYPORTS=`egrep -i "^thrulay_port" /etc/bwctld/bwctld.conf`
#if [ -z "$BWCTLD_THRULAYPORTS" ]; then
#    echo "" >> /etc/bwctld/bwctld.conf
#    echo "thrulay_port 5201-5400" >> /etc/bwctld/bwctld.conf
#fi
#set iperf ports to defaults in firewall doc if not already set
BWCTLD_NUTTCPPORTS=`egrep -i "^nuttcp_port" /etc/bwctld/bwctld.conf`
if [ -z "$BWCTLD_NUTTCPPORTS" ]; then
    echo "" >> /etc/bwctld/bwctld.conf
    echo "nuttcp_port 5401-5600" >> /etc/bwctld/bwctld.conf
fi
#set iperf ports to defaults in firewall doc if not already set
BWCTLD_PEERPORTS=`egrep -i "^peer_port" /etc/bwctld/bwctld.conf`
if [ -z "$BWCTLD_PEERPORTS" ]; then
    echo "" >> /etc/bwctld/bwctld.conf
    echo "peer_port 6001-6200" >> /etc/bwctld/bwctld.conf
fi
cp $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/bwctld/bwctld.limits /etc/bwctld/bwctld.limits  
if [ "$?" != "0" ]; then
    echo "Unable to restore /etc/bwctld/bwctld.limits"
    exit 1
fi

if [ -f "/etc/bwctld/bwctld.keys" ]; then
    cp $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/bwctld/bwctld.keys /etc/bwctld/bwctld.keys  
    if [ "$?" != "0" ]; then
        echo "Unable to restore /etc/bwctld/bwctld.keys"
        exit 1
    fi
fi

printf "[SUCCESS]"
echo ""

#get owamp files
printf "Restoring owampd files..."
cp $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/owampd/owampd.conf /etc/owampd/owampd.conf 
if [ "$?" != "0" ]; then
    echo "Unable to restore /etc/owampd/owampd.conf"
    exit 1
fi
# set testports to defaults defined in firewall doc if not already set
OWAMPD_OWP_TESTPORTS=`egrep -i "^testports" /etc/owampd/owampd.conf`
if [ -z "$OWAMPD_OWP_TESTPORTS" ]; then
    echo "" >> /etc/owampd/owampd.conf
    echo "testports 8760-8960" >> /etc/owampd/owampd.conf
fi

cp $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/owampd/owampd.limits  /etc/owampd/owampd.limits 
if [ "$?" != "0" ]; then
    echo "Unable to restore /etc/owampd/owampd.limits"
    exit 1
fi
printf "[SUCCESS]"
echo ""

#get enabled services
printf "Restoring enabled services..."
cp $TEMP_RST_DIR/$TEMP_BAK_NAME/opt/perfsonar_ps/toolkit/etc/enabled_services /opt/perfsonar_ps/toolkit/etc/enabled_services 
if [ "$?" != "0" ]; then
    echo "Unable to restore /opt/perfsonar_ps/toolkit/etc/enabled_services"
    exit 1
fi
printf "[SUCCESS]"
echo ""

#get NTP config
printf "Restoring NTP configuration..."
cp $TEMP_RST_DIR/$TEMP_BAK_NAME/opt/perfsonar_ps/toolkit/etc/ntp_known_servers /opt/perfsonar_ps/toolkit/etc/ntp_known_servers
if [ "$?" != "0" ]; then
    echo "Unable to restore /opt/perfsonar_ps/toolkit/etc/ntp_known_servers"
    exit 1
fi

cp $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/ntp.conf /etc/ntp.conf 
if [ "$?" != "0" ]; then
    echo "Unable to restore /etc/ntp.conf"
    exit 1
fi
printf "[SUCCESS]"
echo ""

#get cacti data
printf "Restoring cacti..."
rm -rf /var/lib/cacti
cp -r $TEMP_RST_DIR/$TEMP_BAK_NAME/var/lib/cacti /var/lib/cacti 
if [ "$?" != "0" ]; then
    echo "Unable to restore /var/lib/cacti"
    exit 1
fi
printf "[SUCCESS]"
echo ""

#get owmesh
printf "Restoring scheduled tests..."
cp $TEMP_RST_DIR/$TEMP_BAK_NAME/opt/perfsonar_ps/perfsonarbuoy_ma/etc/owmesh.conf /opt/perfsonar_ps/perfsonarbuoy_ma/etc/owmesh.conf
if [ "$?" != "0" ]; then
    echo "Unable to restore /opt/perfsonar_ps/perfsonarbuoy_ma/etc/owmesh.conf"
    exit 1
fi
# set OWPTestPorts to defaults defined in firewall doc if not already set
OWMESH_OWP_TESTPORTS=`grep -i "OWPTestPorts" /opt/perfsonar_ps/perfsonarbuoy_ma/etc/owmesh.conf`
if [ -z "$OWMESH_OWP_TESTPORTS" ]; then
    echo "OWPTestPorts     8760-8960" >> /opt/perfsonar_ps/perfsonarbuoy_ma/etc/owmesh.conf
fi
printf "[SUCCESS]"
echo ""

#get mesh config if exists
if [ -f "$TEMP_RST_DIR/$TEMP_BAK_NAME/opt/perfsonar_ps/mesh_config/etc/agent_configuration.conf" ]; then
    printf "Restoring mesh configuration..."
    cp $TEMP_RST_DIR/$TEMP_BAK_NAME/opt/perfsonar_ps/mesh_config/etc/agent_configuration.conf /opt/perfsonar_ps/mesh_config/etc/agent_configuration.conf
    if [ "$?" != "0" ]; then
        echo "Unable to restore /opt/perfsonar_ps/mesh_config/etc/agent_configuration.conf"
        exit 1
    fi
    printf "[SUCCESS]"
    echo ""
fi

#get maddash if exists
if [ -f "$TEMP_RST_DIR/$TEMP_BAK_NAME/etc/maddash/maddash-server/maddash.yaml" ]; then
    printf "Restoring MaDDash configuration..."
    mkdir -p /etc/maddash/maddash-server/
    cp $TEMP_RST_DIR/$TEMP_BAK_NAME/etc/maddash/maddash-server/maddash.yaml /etc/maddash/maddash-server/maddash.yaml
    if [ "$?" != "0" ]; then
        echo "Unable to restore /etc/maddash/maddash-server/maddash.yaml"
        exit 1
    fi
    printf "[SUCCESS]"
    echo ""
fi

#restore databases
printf "Restoring bwctl results..."
mysql -u root bwctl < $TEMP_RST_DIR/$TEMP_BAK_NAME/mysql_data/bwctl.sql
if [ "$?" != "0" ]; then
    echo "Unable to restore bwctl MySQL databse"
    exit 1
fi
printf "[SUCCESS]"
echo ""

printf "Restoring owamp results..."
mysql -u root owamp < $TEMP_RST_DIR/$TEMP_BAK_NAME/mysql_data/owamp.sql
if [ "$?" != "0" ]; then
    echo "Unable to restore owamp MySQL databse"
    exit 1
fi
printf "[SUCCESS]"
echo ""

printf "Restoring traceroute results..."
mysql -u root traceroute_ma < $TEMP_RST_DIR/$TEMP_BAK_NAME/mysql_data/traceroute_ma.sql
if [ "$?" != "0" ]; then
    echo "Unable to restore traceroute_ma MySQL databse"
    exit 1
fi
printf "[SUCCESS]"
echo ""

printf "Restoring pinger results..."
mysql -u root pingerMA < $TEMP_RST_DIR/$TEMP_BAK_NAME/mysql_data/pingerMA.sql
if [ "$?" != "0" ]; then
    echo "Unable to restore pingerMA MySQL databse"
    exit 1
fi
printf "[SUCCESS]"
echo ""

printf "Restoring cacti results..."
mysql -u root cacti < $TEMP_RST_DIR/$TEMP_BAK_NAME/mysql_data/cacti.sql
if [ "$?" != "0" ]; then
    echo "Unable to restore cacti MySQL databse"
    exit 1
fi
printf "[SUCCESS]"
echo ""

#Clean up temp directory
rm -rf $TEMP_RST_DIR
echo "Restore complete."
