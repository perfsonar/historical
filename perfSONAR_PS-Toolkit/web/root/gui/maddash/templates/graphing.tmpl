<script type="text/javascript">
function init(){

	var sTime = document.getElementById("startParam").value*1000;
	var eTime = document.getElementById("endParam").value*1000;
	var currentTime = new Date();
	var futureTime = eTime + 4*60*60;
	if(eTime >= currentTime.getTime() || sTime <= (currentTime.getTime()-3600000)){
		document.getElementById("future").style.visibility="hidden";
	}

	var xlow = document.getElementById("x_lower_range");
	var xhigh = document.getElementById("x_higher_range");

        var newDate = new Date( );
        newDate.setTime( sTime );
        dateString = newDate.toLocaleDateString();
        xlow.innerHTML = "Start date: <br/>"+dateString;
        newDate.setTime( eTime );
        dateString = newDate.toLocaleDateString();
        xhigh.innerHTML = "End date: <br/>"+dateString;


	keyArray["max"]=0;
	keyArray["min"]=1;
	keyArray["loss"]=2;
	keyArray["maxr"]=3;
	keyArray["minr"]=4;
	keyArray["lossr"]=5;
        keyArray["ninetyfifthpercentile"]=6;
        keyArray["median"]=7;
        keyArray["firstq"]=8;
        keyArray["ninetyfifthpercentiler"]=9;
        keyArray["medianr"]=10;
        keyArray["firstqr"]=11;
	

}


function getChartData() {
	var data = new Array();
	var msts;
	<TMPL_IF BUCKETS>
		<TMPL_LOOP NAME=GRAPHDATA>
	 		var ctr = <TMPL_VAR NAME="__counter__"> - 1;
	    	data[ctr] = new Array(13);
   
	   		 msts = <TMPL_VAR NAME=timestamp>;
       		 data[ctr][0] = new Date(parseInt(msts)*1000);
        	 data[ctr][1] = <TMPL_VAR NAME=max>;
        	 data[ctr][2] = <TMPL_VAR NAME=min>;
        	 data[ctr][3] = <TMPL_VAR NAME=loss>;
                 data[ctr][4] = <TMPL_VAR NAME=maxr>;
                 data[ctr][5] = <TMPL_VAR NAME=minr>;
                 data[ctr][6] = <TMPL_VAR NAME=lossr>;
         	 data[ctr][7] = <TMPL_VAR NAME=ninetyfifthpercentile>;
        	 data[ctr][8] = <TMPL_VAR NAME=median>;
        	 data[ctr][9] = <TMPL_VAR NAME=firstq>;
		 data[ctr][10] = <TMPL_VAR NAME=ninetyfifthpercentiler>;
                 data[ctr][11] = <TMPL_VAR NAME=medianr>;
                 data[ctr][12] = <TMPL_VAR NAME=firstqr>;

    	</TMPL_LOOP>	
   <TMPL_ELSE>
		<TMPL_LOOP NAME=GRAPHDATA>
	 		 var ctr = <TMPL_VAR NAME="__counter__"> - 1;
	    	 data[ctr] = new Array(7);
	   		 msts = <TMPL_VAR NAME=timestamp>;
       		 data[ctr][0] = new Date(parseInt(msts)*1000);
        	 data[ctr][1] = <TMPL_VAR NAME=max>;
        	 data[ctr][2] = <TMPL_VAR NAME=min>;
        	 data[ctr][3] = <TMPL_VAR NAME=loss>;
                 data[ctr][4] = <TMPL_VAR NAME=maxr>;
                 data[ctr][5] = <TMPL_VAR NAME=minr>;
                 data[ctr][6] = <TMPL_VAR NAME=lossr>;
        </TMPL_LOOP>
   </TMPL_IF>
   
    return data;
}


function showURL(){
        var link = document.getElementById("urllink");
        if(link.value == "Show"){
                var urldiv = document.getElementById("url_div");
                var urltext = urldiv.getElementsByTagName("textArea");
                urldiv.style.visibility = "visible";
                selectText(urltext[0].id);
                link.value = "Hide";
        }else{
                var urldiv = document.getElementById("url_div");
                urldiv.style.visibility = "hidden";
                link.value = "Show";
        }
}

function selectText(id){
     document.getElementById(id).focus();
     document.getElementById(id).select();
}


function updateUrl(url){
	var urldiv = document.getElementById("url_div");
	urldiv.innerHTML=url;
}


function changeVisibility(el){
	var id = el.id;
	var lineId = keyArray[id];
	var toggleValue = el.checked;
	chart.setVisibility(lineId, toggleValue);
}

var chtdata = getChartData();
   <TMPL_IF NAME=BUCKETS>
     var chart = new Dygraph(document.getElementById("chart_div"),chtdata, 
						{        yAxisLabelFormatter: function(x) {return Math.round(x*1000)/1000+' ms'},
							labelsSeparateLines: true,
							labels: ['Date','max(ms)','Minimum (ms)','Loss', 'maxr(ms)','minr(ms)','lossr','95th Percentile (ms)','Median (ms)','firstq(ms)','ninetyfifthpercentiler(ms)','medianr(ms)','firstqr(ms)'],
							'Loss': {   strokeWidth:0.0, drawPoints:true, pointSize:3, highlightCircleSize:4, ylabel: 'Loss', 
										axis: {  yAxisLabelFormatter: function(x) {return Math.round(x*100)/100+'%'}}},
							'lossr': {strokeWidth:0.0, drawPoints:true, pointSize:3, highlightCircleSize:4, axis: 'Loss'},
							visibility: [false, true, true, false, false, false, true,true,false,false,false], 
							includeZero: true,
							connectSeparatedPoints: true,
							xlabel:'Time',
							labelsDiv: 'labelsDiv',colors: ['#804000','#2554C7','#000000','#41A317','#FF8040','#C11B17','#FBB117','#FF0080','#00FF00','#461B7E','#617C58','#7D0541']
						}
			);
   <TMPL_ELSE>
          var chart = new Dygraph(document.getElementById("chart_div"),chtdata, 
						{    
							yAxisLabelFormatter: function(x) {return Math.round(x*1000)/1000+' ms'},
							labelsSeparateLines: true,
							labels: ['Date','max(ms)','min(ms)','loss', 'maxr(ms)','minr(ms)','lossr'],
							'loss': {   strokeWidth:0.0, drawPoints:true, pointSize:3, highlightCircleSize:4,  
										axis: {  ylabel: 'Loss', yAxisLabelFormatter: function(x) {return Math.round(x*100)/100+'%'}}},
							'lossr': {strokeWidth:0.0, drawPoints:true, pointSize:3, highlightCircleSize:4,axis: 'loss'},
							visibility: [false, true, true, true, true,true], 
							connectSeparatedLines: true,
							includeZero: true,
							xlabel:'Time',
							labelsDiv: 'labelsDiv',
							colors: ['#804000','#2554C7','#000000','#41A317','#FF8040','#C11B17']
						}
			);
   </TMPL_IF>
 <TMPL_IF NAME=NEGATIVELATENCY>
	displayNegLatMsg(<TMPL_VAR NAME=NEGATIVELATENCY>);	
 </TMPL_IF>
function changeYaxis(el){
	var value = el.checked;
	chart.updateOptions({includeZero: value});
}

function setCheckBoxOption(chid,value){
 var checkbox=document.getElementById(chid);
 chid.checked=value;
} 
 
 function updateTimeSeriesData(timelink){
   	 var bId = timelink.id;
         var pastTimeErrorDiv = document.getElementById("pastTimeError");
         pastTimeErrorDiv.innerHTML = "";
         var futureTimeErrorDiv = document.getElementById("futureTimeError");
         futureTimeErrorDiv.innerHTML = "";
         var maurl = document.getElementById("ma_url").value;
         var testkey = document.getElementById("testkey").value;
         var sparam = document.getElementById("startParam");
         var eparam = document.getElementById("endParam");
         var xlow = document.getElementById("x_lower_range");
         var xhigh = document.getElementById("x_higher_range");
 
         var chkbox =  document.getElementById("bothdir");

   	 if(bId == "past"){
		var eTime = parseInt(sparam.value)+(0.5*60*60);
   	 	var sTime = eTime - (4.5*60*60);
		var fullurl = "delayGraph.cgi?url="+maurl+"&key="+testkey+"&sTime="+sTime+"&eTime="+eTime+"&DOMloaded=yes";
		document.getElementById("future").disabled=false;
		var success = retrieveData(fullurl,"onedirection");
                if(success != 0){
                        pastTimeErrorDiv.innerHTML = "Error retrieving data!!";
                }else{
			toggleReverseDirectionOptions(false);
       	  		toggleForwardDirectionOptions(false);
	                sparam.value = sTime;
	                eparam.value = eTime;
			var newDate = new Date( );
			newDate.setTime( sTime*1000 );
			dateString = newDate.toLocaleDateString();
  			xlow.innerHTML = "Start date: <br/>"+dateString;
                        newDate.setTime( eTime*1000 );
                        dateString = newDate.toLocaleDateString();
			xhigh.innerHTML = "End date: <br/>"+dateString;
                        var futureTimeLink = document.getElementById("future");
                        toggleTimeControls(futureTimeLink,true);
	      }
	}else if(bId == "future"){
	    var sTime = parseInt(eparam.value)-(0.5*60*60);
		var eTime = sTime + (4.5*60*60);
		var jsTime = sTime*1000; //js needs in milliseconds
		var jeTime = eTime*1000;
		var currentTime = new Date();
		document.getElementById("past").disabled=false;
		if(jsTime < currentTime.getTime()){
			if (jeTime > currentTime.getTime()){
				jeTime = currentTime.getTime();
				eTime = jeTime/1000;
				futureTimeErrorDiv.innerHTML = "Rounded end time!!";
                                toggleTimeControls(timelink,false);
			}
                	var fullurl = "delayGraph.cgi?url="+maurl+"&key="+testkey+"&sTime="+sTime+"&eTime="+eTime+"&DOMloaded=yes";
                	var success = retrieveData(fullurl,"onedirection");
			if(success != 0){
				futureTimeErrorDiv.innerHTML = "Error retrieving data!!";
			}else{
				toggleReverseDirectionOptions(false);
				toggleForwardDirectionOptions(false);
	                        sparam.value = sTime;
        	                eparam.value = eTime;
	                        var newDate = new Date( );
        	                newDate.setTime( sTime*1000 );
                	        dateString = newDate.toLocaleDateString();
                        	xlow.innerHTML = "Start date: <br/>"+dateString;
	                        newDate.setTime( eTime*1000 );
        	                dateString = newDate.toLocaleDateString();
                	        xhigh.innerHTML = "End date: <br/>"+dateString;
	                        var pastTimeLink = document.getElementById("past");
        	                toggleTimeControls(pastTimeLink,true);

			}
		}else{
			futureTimeErrorDiv.innerHTML = "Cannot retrieve data! Time range in future!!";
		}
	}
 updateDirectionData(chkbox);
 }         

function toggleTimeControls(timelink,value){
   console.log("toggleTimeControl"+timelink.id);
   console.log("toggleTimeControl:"+value);
   if(value==true){
     timelink.style.visibility = "visible";
   }else{
     timelink.style.visibility = "hidden";
   }
}

function toggleReverseDirectionOptions(value){
	var notVal;
        var keyDivR = document.getElementById("keyDivR");
        	
	if(value==true){
		notVal=false;
                keyDivR.style.visibility = "visible";
	}else if(value==false){
		notVal=true;
	//	var chkbox =  document.getElementById("bothdir");
	  //      chkbox.checked = false;
                keyDivR.style.visibility = "hidden";

	}
	var checkbox =  document.getElementById("maxr");
	checkbox.checked = false;
	checkbox.disabled = notVal;
	var checkbox1 =  document.getElementById("minr");
        checkbox1.checked = value;
	var checkbox2 =  document.getElementById("lossr");
        checkbox2.checked = value;

	var bucket = document.getElementById("buckets").value;
	console.log(bucket);
	if(bucket=="1"){
		 checkbox = document.getElementById("ninetyfifthpercentiler");
        	 checkbox.disabled = notVal;
		 checkbox.checked = false;
        	 checkbox1 =  document.getElementById("medianr");
        	 checkbox1.disabled = notVal;
        	 checkbox1.checked = false;
		 checkbox2 =  document.getElementById("firstqr");
       		 checkbox2.disabled = notVal;
		 checkbox2.checked = false;

	}
}

function toggleForwardDirectionOptions(value){
        var checkbox =  document.getElementById("max");
        checkbox.checked = false;
        var bucket = document.getElementById("buckets").value;
        console.log(bucket);
        if(bucket=="1"){
                 checkbox = document.getElementById("ninetyfifthpercentile");
                 checkbox.checked = false;
                 checkbox1 =  document.getElementById("median");
                 checkbox1.checked = false;
                 checkbox2 =  document.getElementById("firstq");
                 checkbox2.checked = false;

        }

}

function updateDirectionData(chkbox){
	toggleReverseDirectionOptions(chkbox.checked);
	if(chkbox.checked){
		var dirMsgDiv = document.getElementById("dirMessageDiv"); 
         	dirMsgDiv.display='block';
		var sparam = document.getElementById("startParam").value;
        	var eparam = document.getElementById("endParam").value;
         	var maurl = document.getElementById("ma_url").value;
         	var testkey = document.getElementById("testkey").value;
	 	var testkeyR = document.getElementById("testkeyR").value;
		if(testkeyR != ""){
	 		var fullurl = "delayGraph.cgi?url="+maurl+"&key="+testkey+"&keyR="+testkeyR+"&sTime="+sparam+"&eTime="+eparam+"&DOMloaded=yes";
         		if(fullurl != null){
	 			var success = retrieveData(fullurl,"bidirection");
				if(success>=0){
					dirMsgDiv.innerHTML = " ";
				}else{
					//dirMsgDiv.innerHTML = "<br> Error updating chart";
				        showProgressText();
                                	//dirMsgDiv.display='none';
				}
			}
			//Turn off max delay checkbox
			document.getElementById("max").checked = false;
			var bucket = document.getElementById("buckets");
			if(bucket == "1"){
				document.getElementById("ninetyfifthpercentile").checked = false;
				document.getElementById("median").checked = false;
				document.getElementById("firstq").checked = false;
			}
		}else{
				toggleReverseDirectionOptions(false);
				dirMsgDiv.innerHTML = "<br>Error: Testkey for reverse direction is not specified!!";
				dirMsgDiv.display='none';
		}
	}else{
		//Turn off reverse direction lines on the chart
		var lineId = keyArray["maxr"];
		chart.setVisibility(lineId, false);
		lineId = keyArray["minr"];
		chart.setVisibility(lineId, false);
		lineId = keyArray["lossr"];
		chart.setVisibility(lineId, false);
		var bucket = document.getElementById("buckets");
		if(bucket==true){
			lineId = keyArray["ninetyfifthpercentiler"];
			chart.setVisibility(lineId, false);
                	lineId = keyArray["medianr"];
                	chart.setVisibility(lineId, false);
                	lineId = keyArray["firstqr"];
                	chart.setVisibility(lineId, false);
		}
	}
}

function createRequestObject() { 
  	var req; 
  	if (window.XMLHttpRequest) { // Firefox, Safari, Opera... 
    		req = new XMLHttpRequest(); 
  	} else if (window.ActiveXObject) { // Internet Explorer 5+ 
    		req = new ActiveXObject("Microsoft.XMLHTTP"); 
  	} else { 
    		alert('There was a problem creating the XMLHttpRequest object'); 
    		req = '';
  	}		
  	return req; 
}  


function retrieveData(fullurl,direction){
	var bucket = document.getElementById("buckets").value;
	var httpreq = createRequestObject();
	if(fullurl != null){
		httpreq.open("GET", fullurl, true);
	        var setprogressTimerID = setInterval("showProgressText()",200);

		httpreq.onreadystatechange = function(){
		        clearInterval(setprogressTimerID);
                        deleteProgressText();
			var negLatChk =0;
	    		if(httpreq.readyState==4 && httpreq.status == 200){
					var httpResponse = httpreq.responseText;
		 			var errchk = httpResponse.indexOf("Error");
					var emptychk = httpResponse.indexOf("No results");
					if(errchk != -1 || emptychk != -1){
						return -1;
					}
            		var dataJson = eval("(" + httpResponse + ")");
			if(dataJson != null){
				chtdata = new Array(dataJson.length);
				for (i=0;i<dataJson.length;i++){
                          		chtdata[i] = new Array();
                          		chtdata[i].push(new Date(dataJson[i]["timestamp"]*1000));
                          		chtdata[i].push(dataJson[i]["max"]);
                          		chtdata[i].push(dataJson[i]["min"]);
                          		chtdata[i].push(dataJson[i]["loss"]);
					chtdata[i].push(dataJson[i]["maxr"]);
                          		chtdata[i].push(dataJson[i]["minr"]);
					chtdata[i].push(dataJson[i]["lossr"]);
					if(bucket == 1){
                          			chtdata[i].push(dataJson[i]["ninetyfifthpercentile"]);
                                		chtdata[i].push(dataJson[i]["median"]);
                                		chtdata[i].push(dataJson[i]["firstq"]);
                                		chtdata[i].push(dataJson[i]["ninetyfifthpercentiler"]);
                                		chtdata[i].push(dataJson[i]["medianr"]);
                                		chtdata[i].push(dataJson[i]["firstqr"]);
					}
				if(dataJson[i]["min"]<0 || dataJson[i]["minr"]<0){
					negLatChk = 1;
				}

					  	}
                    	chart.updateOptions({'file': chtdata});
					 	var visibilityArray = new Array();
					 	if(bucket == 1){
							if(direction == "bidirection"){
									visibilityArray = [false, true, true, false, true, true,false, false, false,false,false,false];
							}else{
									visibilityArray = [false, true, true, false, false, false,false, false, false,false,false,false];
							}
					 }else{
					 if(direction == "bidirection"){
                            visibilityArray = [false, true, true, false, true, true];
					 }else{
                            visibilityArray = [false, true, true, false, false, false];
					 }

				     }
       				chart.updateOptions({includeZero: true, connectSeparatedPoints: true, visibility: visibilityArray});                                 
					setCheckBoxOption("bothdir",true);
					displayNegLatMsg(negLatChk);
					return 0;
				}else{
				return -1;
				}
			
			}else{
			return -1;
			}
	    }
		httpreq.send(null);
                return 0;
	}else{
		return -1;
	}
}

function showProgressText(){
         console.log("came inside showProgress");
         var prDiv = document.getElementById("progressDiv");
	 console.log(prDiv.style.visibility);
         prDiv.style.visibility= 'visible';
	 console.log(prDiv.style.visibility);
	 console.log("Updated dom");
	 return 0;
}

function deleteProgressText(){
         var prDiv = document.getElementById("progressDiv");
	 console.log(prDiv.style.visibility);
	 prDiv.style.visibility= 'hidden';
	 console.log(prDiv.style.visibility);
}

function displayNegLatMsg(value){
	if (value == 1){
		var msgDiv = document.getElementById("negLatMsgDiv");
		console.log(msgDiv.style.visibility);
		msgDiv.style.visibility = 'visible';
	}else{
		var msgDiv = document.getElementById("negLatMsgDiv");
                console.log(msgDiv.style.visibility);
                msgDiv.style.visibility = 'hidden';

	}
}

</script>

